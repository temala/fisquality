{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines: French Business Simulation Platform\n\n## Design Approach\n**Reference-Based Approach**: Taking inspiration from financial platforms like Linear (for clean data visualization) and modern fintech apps, with emphasis on interactive graph visualization similar to network analysis tools.\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary Colors (Dark Mode Focus)**:\n- Primary: 220 85% 60% (Professional blue for trust)\n- Secondary: 210 15% 25% (Dark slate for backgrounds)\n- Success: 142 71% 45% (Green for profits)\n- Warning: 38 92% 50% (Orange for expenses)\n- Danger: 0 84% 60% (Red for losses/taxes)\n\n**Light Mode Variants**:\n- Background: 210 20% 98%\n- Surface: 0 0% 100%\n- Text: 210 15% 25%\n\n### B. Typography\n- **Primary**: Inter (Google Fonts) - Clean, readable for financial data\n- **Accent**: JetBrains Mono (Google Fonts) - For currency amounts and numbers\n- **Hierarchy**: H1 (2xl), H2 (xl), Body (base), Caption (sm)\n\n### C. Layout System\n**Tailwind Spacing Units**: Primarily 2, 4, 6, 8, 12, 16\n- Mobile-first responsive design\n- Container max-width for readability\n- Generous whitespace for complex financial data\n\n### D. Component Library\n\n**Navigation**:\n- Bottom navigation bar for mobile (4-5 main sections)\n- Floating action button for \"Run Simulation\"\n- Breadcrumb navigation within simulation steps\n\n**Data Visualization**:\n- Interactive node-based graph (primary feature)\n- Zoomable/pannable canvas with touch gestures\n- Color-coded nodes by account type and importance\n- Edge thickness representing money flow volume\n- Mini-map for navigation orientation\n\n**Forms & Inputs**:\n- Multi-step wizard for company setup\n- Currency input fields with French locale formatting\n- Date pickers for fiscal calendar setup\n- Toggle switches for legal form selection\n- Pattern builders for recurring transactions\n\n**Dashboard Cards**:\n- KPI summary cards with trend indicators\n- Account balance cards with color-coded status\n- Tax obligation cards with deadline alerts\n- Profit/loss breakdown with visual charts\n\n**Simulation Controls**:\n- Timeline scrubber for year progression\n- Play/pause simulation controls\n- Speed adjustment slider\n- Reset/fork simulation options\n\n### E. Mobile-Specific Considerations\n- Touch-friendly graph interaction (pinch-to-zoom, pan)\n- Swipeable card layouts for account details\n- Collapsible sections for complex forms\n- Sticky headers during long form flows\n- Gesture-based navigation between simulation states\n\n### F. Visual Hierarchy\n- **Level 1**: Main simulation graph (70% of screen real estate)\n- **Level 2**: Key metrics dashboard (persistent bottom sheet)\n- **Level 3**: Account detail overlays (modal/drawer)\n- **Level 4**: Settings and configuration (separate screens)\n\n### G. Interaction Patterns\n- Pull-to-refresh for updating simulation data\n- Long-press on graph nodes for quick actions\n- Swipe gestures for timeline navigation\n- Haptic feedback for important state changes\n- Progressive disclosure for complex financial rules\n\n## Accessibility & Performance\n- High contrast ratios for financial data readability\n- Large touch targets (44px minimum)\n- Screen reader support for graph data\n- Optimized rendering for complex graph visualizations\n- Offline capability for simulation calculations\n\nThis design prioritizes clarity in complex financial data presentation while maintaining an intuitive mobile-first experience focused on the core graph visualization feature.","size_bytes":3445},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# SimuFiscal - French Business Simulation Platform\n\n## Overview\n\nSimuFiscal is a French business simulation platform that allows users to simulate year-long financial operations for French businesses. The application provides interactive fiscal account visualization and comprehensive tax calculations. Users can set up companies with different legal forms (SARL, SAS, EURL, SA, SASU), define revenue and expense patterns, and run simulations to visualize financial flows through an interactive node-based graph system.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Styling**: Tailwind CSS with shadcn/ui component library in \"New York\" style\n- **State Management**: TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Theme System**: Dark/light mode toggle with CSS variables and localStorage persistence\n- **Mobile-First Design**: Responsive layout with dedicated mobile navigation\n\n### Component Structure\n- **UI Components**: Complete shadcn/ui component library with custom styling\n- **Graph Visualization**: Custom HTML5 Canvas-based interactive graph for financial data visualization\n- **Multi-Step Forms**: Wizard-style company setup with validation\n- **Authentication Flow**: Landing page for unauthenticated users, dashboard for authenticated users\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful endpoints with proper error handling and logging middleware\n- **Session Management**: Express sessions with PostgreSQL storage\n- **Authentication**: Replit OpenID Connect integration with Passport.js\n\n### Data Storage\n- **Database**: PostgreSQL with Neon serverless driver\n- **ORM**: Drizzle ORM with TypeScript schema definitions\n- **Schema Design**: \n  - User management (required for Replit Auth)\n  - Company profiles with French business legal forms\n  - Revenue and expense patterns for simulation\n  - Account balances and tax calculations\n- **Migrations**: Drizzle Kit for schema management\n\n### Business Logic\n- **French Tax System**: Built-in support for French business taxation including VAT calculations\n- **Legal Forms**: Support for SARL, SAS, EURL, SA, SASU with different rules\n- **Pattern System**: Recurring revenue and expense patterns with frequency options\n- **Simulation Engine**: Year-long financial projections with monthly/quarterly breakdowns\n\n### Security & Authentication\n- **Authentication Provider**: Replit Auth with OpenID Connect\n- **Session Security**: Secure HTTP-only cookies with expiration\n- **Authorization**: User-scoped data access with ownership validation\n- **CSRF Protection**: Built-in session-based protection\n\n### Development Tools\n- **Type Safety**: Full TypeScript coverage across frontend and backend\n- **Code Quality**: Shared utilities and consistent patterns\n- **Development Experience**: Vite HMR, Replit integration, runtime error overlay\n- **Build Process**: Separate client and server builds with ESBuild\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: PostgreSQL database connectivity\n- **drizzle-orm**: Database ORM and query builder\n- **express**: Web server framework\n- **@tanstack/react-query**: Data fetching and state management\n- **wouter**: Lightweight React routing\n\n### UI & Styling\n- **@radix-ui/***: Headless UI primitives for accessibility\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **lucide-react**: Icon library\n\n### Authentication & Security\n- **openid-client**: OpenID Connect implementation\n- **passport**: Authentication middleware\n- **connect-pg-simple**: PostgreSQL session store\n- **express-session**: Session management\n\n### Development & Build\n- **vite**: Frontend build tool and development server\n- **typescript**: Type system\n- **@replit/vite-plugin-runtime-error-modal**: Replit development tools\n- **esbuild**: Server bundling\n\n### External Services\n- **Replit Authentication**: Integrated OAuth provider\n- **Neon PostgreSQL**: Serverless database hosting\n- **Google Fonts**: Typography (Inter, JetBrains Mono)\n\nThe application follows a modern full-stack TypeScript architecture with strong emphasis on French business compliance, interactive data visualization, and mobile-responsive design.","size_bytes":4488},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4220},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertCompanySchema, insertRevenuePatternSchema, insertRevenuePatternBaseSchema, insertExpensePatternSchema, insertExpensePatternBaseSchema, insertSimulationSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Company Management Routes\n  \n  // Get all companies for the current user\n  app.get('/api/companies', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const companies = await storage.getCompaniesByUser(userId);\n      res.json(companies);\n    } catch (error) {\n      console.error(\"Error fetching companies:\", error);\n      res.status(500).json({ message: \"Failed to fetch companies\" });\n    }\n  });\n\n  // Get a specific company\n  app.get('/api/companies/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const company = await storage.getCompany(id);\n      \n      if (!company) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      \n      // Check if the user owns this company\n      if (company.userId !== req.user.claims.sub) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(company);\n    } catch (error) {\n      console.error(\"Error fetching company:\", error);\n      res.status(500).json({ message: \"Failed to fetch company\" });\n    }\n  });\n\n  // Create a new company\n  app.post('/api/companies', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Validate request body\n      const companyData = insertCompanySchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const company = await storage.createCompany(companyData);\n      res.status(201).json(company);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error creating company:\", error);\n      res.status(500).json({ message: \"Failed to create company\" });\n    }\n  });\n\n  // Update a company\n  app.put('/api/companies/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Check if company exists and user owns it\n      const existingCompany = await storage.getCompany(id);\n      if (!existingCompany) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      if (existingCompany.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Validate request body\n      const updateData = insertCompanySchema.partial().parse(req.body);\n      \n      const company = await storage.updateCompany(id, updateData);\n      res.json(company);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error updating company:\", error);\n      res.status(500).json({ message: \"Failed to update company\" });\n    }\n  });\n\n  // Delete a company\n  app.delete('/api/companies/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Check if company exists and user owns it\n      const existingCompany = await storage.getCompany(id);\n      if (!existingCompany) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      if (existingCompany.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await storage.deleteCompany(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting company:\", error);\n      res.status(500).json({ message: \"Failed to delete company\" });\n    }\n  });\n\n  // Revenue Pattern Routes\n  \n  // Get revenue patterns for a company\n  app.get('/api/companies/:companyId/revenue-patterns', isAuthenticated, async (req: any, res) => {\n    try {\n      const { companyId } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Verify user owns the company\n      const company = await storage.getCompany(companyId);\n      if (!company || company.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const patterns = await storage.getRevenuePatterns(companyId);\n      res.json(patterns);\n    } catch (error) {\n      console.error(\"Error fetching revenue patterns:\", error);\n      res.status(500).json({ message: \"Failed to fetch revenue patterns\" });\n    }\n  });\n\n  // Create a revenue pattern\n  app.post('/api/companies/:companyId/revenue-patterns', isAuthenticated, async (req: any, res) => {\n    try {\n      const { companyId } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Verify user owns the company\n      const company = await storage.getCompany(companyId);\n      if (!company || company.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const patternData = insertRevenuePatternSchema.parse({\n        ...req.body,\n        companyId,\n      });\n\n      const pattern = await storage.createRevenuePattern(patternData);\n      res.status(201).json(pattern);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error creating revenue pattern:\", error);\n      res.status(500).json({ message: \"Failed to create revenue pattern\" });\n    }\n  });\n\n  // Expense Pattern Routes\n  \n  // Get expense patterns for a company\n  app.get('/api/companies/:companyId/expense-patterns', isAuthenticated, async (req: any, res) => {\n    try {\n      const { companyId } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Verify user owns the company\n      const company = await storage.getCompany(companyId);\n      if (!company || company.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const patterns = await storage.getExpensePatterns(companyId);\n      res.json(patterns);\n    } catch (error) {\n      console.error(\"Error fetching expense patterns:\", error);\n      res.status(500).json({ message: \"Failed to fetch expense patterns\" });\n    }\n  });\n\n  // Create an expense pattern\n  app.post('/api/companies/:companyId/expense-patterns', isAuthenticated, async (req: any, res) => {\n    try {\n      const { companyId } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Verify user owns the company\n      const company = await storage.getCompany(companyId);\n      if (!company || company.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const patternData = insertExpensePatternSchema.parse({\n        ...req.body,\n        companyId,\n      });\n\n      const pattern = await storage.createExpensePattern(patternData);\n      res.status(201).json(pattern);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error creating expense pattern:\", error);\n      res.status(500).json({ message: \"Failed to create expense pattern\" });\n    }\n  });\n\n  // Simulation Routes\n  \n  // Get simulations for a company\n  app.get('/api/companies/:companyId/simulations', isAuthenticated, async (req: any, res) => {\n    try {\n      const { companyId } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Verify user owns the company\n      const company = await storage.getCompany(companyId);\n      if (!company || company.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const simulations = await storage.getSimulations(companyId);\n      res.json(simulations);\n    } catch (error) {\n      console.error(\"Error fetching simulations:\", error);\n      res.status(500).json({ message: \"Failed to fetch simulations\" });\n    }\n  });\n\n  // Create and run a new simulation\n  app.post('/api/companies/:companyId/simulations', isAuthenticated, async (req: any, res) => {\n    try {\n      const { companyId } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // IMPROVEMENT 2: Explicit company loading and ownership verification\n      const company = await storage.getCompany(companyId);\n      if (!company) {\n        return res.status(404).json({ \n          message: \"Company not found\",\n          error: \"COMPANY_NOT_FOUND\",\n          companyId \n        });\n      }\n      \n      if (company.userId !== userId) {\n        return res.status(403).json({ \n          message: \"Access denied - You do not own this company\",\n          error: \"UNAUTHORIZED_COMPANY_ACCESS\",\n          companyId \n        });\n      }\n      \n      // Additional company validation\n      if (!company.name || !company.legalForm) {\n        return res.status(400).json({\n          message: \"Company is not properly configured\",\n          error: \"COMPANY_INCOMPLETE\",\n          companyId\n        });\n      }\n\n      // Parse and validate simulation data\n      const simulationData = insertSimulationSchema.parse({\n        ...req.body,\n        companyId,\n        year: req.body.year || new Date().getFullYear(),\n      });\n\n      // Create initial simulation record with 'running' status\n      const initialSimulation = await storage.createSimulation({\n        ...simulationData,\n        status: 'running',\n      });\n\n      try {\n        // Import simulation engine components\n        const { runSimulation, formatSimulationResults } = await import('./engine');\n        const { generateFinancialReport } = await import('./summarizer');\n\n        // Get patterns for the company\n        console.log(`🔍 Fetching patterns for company ID: ${companyId}`);\n        const [revenuePatterns, expensePatterns] = await Promise.all([\n          storage.getRevenuePatterns(companyId),\n          storage.getExpensePatterns(companyId),\n        ]);\n        console.log(`📋 Found ${revenuePatterns.length} revenue patterns and ${expensePatterns.length} expense patterns`);\n        if (revenuePatterns.length > 0) {\n          console.log('📋 Revenue patterns:', revenuePatterns.map(p => ({name: p.name, amount: p.amount, frequency: p.frequency})));\n        }\n        if (expensePatterns.length > 0) {\n          console.log('📋 Expense patterns:', expensePatterns.map(p => ({name: p.name, amount: p.amount, frequency: p.frequency})));\n        }\n\n        // Validate simulation inputs\n        if (!simulationData.inputs) {\n          throw new Error('Simulation inputs are required');\n        }\n\n        // IMPROVEMENT 2: Verify company is valid before passing to simulation engine\n        if (!company || !company.id || company.id !== companyId) {\n          throw new Error(`Company validation failed: company mismatch or invalid company data`);\n        }\n        \n        // Create progress callback function to update simulation progress\n        const progressCallback = async (progressData: any) => {\n          await storage.updateSimulationProgress(initialSimulation.id, {\n            currentMonth: progressData.currentMonth,\n            progress: progressData.progress,\n            status: progressData.progress >= 100 ? 'completed' : 'running',\n            partialResults: {\n              partialBalances: progressData.partialBalances,\n              taxes: progressData.taxes,\n            },\n          });\n        };\n\n        // Run the simulation engine with verified company and progress tracking\n        const startTime = Date.now();\n        const simulationResults = await runSimulation(\n          simulationData.inputs,\n          revenuePatterns,\n          expensePatterns,\n          company,\n          {},\n          initialSimulation.id,\n          progressCallback\n        );\n\n        const processingTime = Date.now() - startTime;\n        console.log(`Simulation completed in ${processingTime}ms for company ${companyId}`);\n\n        // Generate financial report\n        const financialReport = generateFinancialReport(simulationResults);\n\n        // Format results for API response\n        const formattedResults = formatSimulationResults(simulationResults);\n\n        // Save account balances to database\n        const accountBalancePromises = simulationResults.monthlyBalances.map(balance => \n          storage.saveAccountBalance({\n            simulationId: initialSimulation.id,\n            accountType: balance.account,\n            accountName: `${balance.account}_account`,\n            month: balance.month,\n            balance: String(balance.closingBalance),\n            transactions: balance.transactions,\n          })\n        );\n\n        await Promise.all(accountBalancePromises);\n\n        // Update simulation with completed results\n        const completedSimulation = await storage.updateSimulation(initialSimulation.id, {\n          status: 'completed',\n          results: formattedResults,\n          totalRevenue: String(simulationResults.overallTotals.totalRevenue.net),\n          totalExpenses: String(simulationResults.overallTotals.totalExpenses.net),\n          netProfit: String(simulationResults.overallTotals.netProfit),\n          totalTaxes: String(Math.max(simulationResults.overallTotals.netVatOwed, 0)),\n          completedAt: new Date(),\n        });\n\n        // Return comprehensive response\n        res.status(201).json({\n          simulation: completedSimulation,\n          results: formattedResults,\n          report: {\n            overview: financialReport.overview,\n            kpis: financialReport.kpis,\n            monthlyTotals: simulationResults.monthlyTotals,\n          },\n          metadata: {\n            processingTimeMs: processingTime,\n            totalOccurrences: simulationResults.metadata.totalOccurrences,\n            engineVersion: simulationResults.metadata.engineVersion,\n            patternsProcessed: {\n              revenue: revenuePatterns.length,\n              expense: expensePatterns.length,\n            },\n          },\n        });\n\n      } catch (simulationError) {\n        console.error(\"Simulation engine error:\", simulationError);\n        \n        // IMPROVEMENT 2: Enhanced error handling - Update simulation status to failed with detailed error info\n        try {\n          await storage.updateSimulation(initialSimulation.id, {\n            status: 'failed',\n            results: { \n              error: simulationError instanceof Error ? simulationError.message : 'Unknown simulation error',\n              timestamp: new Date().toISOString(),\n              companyId,\n              engineVersion: 'v1'\n            },\n          });\n        } catch (updateError) {\n          console.error(\"Failed to update simulation status to failed:\", updateError);\n        }\n\n        throw simulationError;\n      }\n\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error running simulation:\", error);\n      res.status(500).json({ \n        message: \"Failed to run simulation\", \n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // Get simulation results\n  app.get('/api/simulations/:id/results', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Get simulation and verify access\n      const simulation = await storage.getSimulation(id);\n      if (!simulation) {\n        return res.status(404).json({ message: \"Simulation not found\" });\n      }\n      \n      // Verify user owns the company\n      const company = await storage.getCompany(simulation.companyId);\n      if (!company || company.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Get account balances and tax calculations\n      const [accountBalances, taxCalculations] = await Promise.all([\n        storage.getAccountBalances(id),\n        storage.getTaxCalculations(id),\n      ]);\n\n      res.json({\n        simulation,\n        accountBalances,\n        taxCalculations,\n      });\n    } catch (error) {\n      console.error(\"Error fetching simulation results:\", error);\n      res.status(500).json({ message: \"Failed to fetch simulation results\" });\n    }\n  });\n\n  // SSE streaming endpoint for real-time simulation progress\n  app.get('/api/simulations/:id/stream', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Get simulation and verify access\n      const simulation = await storage.getSimulation(id);\n      if (!simulation) {\n        return res.status(404).json({ message: \"Simulation not found\" });\n      }\n      \n      // Verify user owns the company\n      const company = await storage.getCompany(simulation.companyId);\n      if (!company || company.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Set SSE headers\n      res.writeHead(200, {\n        'Content-Type': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Cache-Control',\n        'X-Accel-Buffering': 'no', // Disable nginx buffering\n      });\n\n      // Send initial progress state\n      const initialProgress = await storage.getSimulationProgress(id);\n      if (initialProgress) {\n        const event = {\n          type: 'progress',\n          data: initialProgress\n        };\n        res.write(`data: ${JSON.stringify(event)}\\n\\n`);\n      }\n\n      // Set up progress polling\n      let pollInterval: NodeJS.Timeout;\n      let lastProgress = initialProgress?.progress || 0;\n      let lastStatus = initialProgress?.status || 'draft';\n      \n      const sendProgressUpdate = async () => {\n        try {\n          const progress = await storage.getSimulationProgress(id);\n          if (progress) {\n            // Only send updates if there's a meaningful change\n            if (progress.progress !== lastProgress || progress.status !== lastStatus) {\n              const event = {\n                type: progress.status === 'completed' ? 'completed' : \n                      progress.status === 'failed' ? 'error' : 'progress',\n                data: progress\n              };\n              res.write(`data: ${JSON.stringify(event)}\\n\\n`);\n              \n              lastProgress = progress.progress;\n              lastStatus = progress.status;\n              \n              // Stop polling if simulation is completed or failed\n              if (progress.status === 'completed' || progress.status === 'failed') {\n                clearInterval(pollInterval);\n              }\n            }\n          }\n        } catch (error) {\n          console.error('Error sending progress update:', error);\n          const errorEvent = {\n            type: 'error',\n            data: { message: 'Failed to fetch progress update' }\n          };\n          res.write(`data: ${JSON.stringify(errorEvent)}\\n\\n`);\n        }\n      };\n\n      // Poll for progress updates every 500ms\n      pollInterval = setInterval(sendProgressUpdate, 500);\n\n      // Clean up when client disconnects\n      req.on('close', () => {\n        if (pollInterval) {\n          clearInterval(pollInterval);\n        }\n        res.end();\n      });\n\n      // Send heartbeat every 30 seconds to keep connection alive\n      const heartbeatInterval = setInterval(() => {\n        res.write(`data: {\"type\":\"heartbeat\"}\\n\\n`);\n      }, 30000);\n\n      req.on('close', () => {\n        clearInterval(heartbeatInterval);\n      });\n\n    } catch (error) {\n      console.error(\"Error setting up SSE stream:\", error);\n      res.status(500).json({ message: \"Failed to setup progress stream\" });\n    }\n  });\n\n  // Polling fallback endpoint for simulation progress\n  app.get('/api/simulations/:id/progress', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Get simulation and verify access\n      const simulation = await storage.getSimulation(id);\n      if (!simulation) {\n        return res.status(404).json({ message: \"Simulation not found\" });\n      }\n      \n      // Verify user owns the company\n      const company = await storage.getCompany(simulation.companyId);\n      if (!company || company.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Get current progress\n      const progress = await storage.getSimulationProgress(id);\n      if (!progress) {\n        return res.status(404).json({ message: \"Progress not found\" });\n      }\n\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error fetching simulation progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch simulation progress\" });\n    }\n  });\n\n  // Update a revenue pattern\n  app.put('/api/companies/:companyId/revenue-patterns/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { companyId, id } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Verify user owns the company\n      const company = await storage.getCompany(companyId);\n      if (!company || company.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const updateData = insertRevenuePatternBaseSchema.partial().parse(req.body);\n      const pattern = await storage.updateRevenuePattern(id, updateData);\n      res.json(pattern);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error updating revenue pattern:\", error);\n      res.status(500).json({ message: \"Failed to update revenue pattern\" });\n    }\n  });\n\n  // Delete a revenue pattern\n  app.delete('/api/companies/:companyId/revenue-patterns/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { companyId, id } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Verify user owns the company\n      const company = await storage.getCompany(companyId);\n      if (!company || company.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await storage.deleteRevenuePattern(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting revenue pattern:\", error);\n      res.status(500).json({ message: \"Failed to delete revenue pattern\" });\n    }\n  });\n\n  // Update an expense pattern\n  app.put('/api/companies/:companyId/expense-patterns/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { companyId, id } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Verify user owns the company\n      const company = await storage.getCompany(companyId);\n      if (!company || company.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const updateData = insertExpensePatternBaseSchema.partial().parse(req.body);\n      const pattern = await storage.updateExpensePattern(id, updateData);\n      res.json(pattern);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error updating expense pattern:\", error);\n      res.status(500).json({ message: \"Failed to update expense pattern\" });\n    }\n  });\n\n  // Delete an expense pattern\n  app.delete('/api/companies/:companyId/expense-patterns/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { companyId, id } = req.params;\n      const userId = req.user.claims.sub;\n      \n      // Verify user owns the company\n      const company = await storage.getCompany(companyId);\n      if (!company || company.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await storage.deleteExpensePattern(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting expense pattern:\", error);\n      res.status(500).json({ message: \"Failed to delete expense pattern\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}","size_bytes":25345},"server/storage.ts":{"content":"import {\n  users,\n  companies,\n  revenuePatterns,\n  expensePatterns,\n  simulations,\n  accountBalances,\n  taxCalculations,\n  type User,\n  type UpsertUser,\n  type Company,\n  type InsertCompany,\n  type RevenuePattern,\n  type InsertRevenuePattern,\n  type ExpensePattern,\n  type InsertExpensePattern,\n  type Simulation,\n  type InsertSimulation,\n  type AccountBalance,\n  type TaxCalculation,\n  type SimulationProgress,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (IMPORTANT) these user operations are mandatory for Replit Auth.\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Company operations\n  createCompany(company: InsertCompany): Promise<Company>;\n  getCompany(id: string): Promise<Company | undefined>;\n  getCompaniesByUser(userId: string): Promise<Company[]>;\n  updateCompany(id: string, company: Partial<InsertCompany>): Promise<Company>;\n  deleteCompany(id: string): Promise<void>;\n  \n  // Revenue pattern operations\n  createRevenuePattern(pattern: InsertRevenuePattern): Promise<RevenuePattern>;\n  getRevenuePatterns(companyId: string): Promise<RevenuePattern[]>;\n  updateRevenuePattern(id: string, pattern: Partial<InsertRevenuePattern>): Promise<RevenuePattern>;\n  deleteRevenuePattern(id: string): Promise<void>;\n  \n  // Expense pattern operations\n  createExpensePattern(pattern: InsertExpensePattern): Promise<ExpensePattern>;\n  getExpensePatterns(companyId: string): Promise<ExpensePattern[]>;\n  updateExpensePattern(id: string, pattern: Partial<InsertExpensePattern>): Promise<ExpensePattern>;\n  deleteExpensePattern(id: string): Promise<void>;\n  \n  // Simulation operations\n  createSimulation(simulation: InsertSimulation): Promise<Simulation>;\n  getSimulation(id: string): Promise<Simulation | undefined>;\n  getSimulations(companyId: string): Promise<Simulation[]>;\n  updateSimulation(id: string, simulation: Partial<InsertSimulation>): Promise<Simulation>;\n  deleteSimulation(id: string): Promise<void>;\n  \n  // Account balance operations\n  getAccountBalances(simulationId: string): Promise<AccountBalance[]>;\n  saveAccountBalance(balance: Omit<AccountBalance, 'id'>): Promise<AccountBalance>;\n  \n  // Tax calculation operations\n  getTaxCalculations(simulationId: string): Promise<TaxCalculation[]>;\n  saveTaxCalculation(calculation: Omit<TaxCalculation, 'id'>): Promise<TaxCalculation>;\n  \n  // Progress tracking operations for real-time simulation\n  updateSimulationProgress(id: string, progress: Partial<Pick<Simulation, 'currentMonth' | 'progress' | 'partialResults' | 'status'>>): Promise<void>;\n  getSimulationProgress(id: string): Promise<SimulationProgress | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (IMPORTANT) these user operations are mandatory for Replit Auth.\n  \n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Company operations\n  \n  async createCompany(company: InsertCompany): Promise<Company> {\n    const [newCompany] = await db\n      .insert(companies)\n      .values(company)\n      .returning();\n    return newCompany;\n  }\n\n  async getCompany(id: string): Promise<Company | undefined> {\n    const [company] = await db\n      .select()\n      .from(companies)\n      .where(eq(companies.id, id));\n    return company;\n  }\n\n  async getCompaniesByUser(userId: string): Promise<Company[]> {\n    return await db\n      .select()\n      .from(companies)\n      .where(eq(companies.userId, userId))\n      .orderBy(companies.createdAt);\n  }\n\n  async updateCompany(id: string, company: Partial<InsertCompany>): Promise<Company> {\n    const [updatedCompany] = await db\n      .update(companies)\n      .set({ ...company, updatedAt: new Date() })\n      .where(eq(companies.id, id))\n      .returning();\n    return updatedCompany;\n  }\n\n  async deleteCompany(id: string): Promise<void> {\n    await db.delete(companies).where(eq(companies.id, id));\n  }\n\n  // Revenue pattern operations\n  \n  async createRevenuePattern(pattern: InsertRevenuePattern): Promise<RevenuePattern> {\n    // Normalize decimal amounts to strings\n    const normalizedPattern: any = {\n      ...pattern,\n      amount: String(pattern.amount)\n    };\n    \n    if (pattern.vatRate !== undefined) {\n      normalizedPattern.vatRate = String(pattern.vatRate);\n    }\n    \n    const [newPattern] = await db\n      .insert(revenuePatterns)\n      .values(normalizedPattern)\n      .returning();\n    return newPattern;\n  }\n\n  async getRevenuePatterns(companyId: string): Promise<RevenuePattern[]> {\n    return await db\n      .select()\n      .from(revenuePatterns)\n      .where(eq(revenuePatterns.companyId, companyId))\n      .orderBy(revenuePatterns.createdAt);\n  }\n\n  async updateRevenuePattern(id: string, pattern: Partial<InsertRevenuePattern>): Promise<RevenuePattern> {\n    // Normalize decimal amounts to strings\n    const normalizedPattern: any = { ...pattern };\n    \n    if (pattern.amount !== undefined) {\n      normalizedPattern.amount = String(pattern.amount);\n    }\n    \n    if (pattern.vatRate !== undefined) {\n      normalizedPattern.vatRate = String(pattern.vatRate);\n    }\n    \n    const [updatedPattern] = await db\n      .update(revenuePatterns)\n      .set(normalizedPattern)\n      .where(eq(revenuePatterns.id, id))\n      .returning();\n    return updatedPattern;\n  }\n\n  async deleteRevenuePattern(id: string): Promise<void> {\n    await db.delete(revenuePatterns).where(eq(revenuePatterns.id, id));\n  }\n\n  // Expense pattern operations\n  \n  async createExpensePattern(pattern: InsertExpensePattern): Promise<ExpensePattern> {\n    // Normalize decimal amounts to strings\n    const normalizedPattern = {\n      ...pattern,\n      amount: String(pattern.amount)\n    };\n    \n    const [newPattern] = await db\n      .insert(expensePatterns)\n      .values(normalizedPattern)\n      .returning();\n    return newPattern;\n  }\n\n  async getExpensePatterns(companyId: string): Promise<ExpensePattern[]> {\n    return await db\n      .select()\n      .from(expensePatterns)\n      .where(eq(expensePatterns.companyId, companyId))\n      .orderBy(expensePatterns.createdAt);\n  }\n\n  async updateExpensePattern(id: string, pattern: Partial<InsertExpensePattern>): Promise<ExpensePattern> {\n    // Normalize decimal amounts to strings\n    const normalizedPattern: any = { ...pattern };\n    \n    if (pattern.amount !== undefined) {\n      normalizedPattern.amount = String(pattern.amount);\n    }\n    \n    const [updatedPattern] = await db\n      .update(expensePatterns)\n      .set(normalizedPattern)\n      .where(eq(expensePatterns.id, id))\n      .returning();\n    return updatedPattern;\n  }\n\n  async deleteExpensePattern(id: string): Promise<void> {\n    await db.delete(expensePatterns).where(eq(expensePatterns.id, id));\n  }\n\n  // Simulation operations\n  \n  async createSimulation(simulation: InsertSimulation): Promise<Simulation> {\n    const [newSimulation] = await db\n      .insert(simulations)\n      .values(simulation)\n      .returning();\n    return newSimulation;\n  }\n\n  async getSimulation(id: string): Promise<Simulation | undefined> {\n    const [simulation] = await db\n      .select()\n      .from(simulations)\n      .where(eq(simulations.id, id));\n    return simulation;\n  }\n\n  async getSimulations(companyId: string): Promise<Simulation[]> {\n    return await db\n      .select()\n      .from(simulations)\n      .where(eq(simulations.companyId, companyId))\n      .orderBy(simulations.createdAt);\n  }\n\n  async updateSimulation(id: string, simulation: Partial<InsertSimulation>): Promise<Simulation> {\n    const [updatedSimulation] = await db\n      .update(simulations)\n      .set(simulation)\n      .where(eq(simulations.id, id))\n      .returning();\n    return updatedSimulation;\n  }\n\n  async deleteSimulation(id: string): Promise<void> {\n    await db.delete(simulations).where(eq(simulations.id, id));\n  }\n\n  // Account balance operations\n  \n  async getAccountBalances(simulationId: string): Promise<AccountBalance[]> {\n    return await db\n      .select()\n      .from(accountBalances)\n      .where(eq(accountBalances.simulationId, simulationId))\n      .orderBy(accountBalances.month);\n  }\n\n  async saveAccountBalance(balance: Omit<AccountBalance, 'id'>): Promise<AccountBalance> {\n    const [newBalance] = await db\n      .insert(accountBalances)\n      .values(balance)\n      .returning();\n    return newBalance;\n  }\n\n  // Tax calculation operations\n  \n  async getTaxCalculations(simulationId: string): Promise<TaxCalculation[]> {\n    return await db\n      .select()\n      .from(taxCalculations)\n      .where(eq(taxCalculations.simulationId, simulationId))\n      .orderBy(taxCalculations.month);\n  }\n\n  async saveTaxCalculation(calculation: Omit<TaxCalculation, 'id'>): Promise<TaxCalculation> {\n    const [newCalculation] = await db\n      .insert(taxCalculations)\n      .values(calculation)\n      .returning();\n    return newCalculation;\n  }\n\n  // Progress tracking operations for real-time simulation\n  \n  async updateSimulationProgress(\n    id: string, \n    progress: Partial<Pick<Simulation, 'currentMonth' | 'progress' | 'partialResults' | 'status'>>\n  ): Promise<void> {\n    const updateData: any = { ...progress };\n    \n    // Normalize progress to string for decimal field\n    if (progress.progress !== undefined) {\n      updateData.progress = String(progress.progress);\n    }\n    \n    await db\n      .update(simulations)\n      .set(updateData)\n      .where(eq(simulations.id, id));\n  }\n\n  async getSimulationProgress(id: string): Promise<SimulationProgress | undefined> {\n    const [simulation] = await db\n      .select({\n        id: simulations.id,\n        status: simulations.status,\n        currentMonth: simulations.currentMonth,\n        progress: simulations.progress,\n        partialResults: simulations.partialResults,\n      })\n      .from(simulations)\n      .where(eq(simulations.id, id));\n\n    if (!simulation) {\n      return undefined;\n    }\n\n    const partialResultsData = simulation.partialResults as any;\n    \n    return {\n      simulationId: simulation.id,\n      status: simulation.status as 'draft' | 'running' | 'completed' | 'failed',\n      currentMonth: simulation.currentMonth || 1,\n      progress: parseFloat(simulation.progress || '0'),\n      partialBalances: partialResultsData?.partialBalances,\n      taxes: partialResultsData?.taxes,\n      timestamp: new Date().toISOString(),\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":10895},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, jsonb, date, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Companies table for French business simulation\nexport const companies = pgTable(\"companies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  legalForm: varchar(\"legal_form\").notNull(), // sarl, sas, eurl, sa, sasu\n  activitySector: varchar(\"activity_sector\").notNull(),\n  capital: integer(\"capital\").notNull(),\n  bankPartner: varchar(\"bank_partner\").notNull(),\n  siretNumber: varchar(\"siret_number\"),\n  vatNumber: varchar(\"vat_number\"),\n  fiscalYear: varchar(\"fiscal_year\").default(\"calendar\"), // calendar or fiscal\n  businessType: varchar(\"business_type\").notNull().default(\"traditional\"), // freelancer, traditional, retail, consultancy, ecommerce, restaurant\n  holidayRegion: varchar(\"holiday_region\").notNull().default(\"FR\"), // French holidays region\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Revenue patterns table for recurring income\nexport const revenuePatterns = pgTable(\"revenue_patterns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: varchar(\"company_id\").notNull(),\n  name: text(\"name\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  frequency: varchar(\"frequency\").notNull(), // daily, monthly, quarterly, yearly\n  startMonth: integer(\"start_month\").notNull(), // 1-12\n  vatRate: decimal(\"vat_rate\", { precision: 5, scale: 2 }).default(\"20.00\"),\n  isRecurring: integer(\"is_recurring\").default(1),\n  excludeWeekends: integer(\"exclude_weekends\").default(1),\n  excludeHolidays: integer(\"exclude_holidays\").default(1),\n  // Daily pattern specific fields\n  daysMask: integer(\"days_mask\"), // 0-127, bit 0=Sunday through bit 6=Saturday\n  dayOffOverrides: jsonb(\"day_off_overrides\"), // [{date, active, reason}]\n  startDate: date(\"start_date\"), // Start date for daily patterns\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Expense patterns table for recurring costs\nexport const expensePatterns = pgTable(\"expense_patterns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: varchar(\"company_id\").notNull(),\n  name: text(\"name\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  category: varchar(\"category\").notNull(), // comptabilite, subscription, utilities, rent, etc.\n  frequency: varchar(\"frequency\").notNull(), // daily, monthly, quarterly, yearly\n  startMonth: integer(\"start_month\").notNull(),\n  vatDeductible: integer(\"vat_deductible\").default(1),\n  isRecurring: integer(\"is_recurring\").default(1),\n  excludeWeekends: integer(\"exclude_weekends\").default(1),\n  excludeHolidays: integer(\"exclude_holidays\").default(1),\n  // Daily pattern specific fields\n  daysMask: integer(\"days_mask\"), // 0-127, bit 0=Sunday through bit 6=Saturday\n  dayOffOverrides: jsonb(\"day_off_overrides\"), // [{date, active, reason}]\n  startDate: date(\"start_date\"), // Start date for daily patterns\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Account types for simulation engine\nexport type Account = 'operating' | 'savings' | 'personal' | 'vat';\n\n// Simulation input parameters interface\nexport interface SimulationInputs {\n  year: number;\n  fiscalStartMonth: number; // 1-12, typically 1 for calendar year\n  startingBalances: {\n    operating: number;\n    savings: number;\n    personal: number;\n    vat: number;\n  };\n  businessType: string;\n  holidayRegion: string;\n}\n\n// Progress tracking interfaces for real-time simulation\nexport interface SimulationProgress {\n  simulationId: string;\n  status: 'draft' | 'running' | 'completed' | 'failed';\n  currentMonth: number; // 1-12\n  progress: number; // 0-100\n  partialBalances?: {\n    [K in Account]: number;\n  };\n  taxes?: {\n    tva: number;\n    urssaf: number;\n    netCashFlow: number;\n  };\n  timestamp: string; // ISO date string\n}\n\n// Server-Sent Events payload for streaming updates\nexport interface SimulationStreamEvent {\n  type: 'progress' | 'completed' | 'error';\n  data: SimulationProgress | { message: string };\n}\n\n// Simulations table to store simulation runs\nexport const simulations = pgTable(\"simulations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: varchar(\"company_id\").notNull(),\n  name: text(\"name\").notNull(),\n  year: integer(\"year\").notNull(),\n  status: varchar(\"status\").default(\"draft\"), // draft, running, completed, failed\n  inputs: jsonb(\"inputs\"), // Store run parameters (SimulationInputs)\n  engineVersion: varchar(\"engine_version\").default(\"v1\"), // Track simulation engine version\n  results: jsonb(\"results\"), // Store monthly cash flows and account balances\n  \n  // Progress tracking fields for real-time simulation\n  currentMonth: integer(\"current_month\").default(1), // Current month being processed (1-12)\n  progress: decimal(\"progress\", { precision: 5, scale: 2 }).default(\"0.00\"), // Progress percentage (0-100)\n  partialResults: jsonb(\"partial_results\"), // Month-by-month progress data\n  \n  totalRevenue: decimal(\"total_revenue\", { precision: 12, scale: 2 }),\n  totalExpenses: decimal(\"total_expenses\", { precision: 12, scale: 2 }),\n  netProfit: decimal(\"net_profit\", { precision: 12, scale: 2 }),\n  totalTaxes: decimal(\"total_taxes\", { precision: 12, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Account balances table for tracking different fiscal accounts\nexport const accountBalances = pgTable(\"account_balances\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  simulationId: varchar(\"simulation_id\").notNull(),\n  accountType: varchar(\"account_type\").notNull(), // operating, savings, personal, vat (Account enum values)\n  accountName: text(\"account_name\").notNull(),\n  month: integer(\"month\").notNull(), // 1-12\n  balance: decimal(\"balance\", { precision: 12, scale: 2 }).notNull(),\n  transactions: jsonb(\"transactions\"), // Store individual transactions for the month\n});\n\n// Tax calculations table for French fiscal obligations\nexport const taxCalculations = pgTable(\"tax_calculations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  simulationId: varchar(\"simulation_id\").notNull(),\n  taxType: varchar(\"tax_type\").notNull(), // tva, urssaf, is, cvae, etc.\n  month: integer(\"month\").notNull(),\n  taxableBase: decimal(\"taxable_base\", { precision: 12, scale: 2 }).notNull(),\n  rate: decimal(\"rate\", { precision: 5, scale: 2 }).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  dueDate: timestamp(\"due_date\"),\n  paid: integer(\"paid\").default(0),\n});\n\n// Business types for French companies\nconst businessTypes = ['freelancer', 'traditional', 'retail', 'consultancy', 'ecommerce', 'restaurant'] as const;\n\n// Daily Pattern Types and Precedence Rules\n/**\n * Daily Pattern Engine Precedence Rules:\n * \n * For DAILY frequency patterns, the engine processes in this order:\n * 1. Base daysMask (bit 0=Sunday through bit 6=Saturday) - defines default working days\n * 2. excludeWeekends flag - if true, removes Saturday (bit 6) and Sunday (bit 0) from daysMask\n * 3. excludeHolidays flag - if true, removes French holidays based on holidayRegion\n * 4. dayOffOverrides array - final override for specific dates\n *    - If override.active=true: force the date to be active (overrides all previous rules)\n *    - If override.active=false: force the date to be inactive (overrides all previous rules)\n * \n * For NON-DAILY frequencies (monthly, quarterly, yearly):\n * - daysMask, excludeWeekends, excludeHolidays, dayOffOverrides are IGNORED\n * - Only startMonth and other general fields are used\n * \n * Days of week bit mapping for daysMask:\n * - Bit 0: Sunday\n * - Bit 1: Monday  \n * - Bit 2: Tuesday\n * - Bit 3: Wednesday\n * - Bit 4: Thursday\n * - Bit 5: Friday\n * - Bit 6: Saturday\n * \n * Example daysMask values:\n * - 127 (0b1111111): All days\n * - 62 (0b0111110): Monday-Friday only  \n * - 96 (0b1100000): Weekend only\n */\n\nexport type DayOfWeek = 0 | 1 | 2 | 3 | 4 | 5 | 6; // Sunday=0 through Saturday=6\n\nexport interface DayOffOverride {\n  date: string; // ISO date string (YYYY-MM-DD)\n  active: boolean; // true = force active, false = force inactive\n  reason?: string; // Optional reason for the override\n}\n\nexport interface DailyPatternEngine {\n  daysMask: number; // 0-127 bit mask for days of week\n  excludeWeekends: boolean; // Remove Saturday(6) and Sunday(0) from daysMask\n  excludeHolidays: boolean; // Remove French holidays\n  dayOffOverrides: DayOffOverride[]; // Final per-date overrides\n  holidayRegion: string; // French region for holiday calculation (default: \"FR\")\n}\n\nexport interface PatternValidationContext {\n  frequency: 'daily' | 'monthly' | 'quarterly' | 'yearly';\n  isDailyPattern: boolean; // true if frequency === 'daily'\n  requiresDailyFields: boolean; // true if daily fields should be validated\n}\n\n// Utility functions for daily pattern operations\nexport const DailyPatternUtils = {\n  /**\n   * Convert daysMask to array of day numbers (0=Sunday through 6=Saturday)\n   */\n  daysMaskToArray(mask: number): DayOfWeek[] {\n    const days: DayOfWeek[] = [];\n    for (let i = 0; i < 7; i++) {\n      if (mask & (1 << i)) {\n        days.push(i as DayOfWeek);\n      }\n    }\n    return days;\n  },\n\n  /**\n   * Convert array of day numbers to daysMask\n   */\n  arrayToDaysMask(days: DayOfWeek[]): number {\n    let mask = 0;\n    days.forEach(day => {\n      mask |= (1 << day);\n    });\n    return mask;\n  },\n\n  /**\n   * Apply excludeWeekends to a daysMask\n   */\n  applyExcludeWeekends(daysMask: number, excludeWeekends: boolean): number {\n    if (!excludeWeekends) return daysMask;\n    // Remove Sunday (bit 0) and Saturday (bit 6)\n    return daysMask & ~(1 << 0) & ~(1 << 6);\n  },\n\n  /**\n   * Check if a frequency requires daily pattern fields\n   */\n  requiresDailyFields(frequency: string): boolean {\n    return frequency === 'daily';\n  },\n\n  /**\n   * Validate daily pattern configuration\n   */\n  validateDailyPattern(pattern: Partial<DailyPatternEngine>, frequency: string): string[] {\n    const errors: string[] = [];\n    const isDaily = frequency === 'daily';\n\n    if (isDaily) {\n      if (pattern.daysMask === undefined || pattern.daysMask < 0 || pattern.daysMask > 127) {\n        errors.push(\"daysMask is required for daily patterns and must be between 0-127\");\n      }\n    } else {\n      // For non-daily patterns, warn if daily fields are provided (they will be ignored)\n      if (pattern.daysMask !== undefined || \n          pattern.dayOffOverrides?.length || \n          pattern.excludeWeekends !== undefined || \n          pattern.excludeHolidays !== undefined) {\n        errors.push(`Daily pattern fields (daysMask, dayOffOverrides, excludeWeekends, excludeHolidays) are ignored for ${frequency} frequency`);\n      }\n    }\n\n    return errors;\n  }\n} as const;\n\n// Schema exports and types\nexport const insertCompanySchema = createInsertSchema(companies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  businessType: z.enum(businessTypes),\n  holidayRegion: z.string().default('FR'),\n});\n\n// French VAT rates validation\nconst frenchVATRates = [0, 5.5, 10, 20] as const;\n\n// Base schema without refinement - for use with .omit() and .partial()\nexport const insertRevenuePatternBaseSchema = createInsertSchema(revenuePatterns).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  vatRate: z.preprocess(\n    (val) => val === undefined || val === null ? \"20.00\" : String(val),\n    z.string().refine(\n      (val) => {\n        const numVal = parseFloat(val);\n        return frenchVATRates.includes(numVal as typeof frenchVATRates[number]);\n      },\n      { message: \"Le taux de TVA doit être l'un des taux français valides: 0%, 5,5%, 10%, ou 20%\" }\n    )\n  ).optional(),\n  frequency: z.enum(['daily', 'monthly', 'quarterly', 'yearly']),\n  startMonth: z.coerce.number().int().min(1).max(12),\n  amount: z.preprocess(\n    (val) => String(val),\n    z.string().refine(\n      (val) => !isNaN(parseFloat(val)) && parseFloat(val) > 0,\n      { message: \"Le montant doit être positif\" }\n    )\n  ),\n  excludeWeekends: z.coerce.number().int().min(0).max(1).optional(),\n  excludeHolidays: z.coerce.number().int().min(0).max(1).optional(),\n  // Daily pattern specific validations with enhanced logic\n  daysMask: z.coerce.number().int().min(0).max(127).optional(), // 0-127 for 7-bit mask\n  dayOffOverrides: z.array(z.object({\n    date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format\"), // ISO date string\n    active: z.boolean(),\n    reason: z.string().optional()\n  })).optional().default([]),\n  startDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Start date must be in YYYY-MM-DD format\").optional(),\n});\n\n// Full schema with refinement - for server-side validation\nexport const insertRevenuePatternSchema = insertRevenuePatternBaseSchema.refine((data) => {\n  // Validate daily pattern fields usage based on frequency\n  const validationErrors = DailyPatternUtils.validateDailyPattern({\n    daysMask: data.daysMask,\n    excludeWeekends: data.excludeWeekends === 1,\n    excludeHolidays: data.excludeHolidays === 1,\n    dayOffOverrides: data.dayOffOverrides,\n  }, data.frequency);\n  \n  if (validationErrors.length > 0) {\n    throw new z.ZodError([{\n      code: z.ZodIssueCode.custom,\n      message: validationErrors.join('; '),\n      path: ['frequency']\n    }]);\n  }\n  \n  return true;\n}, {\n  message: \"Daily pattern validation failed\"\n});\n\n// Base schema without refinement - for use with .omit() and .partial()\nexport const insertExpensePatternBaseSchema = createInsertSchema(expensePatterns).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  frequency: z.enum(['daily', 'monthly', 'quarterly', 'yearly']),\n  startMonth: z.coerce.number().int().min(1).max(12),\n  amount: z.preprocess(\n    (val) => String(val),\n    z.string().refine(\n      (val) => !isNaN(parseFloat(val)) && parseFloat(val) > 0,\n      { message: \"Le montant doit être positif\" }\n    )\n  ),\n  vatDeductible: z.coerce.number().int().min(0).max(1).optional(),\n  excludeWeekends: z.coerce.number().int().min(0).max(1).optional(),\n  excludeHolidays: z.coerce.number().int().min(0).max(1).optional(),\n  category: z.enum(['general', 'rent', 'utilities', 'subscription', 'insurance', 'marketing', 'travel', 'equipment']),\n  // Daily pattern specific validations with enhanced logic\n  daysMask: z.coerce.number().int().min(0).max(127).optional(), // 0-127 for 7-bit mask\n  dayOffOverrides: z.array(z.object({\n    date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format\"), // ISO date string\n    active: z.boolean(),\n    reason: z.string().optional()\n  })).optional().default([]),\n  startDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Start date must be in YYYY-MM-DD format\").optional(),\n});\n\n// Full schema with refinement - for server-side validation\nexport const insertExpensePatternSchema = insertExpensePatternBaseSchema.refine((data) => {\n  // Validate daily pattern fields usage based on frequency\n  const validationErrors = DailyPatternUtils.validateDailyPattern({\n    daysMask: data.daysMask,\n    excludeWeekends: data.excludeWeekends === 1,\n    excludeHolidays: data.excludeHolidays === 1,\n    dayOffOverrides: data.dayOffOverrides,\n  }, data.frequency);\n  \n  if (validationErrors.length > 0) {\n    throw new z.ZodError([{\n      code: z.ZodIssueCode.custom,\n      message: validationErrors.join('; '),\n      path: ['frequency']\n    }]);\n  }\n  \n  return true;\n}, {\n  message: \"Daily pattern validation failed\"\n});\n\nexport const insertSimulationSchema = createInsertSchema(simulations).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n}).extend({\n  inputs: z.object({\n    year: z.number().min(2020).max(2030),\n    fiscalStartMonth: z.number().min(1).max(12),\n    startingBalances: z.object({\n      operating: z.number(),\n      savings: z.number(),\n      personal: z.number(),\n      vat: z.number(),\n    }),\n    businessType: z.enum(['freelancer', 'traditional', 'retail', 'consultancy', 'ecommerce', 'restaurant']),\n    holidayRegion: z.string().default('FR'),\n  }).optional(),\n  engineVersion: z.string().default('v1'),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Company = typeof companies.$inferSelect;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type RevenuePattern = typeof revenuePatterns.$inferSelect;\nexport type InsertRevenuePattern = z.infer<typeof insertRevenuePatternSchema>;\nexport type ExpensePattern = typeof expensePatterns.$inferSelect;\nexport type InsertExpensePattern = z.infer<typeof insertExpensePatternSchema>;\nexport type Simulation = typeof simulations.$inferSelect;\nexport type InsertSimulation = z.infer<typeof insertSimulationSchema>;\nexport type AccountBalance = typeof accountBalances.$inferSelect;\nexport type TaxCalculation = typeof taxCalculations.$inferSelect;\n\n","size_bytes":17955},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/components/Landing\";\nimport Dashboard from \"@/components/Dashboard\";\nimport CompanySetup from \"@/components/CompanySetup\";\nimport Patterns from \"@/pages/Patterns\";\nimport NotFound from \"@/pages/not-found\";\nimport MobileNavigation from \"@/components/MobileNavigation\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-pulse text-muted-foreground\">Chargement...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/setup\" component={CompanySetup} />\n          <Route path=\"/patterns\" component={Patterns} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const { isAuthenticated } = useAuth();\n  \n  return (\n    <div className=\"relative\">\n      {/* Theme Toggle - Always visible */}\n      <div className=\"fixed top-4 right-4 z-50\">\n        <ThemeToggle />\n      </div>\n      \n      <Router />\n      \n      {/* Mobile Navigation - Only for authenticated users */}\n      {isAuthenticated && <MobileNavigation />}\n      \n      <Toaster />\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AppContent />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":1989},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 20% 98%;\n\n  --foreground: 210 15% 25%;\n\n  --border: 210 20% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 210 15% 25%;\n\n  --card-border: 210 20% 92%;\n\n  --sidebar: 210 20% 96%;\n\n  --sidebar-foreground: 210 15% 25%;\n\n  --sidebar-border: 210 20% 90%;\n\n  --sidebar-primary: 220 85% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 210 15% 92%;\n\n  --sidebar-accent-foreground: 210 15% 25%;\n\n  --sidebar-ring: 220 85% 60%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 210 15% 25%;\n\n  --popover-border: 210 20% 90%;\n\n  --primary: 220 85% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 210 15% 94%;\n\n  --secondary-foreground: 210 15% 25%;\n\n  --muted: 210 10% 95%;\n\n  --muted-foreground: 210 15% 45%;\n\n  --accent: 210 12% 93%;\n\n  --accent-foreground: 210 15% 25%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 210 20% 82%;\n  --ring: 220 85% 60%;\n  --chart-1: 220 85% 45%;\n  --chart-2: 142 71% 35%;\n  --chart-3: 38 92% 40%;\n  --chart-4: 0 84% 50%;\n  --chart-5: 280 65% 45%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 20% 70% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 20% 70% / 0.08);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 20% 70% / 0.10), 0px 1px 2px -1px hsl(210 20% 70% / 0.05);\n  --shadow: 0px 2px 0px 0px hsl(210 20% 70% / 0.12), 0px 1px 2px -1px hsl(210 20% 70% / 0.08);\n  --shadow-md: 0px 2px 0px 0px hsl(210 20% 70% / 0.15), 0px 2px 4px -1px hsl(210 20% 70% / 0.10);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 20% 70% / 0.18), 0px 4px 6px -1px hsl(210 20% 70% / 0.12);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 20% 70% / 0.20), 0px 8px 10px -1px hsl(210 20% 70% / 0.15);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 20% 70% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 15% 8%;\n\n  --foreground: 210 10% 90%;\n\n  --border: 210 15% 18%;\n\n  --card: 210 15% 12%;\n\n  --card-foreground: 210 10% 90%;\n\n  --card-border: 210 15% 20%;\n\n  --sidebar: 210 15% 10%;\n\n  --sidebar-foreground: 210 10% 90%;\n\n  --sidebar-border: 210 15% 16%;\n\n  --sidebar-primary: 220 85% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 210 15% 14%;\n\n  --sidebar-accent-foreground: 210 10% 90%;\n\n  --sidebar-ring: 220 85% 60%;\n\n  --popover: 210 15% 14%;\n\n  --popover-foreground: 210 10% 90%;\n\n  --popover-border: 210 15% 22%;\n\n  --primary: 220 85% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 210 15% 16%;\n\n  --secondary-foreground: 210 10% 90%;\n\n  --muted: 210 10% 18%;\n\n  --muted-foreground: 210 10% 65%;\n\n  --accent: 210 12% 20%;\n\n  --accent-foreground: 210 10% 90%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 210 15% 28%;\n  --ring: 220 85% 60%;\n  --chart-1: 220 85% 70%;\n  --chart-2: 142 71% 60%;\n  --chart-3: 38 92% 65%;\n  --chart-4: 0 84% 70%;\n  --chart-5: 280 65% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 15% 5% / 0.15);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 15% 5% / 0.20);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 15% 5% / 0.25), 0px 1px 2px -1px hsl(210 15% 5% / 0.15);\n  --shadow: 0px 2px 0px 0px hsl(210 15% 5% / 0.30), 0px 1px 2px -1px hsl(210 15% 5% / 0.20);\n  --shadow-md: 0px 2px 0px 0px hsl(210 15% 5% / 0.35), 0px 2px 4px -1px hsl(210 15% 5% / 0.25);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 15% 5% / 0.40), 0px 4px 6px -1px hsl(210 15% 5% / 0.30);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 15% 5% / 0.45), 0px 8px 10px -1px hsl(210 15% 5% / 0.35);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 15% 5% / 0.50);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9848},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/components/Landing\";\nimport Dashboard from \"@/components/Dashboard\";\nimport CompanySetup from \"@/components/CompanySetup\";\nimport NotFound from \"@/pages/not-found\";\nimport MobileNavigation from \"@/components/MobileNavigation\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-pulse text-muted-foreground\">Chargement...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/setup\" component={CompanySetup} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const { isAuthenticated } = useAuth();\n  \n  return (\n    <div className=\"relative\">\n      {/* Theme Toggle - Always visible */}\n      <div className=\"fixed top-4 right-4 z-50\">\n        <ThemeToggle />\n      </div>\n      \n      <Router />\n      \n      {/* Mobile Navigation - Only for authenticated users */}\n      {isAuthenticated && <MobileNavigation />}\n      \n      <Toaster />\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AppContent />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}","size_bytes":1889},"client/src/components/CompanySetup.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowLeft, ArrowRight, CheckCircle } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CompanyFormData {\n  name: string;\n  legalForm: string;\n  activity: string;\n  capital: number;\n  bank: string;\n  businessType: string;\n}\n\nconst LEGAL_FORMS = [\n  { value: \"sarl\", label: \"SARL - Société à Responsabilité Limitée\" },\n  { value: \"sas\", label: \"SAS - Société par Actions Simplifiée\" },\n  { value: \"eurl\", label: \"EURL - Entreprise Unipersonnelle à Responsabilité Limitée\" },\n  { value: \"sa\", label: \"SA - Société Anonyme\" },\n  { value: \"sasu\", label: \"SASU - Société par Actions Simplifiée Unipersonnelle\" }\n];\n\nconst ACTIVITY_SECTORS = [\n  { value: \"services_info\", label: \"Services informatiques\" },\n  { value: \"conseil\", label: \"Conseil et consulting\" },\n  { value: \"commerce\", label: \"Commerce de détail\" },\n  { value: \"industrie\", label: \"Industrie manufacturière\" },\n  { value: \"btp\", label: \"Bâtiment et travaux publics\" },\n  { value: \"restauration\", label: \"Restauration et hôtellerie\" },\n  { value: \"sante\", label: \"Santé et services sociaux\" },\n  { value: \"education\", label: \"Éducation et formation\" }\n];\n\nconst BANKS = [\n  { value: \"bnp\", label: \"BNP Paribas\" },\n  { value: \"credit_agricole\", label: \"Crédit Agricole\" },\n  { value: \"societe_generale\", label: \"Société Générale\" },\n  { value: \"lcl\", label: \"LCL\" },\n  { value: \"credit_mutuel\", label: \"Crédit Mutuel\" },\n  { value: \"banque_populaire\", label: \"Banque Populaire\" },\n  { value: \"caisse_epargne\", label: \"Caisse d'Épargne\" }\n];\n\nconst BUSINESS_TYPES = [\n  { value: \"freelancer\", label: \"Freelance / Indépendant\", description: \"Activité individuelle, facturation ponctuelle\" },\n  { value: \"traditional\", label: \"Entreprise traditionnelle\", description: \"Structure classique avec employés\" },\n  { value: \"retail\", label: \"Commerce de détail\", description: \"Vente directe aux consommateurs\" },\n  { value: \"consultancy\", label: \"Cabinet de conseil\", description: \"Services de conseil et expertise\" },\n  { value: \"ecommerce\", label: \"E-commerce\", description: \"Vente en ligne et commerce électronique\" },\n  { value: \"restaurant\", label: \"Restauration\", description: \"Services de restauration et hôtellerie\" }\n];\n\nexport default function CompanySetup() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [formData, setFormData] = useState<CompanyFormData>({\n    name: \"\",\n    legalForm: \"\",\n    activity: \"\",\n    capital: 10000,\n    bank: \"\",\n    businessType: \"traditional\"\n  });\n\n  const totalSteps = 5; // Added business type step\n  const progress = (currentStep / totalSteps) * 100;\n\n  const handleNext = () => {\n    console.log(`Step ${currentStep} completed`);\n    if (currentStep < totalSteps) {\n      setCurrentStep(prev => prev + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 1) {\n      setCurrentStep(prev => prev - 1);\n    }\n  };\n\n  const { toast } = useToast();\n\n  const createCompanyMutation = useMutation({\n    mutationFn: async (companyData: CompanyFormData) => {\n      return await apiRequest('POST', '/api/companies', {\n        name: companyData.name,\n        legalForm: companyData.legalForm,\n        activitySector: companyData.activity,\n        capital: companyData.capital,\n        bankPartner: companyData.bank,\n        businessType: companyData.businessType,\n        holidayRegion: \"FR\",\n      });\n    },\n    onSuccess: () => {\n      // Invalidate companies cache\n      queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n      \n      toast({\n        title: \"Entreprise créée !\",\n        description: \"Votre entreprise a été configurée avec succès.\",\n      });\n      \n      // Redirect to dashboard after short delay\n      setTimeout(() => {\n        window.location.href = '/';\n      }, 1500);\n    },\n    onError: (error) => {\n      console.error('Error creating company:', error);\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer l'entreprise. Veuillez réessayer.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleComplete = () => {\n    console.log('Company setup completed:', formData);\n    createCompanyMutation.mutate(formData);\n  };\n\n  const updateFormData = (field: keyof CompanyFormData, value: string | number) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const isStepValid = (step: number): boolean => {\n    switch (step) {\n      case 1: return formData.name.length > 0;\n      case 2: return formData.legalForm.length > 0 && formData.activity.length > 0;\n      case 3: return formData.capital > 0;\n      case 4: return formData.businessType.length > 0;\n      case 5: return formData.bank.length > 0;\n      default: return false;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Configuration de l'entreprise</h1>\n          <p className=\"text-muted-foreground\">\n            Configurez votre entreprise pour commencer la simulation fiscale\n          </p>\n          <div className=\"mt-4\">\n            <Progress value={progress} className=\"h-2\" data-testid=\"progress-setup\" />\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Étape {currentStep} sur {totalSteps}\n            </p>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              {currentStep === 5 && <CheckCircle className=\"h-5 w-5 text-chart-2\" />}\n              {currentStep === 1 && \"Informations générales\"}\n              {currentStep === 2 && \"Forme juridique et activité\"}\n              {currentStep === 3 && \"Capital social\"}\n              {currentStep === 4 && \"Type d'activité\"}\n              {currentStep === 5 && \"Choix de la banque\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Step 1: Company Name */}\n            {currentStep === 1 && (\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"company-name\">Nom de l'entreprise *</Label>\n                  <Input\n                    id=\"company-name\"\n                    value={formData.name}\n                    onChange={(e) => updateFormData('name', e.target.value)}\n                    placeholder=\"Ex: SARL TechInnovation\"\n                    data-testid=\"input-company-name\"\n                  />\n                </div>\n                <div className=\"p-4 bg-secondary/10 rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">À propos de cette étape</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Le nom de votre entreprise apparaîtra dans tous les documents et simulations. \n                    Vous pouvez le modifier plus tard si nécessaire.\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {/* Step 2: Legal Form & Activity */}\n            {currentStep === 2 && (\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"legal-form\">Forme juridique *</Label>\n                  <Select \n                    onValueChange={(value) => updateFormData('legalForm', value)}\n                    data-testid=\"select-legal-form\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Choisissez la forme juridique\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {LEGAL_FORMS.map(form => (\n                        <SelectItem key={form.value} value={form.value}>\n                          {form.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"activity\">Secteur d'activité *</Label>\n                  <Select \n                    onValueChange={(value) => updateFormData('activity', value)}\n                    data-testid=\"select-activity\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Choisissez votre secteur d'activité\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {ACTIVITY_SECTORS.map(sector => (\n                        <SelectItem key={sector.value} value={sector.value}>\n                          {sector.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {formData.legalForm && (\n                  <div className=\"p-4 bg-secondary/10 rounded-lg\">\n                    <h4 className=\"font-medium mb-2\">\n                      <Badge variant=\"secondary\">{LEGAL_FORMS.find(f => f.value === formData.legalForm)?.label}</Badge>\n                    </h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {formData.legalForm === 'sarl' && \"Idéal pour les PME, responsabilité limitée aux apports.\"}\n                      {formData.legalForm === 'sas' && \"Flexible pour les startups et projets d'envergure.\"}\n                      {formData.legalForm === 'eurl' && \"Parfait pour l'entrepreneur individuel qui veut protéger son patrimoine.\"}\n                      {formData.legalForm === 'sa' && \"Adapté aux grandes entreprises avec conseil d'administration.\"}\n                      {formData.legalForm === 'sasu' && \"Version unipersonnelle de la SAS, très souple.\"}\n                    </p>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Step 3: Capital */}\n            {currentStep === 3 && (\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"capital\">Capital social (€) *</Label>\n                  <Input\n                    id=\"capital\"\n                    type=\"number\"\n                    value={formData.capital}\n                    onChange={(e) => updateFormData('capital', parseInt(e.target.value) || 0)}\n                    min=\"1\"\n                    placeholder=\"10000\"\n                    data-testid=\"input-capital\"\n                  />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Montant minimum requis selon la forme juridique choisie\n                  </p>\n                </div>\n\n                <div className=\"grid md:grid-cols-3 gap-4\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => updateFormData('capital', 1000)}\n                    data-testid=\"button-capital-1k\"\n                  >\n                    1 000 €\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => updateFormData('capital', 10000)}\n                    data-testid=\"button-capital-10k\"\n                  >\n                    10 000 €\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => updateFormData('capital', 50000)}\n                    data-testid=\"button-capital-50k\"\n                  >\n                    50 000 €\n                  </Button>\n                </div>\n\n                <div className=\"p-4 bg-secondary/10 rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">Impact du capital sur la simulation</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Le capital initial influencera votre trésorerie de départ et les calculs \n                    de rentabilité dans la simulation.\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {/* Step 4: Business Type Selection */}\n            {currentStep === 4 && (\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"business-type\">Type d'activité *</Label>\n                  <div className=\"grid gap-3\">\n                    {BUSINESS_TYPES.map(type => (\n                      <div \n                        key={type.value}\n                        className={`p-4 border rounded-lg cursor-pointer transition-all hover-elevate ${\n                          formData.businessType === type.value \n                            ? 'border-primary bg-primary/5' \n                            : 'border-border'\n                        }`}\n                        onClick={() => updateFormData('businessType', type.value)}\n                        data-testid={`button-business-type-${type.value}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"space-y-1\">\n                            <h4 className=\"font-medium\">{type.label}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{type.description}</p>\n                          </div>\n                          {formData.businessType === type.value && (\n                            <CheckCircle className=\"w-5 h-5 text-primary\" />\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {formData.businessType && (\n                  <div className=\"p-4 bg-secondary/10 rounded-lg\">\n                    <h4 className=\"font-medium mb-2\">Avantages de ce type d'activité</h4>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {formData.businessType === 'freelancer' && (\n                        <ul className=\"space-y-1\">\n                          <li>• Simplicité administrative</li>\n                          <li>• Flexibilité de facturation</li>\n                          <li>• Schémas quotidiens pour activités ponctuelles</li>\n                        </ul>\n                      )}\n                      {formData.businessType === 'traditional' && (\n                        <ul className=\"space-y-1\">\n                          <li>• Structure éprouvée</li>\n                          <li>• Gestion d'équipe</li>\n                          <li>• Revenus réguliers et prévisibles</li>\n                        </ul>\n                      )}\n                      {formData.businessType === 'retail' && (\n                        <ul className=\"space-y-1\">\n                          <li>• Chiffre d'affaires quotidien</li>\n                          <li>• Gestion des stocks</li>\n                          <li>• Horaires d'ouverture flexibles</li>\n                        </ul>\n                      )}\n                      {formData.businessType === 'consultancy' && (\n                        <ul className=\"space-y-1\">\n                          <li>• Facturation par mission</li>\n                          <li>• Expertise valorisée</li>\n                          <li>• Relations client durables</li>\n                        </ul>\n                      )}\n                      {formData.businessType === 'ecommerce' && (\n                        <ul className=\"space-y-1\">\n                          <li>• Ventes 24h/24</li>\n                          <li>• Marché international</li>\n                          <li>• Automatisation possible</li>\n                        </ul>\n                      )}\n                      {formData.businessType === 'restaurant' && (\n                        <ul className=\"space-y-1\">\n                          <li>• Revenus quotidiens</li>\n                          <li>• Gestion des horaires d'ouverture</li>\n                          <li>• Exclusions week-ends et fériés</li>\n                        </ul>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Step 5: Bank Selection */}\n            {currentStep === 5 && (\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"bank\">Banque partenaire *</Label>\n                  <Select \n                    onValueChange={(value) => updateFormData('bank', value)}\n                    data-testid=\"select-bank\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Choisissez votre banque\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {BANKS.map(bank => (\n                        <SelectItem key={bank.value} value={bank.value}>\n                          {bank.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"p-4 bg-secondary/10 rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">Configuration terminée !</h4>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Votre entreprise sera configurée avec les paramètres suivants :\n                  </p>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Nom :</span>\n                      <span className=\"font-medium\" data-testid=\"text-summary-name\">{formData.name}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Forme :</span>\n                      <Badge variant=\"secondary\" data-testid=\"badge-summary-form\">\n                        {LEGAL_FORMS.find(f => f.value === formData.legalForm)?.label.split(' - ')[0]}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Activité :</span>\n                      <span className=\"font-medium\" data-testid=\"text-summary-activity\">\n                        {ACTIVITY_SECTORS.find(a => a.value === formData.activity)?.label}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Capital :</span>\n                      <span className=\"font-mono font-bold\" data-testid=\"text-summary-capital\">\n                        {formData.capital.toLocaleString('fr-FR')} €\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Banque :</span>\n                      <span className=\"font-medium\" data-testid=\"text-summary-bank\">\n                        {BANKS.find(b => b.value === formData.bank)?.label}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Navigation */}\n            <div className=\"flex justify-between pt-6\">\n              <Button\n                variant=\"outline\"\n                onClick={handlePrevious}\n                disabled={currentStep === 1}\n                data-testid=\"button-previous\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Précédent\n              </Button>\n\n              {currentStep < totalSteps ? (\n                <Button\n                  onClick={handleNext}\n                  disabled={!isStepValid(currentStep)}\n                  data-testid=\"button-next\"\n                >\n                  Suivant\n                  <ArrowRight className=\"h-4 w-4 ml-2\" />\n                </Button>\n              ) : (\n                <Button\n                  onClick={handleComplete}\n                  disabled={!isStepValid(currentStep)}\n                  data-testid=\"button-complete-setup\"\n                >\n                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  Terminer la configuration\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":20849},"client/src/components/Dashboard.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport {\n  Building2,\n  Euro,\n  TrendingUp,\n  TrendingDown,\n  Play,\n  Pause,\n  RotateCcw,\n  LogOut,\n  AlertTriangle,\n} from \"lucide-react\";\nimport GraphVisualization from \"@/components/GraphVisualization\";\n\n// Import types from shared schema\nimport type { Company, SimulationProgress, Account } from \"@shared/schema\";\n\ninterface AccountBalance {\n  name: string;\n  balance: number;\n  type: \"asset\" | \"expense\" | \"revenue\" | \"tax\";\n}\n\ninterface RealTimeSimulationState {\n  simulationId?: string;\n  isRunning: boolean;\n  progress: number;\n  currentMonth: number;\n  status: 'draft' | 'running' | 'completed' | 'failed';\n  partialBalances?: { [K in Account]: number };\n  taxes?: {\n    tva: number;\n    urssaf: number;\n    netCashFlow: number;\n  };\n  error?: string;\n}\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const eventSourceRef = useRef<EventSource | null>(null);\n  \n  // All hooks must be declared at the top before any conditional returns\n  const { data: companies, isLoading: companiesLoading } = useQuery<Company[]>({\n    queryKey: [\"/api/companies\"],\n  });\n\n  // Real-time simulation state management\n  const [simulation, setSimulation] = useState<RealTimeSimulationState>({\n    isRunning: false,\n    progress: 0,\n    currentMonth: 1,\n    status: 'draft',\n  });\n\n  // Get current account balances from real data or simulation progress\n  const [accounts, setAccounts] = useState<AccountBalance[]>([\n    { name: \"Compte Courant\", balance: 125400, type: \"asset\" },\n    { name: \"Chiffre d'Affaires\", balance: 240000, type: \"revenue\" },\n    { name: \"Charges Sociales\", balance: -45600, type: \"tax\" },\n    { name: \"TVA à Payer\", balance: -12800, type: \"tax\" },\n    { name: \"Frais Généraux\", balance: -28400, type: \"expense\" },\n  ]);\n\n  // Use first company as default or show company selection\n  const company = companies?.[0];\n\n  // Mutation for starting simulations\n  const startSimulationMutation = useMutation({\n    mutationFn: async (simulationData: any) => {\n      const response = await apiRequest('POST', `/api/companies/${company?.id}/simulations`, {\n        name: `Simulation ${new Date().getFullYear()}`,\n        year: new Date().getFullYear(),\n        inputs: {\n          year: new Date().getFullYear(),\n          fiscalStartMonth: 1,\n          startingBalances: {\n            operating: 125400,\n            savings: 50000,\n            personal: 25000,\n            vat: -12800,\n          },\n          businessType: company?.businessType || 'traditional',\n          holidayRegion: company?.holidayRegion || 'FR',\n        },\n        ...simulationData,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const newSimulation = data.simulation;\n      setSimulation({\n        simulationId: newSimulation.id,\n        isRunning: true,\n        progress: 0,\n        currentMonth: 1,\n        status: 'running',\n      });\n      \n      // Start real-time updates\n      setupSSEConnection(newSimulation.id);\n      \n      toast({\n        title: \"Simulation démarrée\",\n        description: \"La simulation financière est en cours...\",\n      });\n      \n      // Invalidate simulations cache\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\", company?.id, \"simulations\"] });\n    },\n    onError: (error: any) => {\n      console.error('Simulation start error:', error);\n      setSimulation(prev => ({\n        ...prev,\n        isRunning: false,\n        status: 'failed',\n        error: error.message || 'Erreur lors du démarrage de la simulation',\n      }));\n      \n      toast({\n        title: \"Erreur de simulation\",\n        description: error.message || 'Impossible de démarrer la simulation',\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Setup SSE connection for real-time updates\n  const setupSSEConnection = (simulationId: string) => {\n    // Close existing connection if any\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n    }\n\n    const eventSource = new EventSource(`/api/simulations/${simulationId}/stream`);\n    eventSourceRef.current = eventSource;\n\n    eventSource.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        \n        if (data.type === 'heartbeat') {\n          return; // Ignore heartbeat messages\n        }\n        \n        if (data.type === 'progress' && data.data) {\n          const progress: SimulationProgress = data.data;\n          \n          setSimulation(prev => ({\n            ...prev,\n            progress: progress.progress,\n            currentMonth: progress.currentMonth,\n            status: progress.status,\n            partialBalances: progress.partialBalances,\n            taxes: progress.taxes,\n          }));\n\n          // Update account balances with real-time data\n          if (progress.partialBalances) {\n            updateAccountsFromBalances(progress.partialBalances);\n          }\n        } else if (data.type === 'completed' && data.data) {\n          const progress: SimulationProgress = data.data;\n          \n          setSimulation(prev => ({\n            ...prev,\n            isRunning: false,\n            progress: 100,\n            status: 'completed',\n            partialBalances: progress.partialBalances,\n            taxes: progress.taxes,\n          }));\n          \n          if (progress.partialBalances) {\n            updateAccountsFromBalances(progress.partialBalances);\n          }\n          \n          toast({\n            title: \"Simulation terminée\",\n            description: \"La simulation financière s'est terminée avec succès!\",\n          });\n          \n          // Close the connection\n          eventSource.close();\n        } else if (data.type === 'error') {\n          setSimulation(prev => ({\n            ...prev,\n            isRunning: false,\n            status: 'failed',\n            error: data.data.message,\n          }));\n          \n          toast({\n            title: \"Erreur de simulation\",\n            description: data.data.message,\n            variant: \"destructive\",\n          });\n          \n          // Close the connection\n          eventSource.close();\n        }\n      } catch (error) {\n        console.error('SSE message parse error:', error);\n      }\n    };\n\n    eventSource.onerror = (error) => {\n      console.error('SSE connection error:', error);\n      \n      // Setup polling fallback\n      setupPollingFallback(simulationId);\n      \n      // Close the SSE connection\n      eventSource.close();\n    };\n  };\n\n  // Update accounts from simulation balances\n  const updateAccountsFromBalances = (balances: { [K in Account]: number }) => {\n    setAccounts(prev => prev.map(account => {\n      switch (account.name) {\n        case \"Compte Courant\":\n          return { ...account, balance: balances.operating || account.balance };\n        case \"TVA à Payer\":\n          return { ...account, balance: balances.vat || account.balance };\n        default:\n          return account;\n      }\n    }));\n  };\n\n  // Polling fallback for when SSE fails\n  const setupPollingFallback = (simulationId: string) => {\n    const pollInterval = setInterval(async () => {\n      try {\n        const response = await fetch(`/api/simulations/${simulationId}/progress`);\n        if (response.ok) {\n          const progress: SimulationProgress = await response.json();\n          \n          setSimulation(prev => ({\n            ...prev,\n            progress: progress.progress,\n            currentMonth: progress.currentMonth,\n            status: progress.status,\n            partialBalances: progress.partialBalances,\n            taxes: progress.taxes,\n            isRunning: progress.status === 'running',\n          }));\n\n          if (progress.partialBalances) {\n            updateAccountsFromBalances(progress.partialBalances);\n          }\n\n          // Stop polling if simulation is completed or failed\n          if (progress.status === 'completed' || progress.status === 'failed') {\n            clearInterval(pollInterval);\n            \n            if (progress.status === 'completed') {\n              toast({\n                title: \"Simulation terminée\",\n                description: \"La simulation financière s'est terminée avec succès!\",\n              });\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n      }\n    }, 2000); // Poll every 2 seconds\n\n    // Store interval for cleanup\n    return pollInterval;\n  };\n\n  // Cleanup SSE connections on unmount\n  useEffect(() => {\n    return () => {\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close();\n      }\n    };\n  }, []);\n\n  // Real simulation control handlers\n  const handleSimulationStart = () => {\n    if (simulation.isRunning) return;\n    \n    startSimulationMutation.mutate({});\n  };\n\n  const handleSimulationReset = () => {\n    // Close any existing connections\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n    }\n    \n    // Reset simulation state\n    setSimulation({\n      isRunning: false,\n      progress: 0,\n      currentMonth: 1,\n      status: 'draft',\n    });\n    \n    // Reset accounts to default\n    setAccounts([\n      { name: \"Compte Courant\", balance: 125400, type: \"asset\" },\n      { name: \"Chiffre d'Affaires\", balance: 240000, type: \"revenue\" },\n      { name: \"Charges Sociales\", balance: -45600, type: \"tax\" },\n      { name: \"TVA à Payer\", balance: -12800, type: \"tax\" },\n      { name: \"Frais Généraux\", balance: -28400, type: \"expense\" },\n    ]);\n    \n    toast({\n      title: \"Simulation réinitialisée\",\n      description: \"Vous pouvez démarrer une nouvelle simulation.\",\n    });\n  };\n\n  // Conditional renders after all hooks\n  if (companiesLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-pulse text-muted-foreground\">\n            Chargement de vos entreprises...\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!company) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center space-y-4\">\n          <h2 className=\"text-2xl font-bold\">Aucune entreprise configurée</h2>\n          <p className=\"text-muted-foreground\">\n            Commencez par créer votre première entreprise\n          </p>\n          <Button\n            onClick={() => (window.location.href = \"/setup\")}\n            data-testid=\"button-create-company\"\n          >\n            Créer une entreprise\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const getBalanceColor = (balance: number, type: string) => {\n    if (type === \"revenue\") return \"text-chart-2\";\n    if (type === \"tax\" || type === \"expense\") return \"text-chart-4\";\n    return balance >= 0 ? \"text-chart-2\" : \"text-chart-4\";\n  };\n\n  const getBalanceIcon = (balance: number) => {\n    return balance >= 0 ? (\n      <TrendingUp className=\"h-4 w-4\" />\n    ) : (\n      <TrendingDown className=\"h-4 w-4\" />\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Building2 className=\"h-8 w-8 text-primary\" />\n            <div>\n              <h1 className=\"text-2xl font-bold\">SimuFiscal</h1>\n              <p className=\"text-sm text-muted-foreground\">{company.name}</p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            onClick={handleLogout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4 mr-2\" />\n            Déconnexion\n          </Button>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-4 py-6 space-y-6\">\n        {/* Company Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Building2 className=\"h-5 w-5\" />\n              Informations entreprise\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Nom</p>\n                <p className=\"font-semibold\" data-testid=\"text-company-name\">{company.name}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Forme juridique</p>\n                <Badge variant=\"secondary\" data-testid=\"badge-legal-form\">{company.legalForm}</Badge>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Activité</p>\n                <p className=\"font-medium\" data-testid=\"text-activity\">{company.activitySector}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Capital</p>\n                <p className=\"font-mono font-bold\" data-testid=\"text-capital\">\n                  {company.capital.toLocaleString('fr-FR')} €\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Partenaire bancaire</p>\n                <p className=\"font-medium\" data-testid=\"text-bank\">{company.bankPartner}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Simulation Controls */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Euro className=\"h-5 w-5\" />\n              Simulation annuelle\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center gap-4\">\n              <Button \n                onClick={handleSimulationStart}\n                variant={simulation.isRunning ? \"secondary\" : \"default\"}\n                disabled={simulation.isRunning || startSimulationMutation.isPending}\n                data-testid=\"button-toggle-simulation\"\n              >\n                {simulation.isRunning || startSimulationMutation.isPending ? (\n                  <>\n                    <Pause className=\"h-4 w-4 mr-2\" />\n                    En cours...\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"h-4 w-4 mr-2\" />\n                    Démarrer Simulation\n                  </>\n                )}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={handleSimulationReset}\n                disabled={simulation.isRunning}\n                data-testid=\"button-reset-simulation\"\n              >\n                <RotateCcw className=\"h-4 w-4 mr-2\" />\n                Réinitialiser\n              </Button>\n            </div>\n            \n            {/* Professional Progress Visualization */}\n            <div className=\"space-y-4\">\n              {/* Status and Progress */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Badge \n                    variant={\n                      simulation.status === 'completed' ? 'default' :\n                      simulation.status === 'running' ? 'secondary' :\n                      simulation.status === 'failed' ? 'destructive' : 'outline'\n                    }\n                    data-testid=\"badge-simulation-status\"\n                  >\n                    {simulation.status === 'running' ? '🔄 En cours' :\n                     simulation.status === 'completed' ? '✅ Terminé' :\n                     simulation.status === 'failed' ? '❌ Échec' : '⏸️ Prêt'}\n                  </Badge>\n                  <span className=\"text-sm text-muted-foreground\">\n                    Mois {simulation.currentMonth}/12\n                  </span>\n                </div>\n                <span className=\"font-mono font-semibold\" data-testid=\"text-simulation-progress\">\n                  {Math.round(simulation.progress)}%\n                </span>\n              </div>\n\n              {/* Progress Bar */}\n              <div className=\"space-y-2\">\n                <Progress \n                  value={simulation.progress} \n                  className=\"h-3\" \n                  data-testid=\"progress-simulation\"\n                />\n                <div className=\"flex justify-between text-xs text-muted-foreground\">\n                  <span>Janvier</span>\n                  <span>Juin</span>\n                  <span>Décembre</span>\n                </div>\n              </div>\n\n              {/* Error Display */}\n              {simulation.error && (\n                <div className=\"flex items-start gap-2 p-3 bg-destructive/10 border border-destructive/20 rounded-lg\">\n                  <AlertTriangle className=\"h-4 w-4 text-destructive mt-0.5\" />\n                  <div className=\"text-sm\">\n                    <p className=\"font-medium text-destructive\">Erreur de simulation</p>\n                    <p className=\"text-muted-foreground\">{simulation.error}</p>\n                  </div>\n                </div>\n              )}\n\n              {/* French Business KPIs */}\n              {simulation.taxes && (simulation.isRunning || simulation.status === 'completed') && (\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n                  <Card className=\"border-l-4 border-l-blue-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground\">TVA à Payer</p>\n                          <p className=\"text-xl font-bold text-blue-600\" data-testid=\"text-tva-amount\">\n                            {simulation.taxes.tva.toLocaleString('fr-FR', { \n                              style: 'currency', \n                              currency: 'EUR' \n                            })}\n                          </p>\n                        </div>\n                        <Euro className=\"h-8 w-8 text-blue-500\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-l-4 border-l-orange-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground\">URSSAF</p>\n                          <p className=\"text-xl font-bold text-orange-600\" data-testid=\"text-urssaf-amount\">\n                            {simulation.taxes.urssaf.toLocaleString('fr-FR', { \n                              style: 'currency', \n                              currency: 'EUR' \n                            })}\n                          </p>\n                        </div>\n                        <Building2 className=\"h-8 w-8 text-orange-500\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-l-4 border-l-green-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground\">Flux de Trésorerie Net</p>\n                          <p className={`text-xl font-bold ${simulation.taxes.netCashFlow >= 0 ? 'text-green-600' : 'text-red-600'}`} data-testid=\"text-cashflow-amount\">\n                            {simulation.taxes.netCashFlow.toLocaleString('fr-FR', { \n                              style: 'currency', \n                              currency: 'EUR' \n                            })}\n                          </p>\n                        </div>\n                        {simulation.taxes.netCashFlow >= 0 ? \n                          <TrendingUp className=\"h-8 w-8 text-green-500\" /> :\n                          <TrendingDown className=\"h-8 w-8 text-red-500\" />\n                        }\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Graph Visualization */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              Visualisation des comptes\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <GraphVisualization \n              accounts={accounts} \n              simulationStatus={{\n                isRunning: simulation.isRunning,\n                currentMonth: simulation.currentMonth,\n                progress: simulation.progress,\n                status: simulation.status,\n              }}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Account Summary */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {accounts.map((account, index) => (\n            <Card key={index} className=\"hover-elevate\" data-testid={`card-account-${index}`}>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">\n                      {account.name}\n                    </p>\n                    <p className={`text-2xl font-bold font-mono ${getBalanceColor(account.balance, account.type)}`} data-testid={`text-balance-${index}`}>\n                      {account.balance.toLocaleString('fr-FR', { \n                        style: 'currency', \n                        currency: 'EUR' \n                      })}\n                    </p>\n                  </div>\n                  <div className={getBalanceColor(account.balance, account.type)}>\n                    {getBalanceIcon(account.balance)}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":22689},"client/src/components/GraphVisualization.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ZoomIn, ZoomOut, RotateCcw } from \"lucide-react\";\n\ninterface Account {\n  name: string;\n  balance: number;\n  type: 'asset' | 'expense' | 'revenue' | 'tax';\n}\n\ninterface Node {\n  id: string;\n  name: string;\n  balance: number;\n  type: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  level: number;\n  color: string;\n  borderColor: string;\n}\n\ninterface Edge {\n  from: Node;\n  to: Node;\n  amount: number;\n  color: string;\n}\n\ninterface SimulationStatus {\n  isRunning: boolean;\n  currentMonth: number;\n  progress: number;\n  status: 'draft' | 'running' | 'completed' | 'failed';\n}\n\ninterface GraphVisualizationProps {\n  accounts: Account[];\n  simulationStatus?: SimulationStatus;\n}\n\nexport default function GraphVisualization({ accounts, simulationStatus }: GraphVisualizationProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [scale, setScale] = useState(1);\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = useState(false);\n  const [lastMousePos, setLastMousePos] = useState({ x: 0, y: 0 });\n  const [selectedNode, setSelectedNode] = useState<Node | null>(null);\n  const [animationFrame, setAnimationFrame] = useState(0);\n\n  // Hierarchical layout configuration\n  const LEVEL_HEIGHT = 150;\n  const NODE_SPACING = 180;\n  const CANVAS_CENTER_X = 300;\n  const START_Y = 80;\n\n  // Create hierarchical node layout\n  const createHierarchicalNodes = (): Node[] => {\n    const nodesByType = {\n      revenue: accounts.filter(a => a.type === 'revenue'),\n      asset: accounts.filter(a => a.type === 'asset'),\n      expense: accounts.filter(a => a.type === 'expense'),\n      tax: accounts.filter(a => a.type === 'tax')\n    };\n\n    const nodes: Node[] = [];\n    let nodeId = 0;\n\n    // Level 0: Revenue sources (top)\n    const revenueNodes = nodesByType.revenue.map((account, index) => {\n      const totalRevenue = nodesByType.revenue.length;\n      const x = CANVAS_CENTER_X + (index - (totalRevenue - 1) / 2) * NODE_SPACING;\n      return createNode(nodeId++, account, x, START_Y, 0);\n    });\n\n    // Level 1: Asset accounts (center)\n    const assetNodes = nodesByType.asset.map((account, index) => {\n      const totalAssets = nodesByType.asset.length;\n      const x = CANVAS_CENTER_X + (index - (totalAssets - 1) / 2) * NODE_SPACING;\n      return createNode(nodeId++, account, x, START_Y + LEVEL_HEIGHT, 1);\n    });\n\n    // Level 2: Expenses and Taxes (bottom)\n    const expenseNodes = nodesByType.expense.map((account, index) => {\n      const totalExpenses = nodesByType.expense.length + nodesByType.tax.length;\n      const x = CANVAS_CENTER_X + (index - (totalExpenses - 1) / 2) * NODE_SPACING;\n      return createNode(nodeId++, account, x, START_Y + LEVEL_HEIGHT * 2, 2);\n    });\n\n    const taxNodes = nodesByType.tax.map((account, index) => {\n      const totalExpenses = nodesByType.expense.length + nodesByType.tax.length;\n      const x = CANVAS_CENTER_X + (index + nodesByType.expense.length - (totalExpenses - 1) / 2) * NODE_SPACING;\n      return createNode(nodeId++, account, x, START_Y + LEVEL_HEIGHT * 2, 2);\n    });\n\n    return [...revenueNodes, ...assetNodes, ...expenseNodes, ...taxNodes];\n  };\n\n  const createNode = (id: number, account: Account, x: number, y: number, level: number): Node => {\n    const importance = Math.abs(account.balance);\n    const width = Math.max(120, Math.min(200, importance / 3000 + 120));\n    const height = Math.max(60, Math.min(100, importance / 5000 + 60));\n    \n    const colors = getNodeColors(account.type, account.balance);\n    \n    return {\n      id: `node-${id}`,\n      name: account.name,\n      balance: account.balance,\n      type: account.type,\n      x,\n      y,\n      width,\n      height,\n      level,\n      color: colors.fill,\n      borderColor: colors.border\n    };\n  };\n\n  const nodes = createHierarchicalNodes();\n\n  // Create flow edges between nodes\n  const createEdges = (): Edge[] => {\n    const edges: Edge[] = [];\n    const revenueNodes = nodes.filter(n => n.type === 'revenue');\n    const assetNodes = nodes.filter(n => n.type === 'asset');\n    const expenseNodes = nodes.filter(n => n.type === 'expense' || n.type === 'tax');\n\n    // Revenue flows to assets\n    revenueNodes.forEach(revenue => {\n      assetNodes.forEach(asset => {\n        if (revenue.balance > 0) {\n          edges.push({\n            from: revenue,\n            to: asset,\n            amount: Math.abs(revenue.balance * 0.3), // Simplified flow calculation\n            color: 'hsl(142, 71%, 45%)' // Success green\n          });\n        }\n      });\n    });\n\n    // Assets flow to expenses\n    assetNodes.forEach(asset => {\n      expenseNodes.forEach(expense => {\n        if (expense.balance < 0) {\n          edges.push({\n            from: asset,\n            to: expense,\n            amount: Math.abs(expense.balance * 0.2),\n            color: expense.type === 'tax' ? 'hsl(0, 84%, 60%)' : 'hsl(38, 92%, 50%)' // Red for tax, orange for expense\n          });\n        }\n      });\n    });\n\n    return edges;\n  };\n\n  const edges = createEdges();\n\n  function getNodeColors(type: string, balance: number): { fill: string; border: string } {\n    switch (type) {\n      case 'revenue':\n        return {\n          fill: 'hsl(142, 71%, 45%)', // Success green\n          border: 'hsl(142, 71%, 35%)'\n        };\n      case 'asset':\n        return {\n          fill: balance >= 0 ? 'hsl(220, 85%, 60%)' : 'hsl(38, 92%, 50%)', // Professional blue or orange\n          border: balance >= 0 ? 'hsl(220, 85%, 45%)' : 'hsl(38, 92%, 35%)'\n        };\n      case 'expense':\n        return {\n          fill: 'hsl(38, 92%, 50%)', // Warning orange\n          border: 'hsl(38, 92%, 35%)'\n        };\n      case 'tax':\n        return {\n          fill: 'hsl(0, 84%, 60%)', // Danger red\n          border: 'hsl(0, 84%, 45%)'\n        };\n      default:\n        return {\n          fill: 'hsl(220, 85%, 60%)',\n          border: 'hsl(220, 85%, 45%)'\n        };\n    }\n  }\n\n  const drawGraph = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas (let CSS gradient background show through)\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Apply transformations\n    ctx.save();\n    ctx.translate(offset.x + canvas.width / 2, offset.y + canvas.height / 2);\n    ctx.scale(scale, scale);\n    ctx.translate(-canvas.width / 2, -canvas.height / 2);\n\n    // Draw edges with arrows first (behind nodes)\n    edges.forEach(edge => {\n      drawEdgeWithArrow(ctx, edge);\n    });\n\n    // Draw nodes with shadows and gradients\n    nodes.forEach(node => {\n      drawProfessionalNode(ctx, node);\n    });\n\n    ctx.restore();\n  };\n\n  const drawEdgeWithArrow = (ctx: CanvasRenderingContext2D, edge: Edge) => {\n    const { from, to } = edge;\n    \n    // Calculate connection points (edge of rectangles)\n    const fromBottom = { x: from.x, y: from.y + from.height / 2 };\n    const toTop = { x: to.x, y: to.y - to.height / 2 };\n    \n    // Curved path for better aesthetics\n    const midY = fromBottom.y + (toTop.y - fromBottom.y) / 2;\n    \n    // Draw the curved line\n    ctx.beginPath();\n    ctx.moveTo(fromBottom.x, fromBottom.y);\n    ctx.bezierCurveTo(\n      fromBottom.x, midY,\n      toTop.x, midY,\n      toTop.x, toTop.y\n    );\n    \n    // Style the line based on flow amount\n    ctx.strokeStyle = edge.color;\n    ctx.lineWidth = Math.max(2, Math.min(8, edge.amount / 10000));\n    ctx.stroke();\n    \n    // Draw arrowhead\n    const arrowSize = 12;\n    const angle = Math.atan2(toTop.y - midY, toTop.x - toTop.x);\n    \n    ctx.save();\n    ctx.translate(toTop.x, toTop.y);\n    ctx.rotate(angle + Math.PI / 2);\n    \n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(-arrowSize / 2, -arrowSize);\n    ctx.lineTo(arrowSize / 2, -arrowSize);\n    ctx.closePath();\n    \n    ctx.fillStyle = edge.color;\n    ctx.fill();\n    \n    ctx.restore();\n  };\n\n  const drawProfessionalNode = (ctx: CanvasRenderingContext2D, node: Node) => {\n    const x = node.x - node.width / 2;\n    const y = node.y - node.height / 2;\n    const radius = 12;\n    const isSelected = selectedNode?.id === node.id;\n    const isSimulationRunning = simulationStatus?.isRunning;\n\n    // Add pulsing animation for running simulation\n    const pulseIntensity = isSimulationRunning ? 0.1 + 0.05 * Math.sin(animationFrame * 0.1) : 0;\n\n    // Draw shadow\n    ctx.save();\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.15)';\n    ctx.shadowBlur = 10 + (isSimulationRunning ? pulseIntensity * 5 : 0);\n    ctx.shadowOffsetX = 0;\n    ctx.shadowOffsetY = 4;\n\n    // Draw main node rectangle with rounded corners\n    ctx.beginPath();\n    ctx.roundRect(x, y, node.width, node.height, radius);\n    \n    // Create gradient with animation glow for running simulation\n    const gradient = ctx.createLinearGradient(x, y, x, y + node.height);\n    const baseColor = node.color;\n    const glowColor = isSimulationRunning ? \n      `hsl(220, 85%, ${60 + pulseIntensity * 20}%)` : baseColor;\n    \n    gradient.addColorStop(0, glowColor);\n    gradient.addColorStop(1, darkenColor(baseColor, 0.1));\n    \n    ctx.fillStyle = gradient;\n    ctx.fill();\n\n    // Draw border with simulation status indication\n    ctx.strokeStyle = isSimulationRunning ? \n      `hsl(142, 71%, ${45 + pulseIntensity * 10}%)` : node.borderColor;\n    ctx.lineWidth = isSelected ? 3 : (isSimulationRunning ? 2.5 : 2);\n    ctx.stroke();\n\n    ctx.restore();\n\n    // Draw type indicator (small colored bar at top)\n    ctx.fillStyle = darkenColor(node.color, 0.2);\n    ctx.beginPath();\n    ctx.roundRect(x + 8, y + 8, node.width - 16, 4, 2);\n    ctx.fill();\n\n    // Draw node title\n    ctx.fillStyle = '#ffffff';\n    ctx.font = 'bold 13px Inter';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    \n    const titleY = y + node.height / 2 - 10;\n    const truncatedName = node.name.length > 15 ? node.name.substring(0, 15) + '...' : node.name;\n    ctx.fillText(truncatedName, node.x, titleY);\n    \n    // Draw balance with proper formatting\n    ctx.font = 'bold 11px JetBrains Mono';\n    const balanceText = `${Math.abs(node.balance).toLocaleString('fr-FR')} €`;\n    const balanceY = y + node.height / 2 + 8;\n    ctx.fillText(balanceText, node.x, balanceY);\n\n    // Draw type label\n    ctx.font = '9px Inter';\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    const typeY = y + node.height / 2 + 22;\n    const typeLabels = { revenue: 'REVENUS', asset: 'ACTIFS', expense: 'CHARGES', tax: 'TAXES' };\n    ctx.fillText(typeLabels[node.type as keyof typeof typeLabels] || node.type.toUpperCase(), node.x, typeY);\n  };\n\n  // Utility function to darken colors\n  const darkenColor = (color: string, factor: number): string => {\n    if (color.startsWith('hsl(')) {\n      const matches = color.match(/hsl\\((\\d+),\\s*(\\d+)%,\\s*(\\d+)%\\)/);\n      if (matches) {\n        const [, h, s, l] = matches;\n        const newL = Math.max(0, parseInt(l) - factor * 100);\n        return `hsl(${h}, ${s}%, ${newL}%)`;\n      }\n    }\n    return color;\n  };\n\n  // Animation loop for real-time effects\n  useEffect(() => {\n    let animationId: number;\n    \n    const animate = () => {\n      if (simulationStatus?.isRunning) {\n        setAnimationFrame(prev => prev + 1);\n        animationId = requestAnimationFrame(animate);\n      }\n    };\n    \n    if (simulationStatus?.isRunning) {\n      animate();\n    }\n    \n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n    };\n  }, [simulationStatus?.isRunning]);\n\n  useEffect(() => {\n    drawGraph();\n  }, [accounts, scale, offset, selectedNode, animationFrame, simulationStatus]);\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    // Check if clicking on a node (rectangular hit detection)\n    const clickedNode = nodes.find(node => {\n      const transformedX = (node.x - canvas.width / 2) * scale + canvas.width / 2 + offset.x;\n      const transformedY = (node.y - canvas.height / 2) * scale + canvas.height / 2 + offset.y;\n      const transformedWidth = node.width * scale;\n      const transformedHeight = node.height * scale;\n      \n      return x >= transformedX - transformedWidth / 2 &&\n             x <= transformedX + transformedWidth / 2 &&\n             y >= transformedY - transformedHeight / 2 &&\n             y <= transformedY + transformedHeight / 2;\n    });\n    \n    if (clickedNode) {\n      setSelectedNode(clickedNode);\n      console.log('Node selected:', clickedNode.name);\n    } else {\n      setSelectedNode(null);\n      setIsDragging(true);\n      setLastMousePos({ x, y });\n    }\n  };\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    if (!isDragging) return;\n    \n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    setOffset(prev => ({\n      x: prev.x + (x - lastMousePos.x),\n      y: prev.y + (y - lastMousePos.y)\n    }));\n    \n    setLastMousePos({ x, y });\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  const handleZoomIn = () => {\n    console.log('Zoom in triggered');\n    setScale(prev => Math.min(prev * 1.2, 3));\n  };\n\n  const handleZoomOut = () => {\n    console.log('Zoom out triggered');\n    setScale(prev => Math.max(prev / 1.2, 0.5));\n  };\n\n  const handleReset = () => {\n    console.log('Reset view triggered');\n    setScale(1);\n    setOffset({ x: 0, y: 0 });\n    setSelectedNode(null);\n  };\n\n  return (\n    <div className=\"relative\">\n      {/* Controls */}\n      <div className=\"absolute top-4 right-4 z-10 flex gap-2\">\n        <Button \n          size=\"sm\" \n          variant=\"secondary\" \n          onClick={handleZoomIn}\n          data-testid=\"button-zoom-in\"\n        >\n          <ZoomIn className=\"h-4 w-4\" />\n        </Button>\n        <Button \n          size=\"sm\" \n          variant=\"secondary\" \n          onClick={handleZoomOut}\n          data-testid=\"button-zoom-out\"\n        >\n          <ZoomOut className=\"h-4 w-4\" />\n        </Button>\n        <Button \n          size=\"sm\" \n          variant=\"secondary\" \n          onClick={handleReset}\n          data-testid=\"button-reset-view\"\n        >\n          <RotateCcw className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Simulation Status Indicator */}\n      {simulationStatus && (\n        <div className=\"absolute top-4 left-4 bg-card border rounded-lg p-3 shadow-lg z-10\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className={`w-2 h-2 rounded-full ${\n              simulationStatus.status === 'running' ? 'bg-green-500 animate-pulse' :\n              simulationStatus.status === 'completed' ? 'bg-blue-500' :\n              simulationStatus.status === 'failed' ? 'bg-red-500' : 'bg-gray-500'\n            }`}></div>\n            <span className=\"text-sm font-medium\">\n              {simulationStatus.status === 'running' ? 'Simulation en cours' :\n               simulationStatus.status === 'completed' ? 'Simulation terminée' :\n               simulationStatus.status === 'failed' ? 'Simulation échouée' : 'Prêt'}\n            </span>\n          </div>\n          {simulationStatus.isRunning && (\n            <p className=\"text-xs text-muted-foreground\">\n              Mois {simulationStatus.currentMonth}/12 • {simulationStatus.progress.toFixed(0)}%\n            </p>\n          )}\n        </div>\n      )}\n      \n      {/* Selected Node Info */}\n      {selectedNode && (\n        <div className=\"absolute top-20 left-4 bg-card border rounded-lg p-3 shadow-lg z-10\" data-testid=\"panel-node-info\">\n          <h4 className=\"font-semibold\">{selectedNode.name}</h4>\n          <p className=\"text-sm text-muted-foreground\">Type: {selectedNode.type}</p>\n          <p className=\"font-mono font-bold text-sm\">\n            {selectedNode.balance.toLocaleString('fr-FR')} €\n          </p>\n        </div>\n      )}\n\n      {/* Canvas */}\n      <canvas\n        ref={canvasRef}\n        width={800}\n        height={500}\n        className=\"w-full h-[500px] bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 rounded-lg shadow-lg border border-slate-200 dark:border-slate-700 cursor-move\"\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onMouseLeave={() => setIsDragging(false)}\n        data-testid=\"canvas-graph\"\n      />\n      \n      {/* Legend */}\n      <div className=\"mt-4 flex flex-wrap gap-4 text-sm\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 bg-chart-2 rounded-full\"></div>\n          <span>Revenus</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 bg-chart-4 rounded-full\"></div>\n          <span>Charges/Taxes</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 bg-chart-1 rounded-full\"></div>\n          <span>Actifs</span>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17278},"client/src/components/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Building2, TrendingUp, Calculator, BarChart3 } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Building2 className=\"h-8 w-8 text-primary\" />\n            <h1 className=\"text-2xl font-bold\">SimuFiscal</h1>\n          </div>\n          <Button \n            onClick={() => window.location.href = '/api/login'}\n            data-testid=\"button-login\"\n          >\n            Se connecter\n          </Button>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-4xl md:text-6xl font-bold mb-6\">\n            Simulez une année d'exercice\n            <br />\n            <span className=\"text-primary\">pour votre entreprise française</span>\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n            Visualisez les flux financiers, calculez les taxes et optimisez votre stratégie \n            avec notre plateforme de simulation interactive\n          </p>\n          <Button \n            size=\"lg\" \n            onClick={() => window.location.href = '/api/login'}\n            data-testid=\"button-get-started\"\n            className=\"text-lg px-8 py-3\"\n          >\n            Commencer la simulation\n          </Button>\n        </div>\n      </section>\n\n      {/* Features */}\n      <section className=\"py-20 bg-secondary/20\">\n        <div className=\"container mx-auto px-4\">\n          <h3 className=\"text-3xl font-bold text-center mb-12\">\n            Fonctionnalités principales\n          </h3>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card data-testid=\"card-feature-setup\">\n              <CardContent className=\"p-6 text-center\">\n                <Building2 className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <h4 className=\"text-xl font-semibold mb-2\">Configuration d'entreprise</h4>\n                <p className=\"text-muted-foreground\">\n                  Choisissez la forme juridique, le secteur d'activité, le capital et la banque\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-feature-simulation\">\n              <CardContent className=\"p-6 text-center\">\n                <TrendingUp className=\"h-12 w-12 text-chart-2 mx-auto mb-4\" />\n                <h4 className=\"text-xl font-semibold mb-2\">Simulation de flux</h4>\n                <p className=\"text-muted-foreground\">\n                  Modélisez les revenus et dépenses récurrents sur une année complète\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-feature-taxes\">\n              <CardContent className=\"p-6 text-center\">\n                <Calculator className=\"h-12 w-12 text-chart-3 mx-auto mb-4\" />\n                <h4 className=\"text-xl font-semibold mb-2\">Calculs fiscaux</h4>\n                <p className=\"text-muted-foreground\">\n                  TVA, URSSAF et autres taxes calculés automatiquement selon la réglementation française\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Visualization Preview */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h3 className=\"text-3xl font-bold mb-8\">\n            Visualisation interactive des comptes\n          </h3>\n          <div className=\"bg-card border rounded-lg p-8 max-w-4xl mx-auto\">\n            <div className=\"flex items-center justify-center h-64 text-muted-foreground\">\n              <BarChart3 className=\"h-24 w-24\" />\n            </div>\n            <p className=\"mt-4 text-muted-foreground\">\n              Graphique interactif montrant les flux entre comptes fiscaux avec zoom et détails\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t py-8\">\n        <div className=\"container mx-auto px-4 text-center text-muted-foreground\">\n          <p>&copy; 2024 SimuFiscal - Plateforme de simulation fiscale française</p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":4532},"client/src/components/MobileNavigation.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLocation, Link } from \"wouter\";\nimport { \n  Home, \n  Building2, \n  TrendingUp, \n  Settings, \n  Play,\n  Calendar\n} from \"lucide-react\";\n\ninterface NavigationItem {\n  id: string;\n  label: string;\n  icon: any;\n  badge?: string;\n  route: string;\n}\n\nexport default function MobileNavigation() {\n  const [location] = useLocation();\n\n  const navigationItems: NavigationItem[] = [\n    {\n      id: 'dashboard',\n      label: 'Dashboard',\n      icon: Home,\n      route: '/'\n    },\n    {\n      id: 'patterns',\n      label: 'Schémas',\n      icon: Calendar,\n      route: '/patterns'\n    },\n    {\n      id: 'company',\n      label: 'Entreprise',\n      icon: Building2,\n      route: '/setup'\n    },\n    {\n      id: 'simulation',\n      label: 'Simulation',\n      icon: TrendingUp,\n      badge: 'Actif',\n      route: '/simulation'\n    },\n    {\n      id: 'settings',\n      label: 'Paramètres',\n      icon: Settings,\n      route: '/settings'\n    }\n  ];\n\n\n  return (\n    <>\n      {/* Floating Action Button */}\n      <div className=\"fixed bottom-20 right-4 z-50\">\n        <Button\n          size=\"lg\"\n          className=\"h-14 w-14 rounded-full shadow-lg\"\n          onClick={() => console.log('Run simulation triggered')}\n          data-testid=\"button-fab-simulation\"\n        >\n          <Play className=\"h-6 w-6\" />\n        </Button>\n      </div>\n\n      {/* Bottom Navigation */}\n      <div className=\"fixed bottom-0 left-0 right-0 z-40 bg-card border-t\">\n        <div className=\"flex items-center justify-around py-2\">\n          {navigationItems.map((item) => {\n            const isActive = location === item.route;\n            return (\n              <Link \n                key={item.id}\n                href={item.route}\n                className={`\n                  flex flex-col items-center p-2 min-w-0 flex-1 relative no-underline\n                  ${isActive \n                    ? 'text-primary' \n                    : 'text-muted-foreground hover:text-foreground'\n                  }\n                `}\n                data-testid={`nav-${item.id}`}\n              >\n                <div className=\"relative\">\n                  <item.icon className=\"h-5 w-5\" />\n                  {item.badge && (\n                    <Badge \n                      className=\"absolute -top-2 -right-2 text-xs px-1 min-w-0 h-4\"\n                      variant=\"destructive\"\n                    >\n                      {item.badge}\n                    </Badge>\n                  )}\n                </div>\n                <span className=\"text-xs mt-1 truncate w-full text-center\">\n                  {item.label}\n                </span>\n                {isActive && (\n                  <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-8 h-0.5 bg-primary rounded-t\"></div>\n                )}\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Spacer for bottom navigation */}\n      <div className=\"h-16\"></div>\n    </>\n  );\n}","size_bytes":3094},"client/src/components/ThemeToggle.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\n\n  useEffect(() => {\n    // Check localStorage for saved theme\n    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;\n    if (savedTheme) {\n      setTheme(savedTheme);\n      applyTheme(savedTheme);\n    } else {\n      // Check system preference\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      setTheme(systemTheme);\n      applyTheme(systemTheme);\n    }\n  }, []);\n\n  const applyTheme = (newTheme: 'light' | 'dark') => {\n    const root = document.documentElement;\n    if (newTheme === 'dark') {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n  };\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    applyTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    console.log(`Theme switched to ${newTheme}`);\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"h-9 w-9\"\n    >\n      {theme === 'light' ? (\n        <Moon className=\"h-4 w-4\" />\n      ) : (\n        <Sun className=\"h-4 w-4\" />\n      )}\n    </Button>\n  );\n}","size_bytes":1464},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":256},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import Dashboard from \"@/components/Dashboard\";\n\nexport default function Home() {\n  return <Dashboard />;\n}","size_bytes":107},"client/src/pages/Patterns.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Plus, TrendingUp, TrendingDown, Calendar, Euro, Edit2, Trash2, CalendarDays } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { RevenuePattern, ExpensePattern, Company, InsertRevenuePattern, InsertExpensePattern } from \"@shared/schema\";\nimport { insertRevenuePatternBaseSchema, insertExpensePatternBaseSchema } from \"@shared/schema\";\n\ntype PatternFormData = {\n  name: string;\n  amount: string;\n  frequency: 'daily' | 'monthly' | 'quarterly' | 'yearly';\n  startMonth: number;\n  vatRate?: number;\n  excludeWeekends?: number;\n  excludeHolidays?: number;\n  category?: string;\n  vatDeductible?: number;\n  // Daily pattern specific fields\n  daysMask?: number;\n  dayOffOverrides?: Array<{date: string; active: boolean; reason?: string}>;\n  startDate?: string;\n};\n\nexport default function Patterns() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [patternType, setPatternType] = useState<'revenue' | 'expense'>('revenue');\n  const [editingPattern, setEditingPattern] = useState<RevenuePattern | ExpensePattern | null>(null);\n  const [activeCompanyId, setActiveCompanyId] = useState<string | null>(null);\n\n  const { toast } = useToast();\n\n  // Load companies first to get active company ID\n  const { data: companies, isLoading: companiesLoading } = useQuery<Company[]>({\n    queryKey: ['/api/companies'],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Set active company (use first company for now)\n  useEffect(() => {\n    if (companies && companies.length > 0 && !activeCompanyId) {\n      setActiveCompanyId(companies[0].id);\n    }\n  }, [companies, activeCompanyId]);\n\n  // Load patterns using company-scoped endpoints\n  const { data: revenuePatterns, isLoading: revenueLoading } = useQuery<RevenuePattern[]>({\n    queryKey: ['/api/companies', activeCompanyId, 'revenue-patterns'],\n    enabled: !!activeCompanyId,\n  });\n\n  const { data: expensePatterns, isLoading: expenseLoading } = useQuery<ExpensePattern[]>({\n    queryKey: ['/api/companies', activeCompanyId, 'expense-patterns'],\n    enabled: !!activeCompanyId,\n  });\n\n  // Convert daysMask to array of selected days (0=Sunday, 1=Monday, etc.)\n  const daysMaskToArray = (mask?: number): string[] => {\n    if (!mask) return [];\n    const days: string[] = [];\n    const dayNames = ['0', '1', '2', '3', '4', '5', '6']; // 0=Sunday through 6=Saturday\n    for (let i = 0; i < 7; i++) {\n      if (mask & (1 << i)) {\n        days.push(dayNames[i]);\n      }\n    }\n    return days;\n  };\n\n  // Convert array of selected days to daysMask\n  const arrayToDaysMask = (days: string[]): number => {\n    let mask = 0;\n    days.forEach(day => {\n      const dayIndex = parseInt(day);\n      mask |= (1 << dayIndex);\n    });\n    return mask;\n  };\n\n  // Get default form values\n  const getDefaultValues = (type: 'revenue' | 'expense', pattern?: RevenuePattern | ExpensePattern): PatternFormData => {\n    if (pattern) {\n      return {\n        name: pattern.name,\n        amount: pattern.amount,\n        frequency: pattern.frequency as 'daily' | 'monthly' | 'quarterly' | 'yearly',\n        startMonth: pattern.startMonth,\n        daysMask: pattern.daysMask || undefined,\n        dayOffOverrides: pattern.dayOffOverrides as Array<{date: string; active: boolean; reason?: string}> || [],\n        startDate: pattern.startDate || undefined,\n        ...(type === 'revenue' && 'vatRate' in pattern ? {\n          vatRate: pattern.vatRate ? parseFloat(pattern.vatRate) : 20,\n          excludeWeekends: pattern.excludeWeekends ?? 0,\n          excludeHolidays: pattern.excludeHolidays ?? 0,\n        } : {\n          category: 'category' in pattern ? pattern.category : 'general',\n          vatDeductible: 'vatDeductible' in pattern ? (pattern.vatDeductible ?? 1) : 1,\n          excludeWeekends: 'excludeWeekends' in pattern ? (pattern.excludeWeekends ?? 1) : 1,\n          excludeHolidays: 'excludeHolidays' in pattern ? (pattern.excludeHolidays ?? 1) : 1,\n        }),\n      };\n    }\n\n    return {\n      name: '',\n      amount: '',\n      frequency: 'monthly',\n      startMonth: new Date().getMonth() + 1,\n      daysMask: 0,\n      dayOffOverrides: [],\n      startDate: format(new Date(), 'yyyy-MM-dd'),\n      ...(type === 'revenue' ? {\n        vatRate: 20,\n        excludeWeekends: 1,\n        excludeHolidays: 1,\n      } : {\n        category: 'general',\n        vatDeductible: 1,\n        excludeWeekends: 1,\n        excludeHolidays: 1,\n      }),\n    };\n  };\n\n  // Form for create dialog\n  const createForm = useForm<PatternFormData>({\n    resolver: zodResolver(\n      patternType === 'revenue' \n        ? insertRevenuePatternBaseSchema.omit({ companyId: true })\n        : insertExpensePatternBaseSchema.omit({ companyId: true })\n    ),\n    defaultValues: getDefaultValues(patternType),\n  });\n\n  // Form for edit dialog\n  const editForm = useForm<PatternFormData>({\n    resolver: zodResolver(\n      patternType === 'revenue' \n        ? insertRevenuePatternBaseSchema.omit({ companyId: true })\n        : insertExpensePatternBaseSchema.omit({ companyId: true })\n    ),\n    defaultValues: getDefaultValues(patternType),\n  });\n\n  // Reset forms when pattern type changes\n  useEffect(() => {\n    createForm.reset(getDefaultValues(patternType));\n  }, [patternType, createForm]);\n\n  // Create pattern mutation\n  const createPatternMutation = useMutation({\n    mutationFn: async ({ type, data }: { type: 'revenue' | 'expense', data: PatternFormData }) => {\n      if (!activeCompanyId) throw new Error('No active company');\n      \n      const endpoint = `/api/companies/${activeCompanyId}/${type}-patterns`;\n      const payload = {\n        ...data,\n        amount: data.amount,\n        startMonth: data.startMonth,\n        ...(type === 'revenue' ? {\n          vatRate: data.vatRate || 20,\n          excludeWeekends: data.excludeWeekends || 0,\n          excludeHolidays: data.excludeHolidays || 0,\n        } : {\n          category: data.category || 'general',\n          vatDeductible: data.vatDeductible || 1,\n          excludeWeekends: data.excludeWeekends || 1,\n          excludeHolidays: data.excludeHolidays || 1,\n        }),\n      };\n      \n      return await apiRequest('POST', endpoint, payload);\n    },\n    onSuccess: (_, variables) => {\n      // Invalidate relevant cache using company-scoped keys\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/companies', activeCompanyId, `${variables.type}-patterns`] \n      });\n      \n      toast({\n        title: \"Schéma créé !\",\n        description: `Le schéma de ${variables.type === 'revenue' ? 'recette' : 'dépense'} a été créé avec succès.`,\n      });\n      \n      setIsCreateDialogOpen(false);\n      createForm.reset(getDefaultValues(patternType));\n    },\n    onError: (error) => {\n      console.error('Error creating pattern:', error);\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer le schéma. Veuillez réessayer.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update pattern mutation\n  const updatePatternMutation = useMutation({\n    mutationFn: async ({ type, id, data }: { type: 'revenue' | 'expense', id: string, data: PatternFormData }) => {\n      if (!activeCompanyId) throw new Error('No active company');\n      \n      const endpoint = `/api/companies/${activeCompanyId}/${type}-patterns/${id}`;\n      const payload = {\n        ...data,\n        amount: data.amount,\n        startMonth: data.startMonth,\n        ...(type === 'revenue' ? {\n          vatRate: data.vatRate || 20,\n          excludeWeekends: data.excludeWeekends || 0,\n          excludeHolidays: data.excludeHolidays || 0,\n        } : {\n          category: data.category || 'general',\n          vatDeductible: data.vatDeductible || 1,\n          excludeWeekends: data.excludeWeekends || 1,\n          excludeHolidays: data.excludeHolidays || 1,\n        }),\n      };\n      \n      return await apiRequest('PUT', endpoint, payload);\n    },\n    onSuccess: (_, variables) => {\n      // Invalidate relevant cache\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/companies', activeCompanyId, `${variables.type}-patterns`] \n      });\n      \n      toast({\n        title: \"Schéma modifié !\",\n        description: `Le schéma de ${variables.type === 'revenue' ? 'recette' : 'dépense'} a été modifié avec succès.`,\n      });\n      \n      setIsEditDialogOpen(false);\n      setEditingPattern(null);\n      editForm.reset();\n    },\n    onError: (error) => {\n      console.error('Error updating pattern:', error);\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier le schéma. Veuillez réessayer.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete pattern mutation\n  const deletePatternMutation = useMutation({\n    mutationFn: async ({ type, id }: { type: 'revenue' | 'expense', id: string }) => {\n      if (!activeCompanyId) throw new Error('No active company');\n      \n      const endpoint = `/api/companies/${activeCompanyId}/${type}-patterns/${id}`;\n      return await apiRequest('DELETE', endpoint);\n    },\n    onSuccess: (_, variables) => {\n      // Invalidate relevant cache\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/companies', activeCompanyId, `${variables.type}-patterns`] \n      });\n      \n      toast({\n        title: \"Schéma supprimé !\",\n        description: `Le schéma de ${variables.type === 'revenue' ? 'recette' : 'dépense'} a été supprimé avec succès.`,\n      });\n    },\n    onError: (error) => {\n      console.error('Error deleting pattern:', error);\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer le schéma. Veuillez réessayer.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreate = (data: PatternFormData) => {\n    createPatternMutation.mutate({ type: patternType, data });\n  };\n\n  const handleEdit = (pattern: RevenuePattern | ExpensePattern, type: 'revenue' | 'expense') => {\n    setEditingPattern(pattern);\n    setPatternType(type);\n    editForm.reset(getDefaultValues(type, pattern));\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdate = (data: PatternFormData) => {\n    if (!editingPattern) return;\n    updatePatternMutation.mutate({ \n      type: patternType, \n      id: editingPattern.id, \n      data \n    });\n  };\n\n  const handleDelete = (pattern: RevenuePattern | ExpensePattern, type: 'revenue' | 'expense') => {\n    if (confirm(`Êtes-vous sûr de vouloir supprimer le schéma \"${pattern.name}\" ?`)) {\n      deletePatternMutation.mutate({ type, id: pattern.id });\n    }\n  };\n\n  const formatAmount = (amount: number | string) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return numAmount.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' });\n  };\n\n  const getFrequencyText = (frequency: string) => {\n    const mapping = {\n      daily: 'Quotidien',\n      monthly: 'Mensuel',\n      quarterly: 'Trimestriel',\n      yearly: 'Annuel',\n    };\n    return mapping[frequency as keyof typeof mapping] || frequency;\n  };\n\n  // Day presets for daily patterns\n  const dayPresets = {\n    weekdays: ['1', '2', '3', '4', '5'], // Monday-Friday\n    weekend: ['0', '6'], // Saturday-Sunday\n    all: ['0', '1', '2', '3', '4', '5', '6'], // All days\n  };\n\n  const dayNames = {\n    '0': 'Dim',\n    '1': 'Lun',\n    '2': 'Mar',\n    '3': 'Mer',\n    '4': 'Jeu',\n    '5': 'Ven',\n    '6': 'Sam'\n  };\n\n  const getPatternIcon = (type: 'revenue' | 'expense') => {\n    return type === 'revenue' ? TrendingUp : TrendingDown;\n  };\n\n  const PatternCard = ({ pattern, type }: { pattern: RevenuePattern | ExpensePattern, type: 'revenue' | 'expense' }) => {\n    const Icon = getPatternIcon(type);\n    const currentMonth = new Date().getMonth() + 1;\n    const isActive = pattern.startMonth <= currentMonth;\n\n    return (\n      <Card className=\"hover-elevate\" data-testid={`card-pattern-${pattern.id}`}>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n            <Icon className={`w-4 h-4 ${type === 'revenue' ? 'text-green-600' : 'text-red-600'}`} />\n            {pattern.name}\n          </CardTitle>\n          <div className=\"flex items-center gap-1\">\n            <Button \n              size=\"icon\" \n              variant=\"ghost\" \n              onClick={() => handleEdit(pattern, type)}\n              data-testid={`button-edit-${pattern.id}`}\n            >\n              <Edit2 className=\"w-3 h-3\" />\n            </Button>\n            <Button \n              size=\"icon\" \n              variant=\"ghost\" \n              onClick={() => handleDelete(pattern, type)}\n              data-testid={`button-delete-${pattern.id}`}\n            >\n              <Trash2 className=\"w-3 h-3\" />\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"font-mono text-lg font-bold\" data-testid={`text-amount-${pattern.id}`}>\n              {formatAmount(pattern.amount)}\n            </span>\n            <Badge variant={isActive ? \"default\" : \"secondary\"} data-testid={`badge-status-${pattern.id}`}>\n              {isActive ? \"Actif\" : \"Inactif\"}\n            </Badge>\n          </div>\n          <div className=\"text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-1\">\n              <Calendar className=\"w-3 h-3\" />\n              {getFrequencyText(pattern.frequency)} (Mois {pattern.startMonth})\n            </div>\n            {type === 'revenue' && 'vatRate' in pattern && pattern.vatRate && (\n              <div className=\"flex items-center gap-1 mt-1\">\n                <Euro className=\"w-3 h-3\" />\n                TVA {pattern.vatRate}%\n              </div>\n            )}\n            {type === 'expense' && 'category' in pattern && (\n              <div className=\"flex items-center gap-1 mt-1\">\n                <Euro className=\"w-3 h-3\" />\n                {pattern.category}\n              </div>\n            )}\n          </div>\n          <div className=\"flex gap-1\">\n            {'excludeWeekends' in pattern && pattern.excludeWeekends && (\n              <Badge variant=\"outline\" className=\"text-xs\">Sans WE</Badge>\n            )}\n            {'excludeHolidays' in pattern && pattern.excludeHolidays && (\n              <Badge variant=\"outline\" className=\"text-xs\">Sans fériés</Badge>\n            )}\n            {type === 'expense' && 'vatDeductible' in pattern && pattern.vatDeductible && (\n              <Badge variant=\"outline\" className=\"text-xs\">TVA déductible</Badge>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const PatternForm = ({ form, onSubmit, isSubmitting }: { \n    form: any, \n    onSubmit: (data: PatternFormData) => void,\n    isSubmitting: boolean\n  }) => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <Tabs \n          defaultValue=\"revenue\" \n          value={patternType}\n          onValueChange={(value) => setPatternType(value as 'revenue' | 'expense')}\n        >\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"revenue\" data-testid=\"tab-revenue\">Recette</TabsTrigger>\n            <TabsTrigger value=\"expense\" data-testid=\"tab-expense\">Dépense</TabsTrigger>\n          </TabsList>\n        </Tabs>\n\n        <div className=\"space-y-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Nom du schéma</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"ex: Chiffre d'affaires mensuel\"\n                    data-testid=\"input-pattern-name\"\n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"amount\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Montant (€)</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"number\"\n                      min=\"0\"\n                      step=\"0.01\"\n                      data-testid=\"input-pattern-amount\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {patternType === 'revenue' && (\n              <FormField\n                control={form.control}\n                name=\"vatRate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>TVA (%)</FormLabel>\n                    <Select \n                      value={field.value?.toString()} \n                      onValueChange={(value) => field.onChange(parseFloat(value))}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-vat-rate\">\n                          <SelectValue placeholder=\"Taux TVA\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"0\">0% (exonéré)</SelectItem>\n                        <SelectItem value=\"5.5\">5,5% (réduit)</SelectItem>\n                        <SelectItem value=\"10\">10% (intermédiaire)</SelectItem>\n                        <SelectItem value=\"20\">20% (normal)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"frequency\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Fréquence</FormLabel>\n                  <Select value={field.value} onValueChange={field.onChange}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-frequency\">\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"daily\">Quotidien</SelectItem>\n                      <SelectItem value=\"monthly\">Mensuel</SelectItem>\n                      <SelectItem value=\"quarterly\">Trimestriel</SelectItem>\n                      <SelectItem value=\"yearly\">Annuel</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"startMonth\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Mois de début</FormLabel>\n                  <Select \n                    value={field.value?.toString()} \n                    onValueChange={(value) => field.onChange(parseInt(value))}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-start-month\">\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"1\">Janvier</SelectItem>\n                      <SelectItem value=\"2\">Février</SelectItem>\n                      <SelectItem value=\"3\">Mars</SelectItem>\n                      <SelectItem value=\"4\">Avril</SelectItem>\n                      <SelectItem value=\"5\">Mai</SelectItem>\n                      <SelectItem value=\"6\">Juin</SelectItem>\n                      <SelectItem value=\"7\">Juillet</SelectItem>\n                      <SelectItem value=\"8\">Août</SelectItem>\n                      <SelectItem value=\"9\">Septembre</SelectItem>\n                      <SelectItem value=\"10\">Octobre</SelectItem>\n                      <SelectItem value=\"11\">Novembre</SelectItem>\n                      <SelectItem value=\"12\">Décembre</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          {/* Daily Pattern Specific Fields */}\n          {form.watch('frequency') === 'daily' && (\n            <div className=\"space-y-4 p-4 border rounded-lg bg-muted/50\">\n              <div className=\"space-y-3\">\n                <FormLabel>Paramètres quotidiens</FormLabel>\n                \n                {/* Start Date for Daily Patterns */}\n                <FormField\n                  control={form.control}\n                  name=\"startDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Date de début</FormLabel>\n                      <Popover>\n                        <PopoverTrigger asChild>\n                          <FormControl>\n                            <Button\n                              variant=\"outline\"\n                              className={cn(\n                                \"w-full pl-3 text-left font-normal\",\n                                !field.value && \"text-muted-foreground\"\n                              )}\n                              data-testid=\"button-start-date\"\n                            >\n                              {field.value ? (\n                                format(new Date(field.value), \"dd/MM/yyyy\")\n                              ) : (\n                                <span>Sélectionner une date</span>\n                              )}\n                              <CalendarDays className=\"ml-auto h-4 w-4 opacity-50\" />\n                            </Button>\n                          </FormControl>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                          <CalendarComponent\n                            mode=\"single\"\n                            selected={field.value ? new Date(field.value) : undefined}\n                            onSelect={(date) => field.onChange(date ? format(date, 'yyyy-MM-dd') : '')}\n                            disabled={(date) =>\n                              date < new Date(new Date().setHours(0, 0, 0, 0))\n                            }\n                            initialFocus\n                          />\n                        </PopoverContent>\n                      </Popover>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Days of Week Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"daysMask\"\n                  render={({ field }) => {\n                    const selectedDays = daysMaskToArray(field.value);\n                    const handleDaysChange = (newDays: string[]) => {\n                      const newMask = arrayToDaysMask(newDays);\n                      field.onChange(newMask);\n                    };\n\n                    return (\n                      <FormItem>\n                        <FormLabel>Jours de la semaine</FormLabel>\n                        <div className=\"space-y-3\">\n                          {/* Day Presets */}\n                          <div className=\"flex gap-2\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDaysChange(dayPresets.weekdays)}\n                              data-testid=\"button-preset-weekdays\"\n                            >\n                              Lun-Ven\n                            </Button>\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDaysChange(dayPresets.weekend)}\n                              data-testid=\"button-preset-weekend\"\n                            >\n                              Week-end\n                            </Button>\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDaysChange(dayPresets.all)}\n                              data-testid=\"button-preset-all\"\n                            >\n                              Tous\n                            </Button>\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDaysChange([])}\n                              data-testid=\"button-preset-none\"\n                            >\n                              Aucun\n                            </Button>\n                          </div>\n\n                          {/* Individual Day Selection */}\n                          <FormControl>\n                            <ToggleGroup \n                              type=\"multiple\" \n                              value={selectedDays}\n                              onValueChange={handleDaysChange}\n                              className=\"justify-start\"\n                              data-testid=\"toggle-group-days\"\n                            >\n                              {Object.entries(dayNames).map(([value, label]) => (\n                                <ToggleGroupItem \n                                  key={value} \n                                  value={value}\n                                  data-testid={`toggle-day-${value}`}\n                                  className=\"data-[state=on]:bg-primary data-[state=on]:text-primary-foreground\"\n                                >\n                                  {label}\n                                </ToggleGroupItem>\n                              ))}\n                            </ToggleGroup>\n                          </FormControl>\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    );\n                  }}\n                />\n              </div>\n            </div>\n          )}\n\n          {patternType === 'expense' && (\n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Catégorie de dépense</FormLabel>\n                  <Select value={field.value} onValueChange={field.onChange}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-category\">\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"general\">Frais généraux</SelectItem>\n                      <SelectItem value=\"rent\">Loyer</SelectItem>\n                      <SelectItem value=\"utilities\">Charges/Utilities</SelectItem>\n                      <SelectItem value=\"subscription\">Abonnements</SelectItem>\n                      <SelectItem value=\"insurance\">Assurances</SelectItem>\n                      <SelectItem value=\"marketing\">Marketing</SelectItem>\n                      <SelectItem value=\"travel\">Déplacements</SelectItem>\n                      <SelectItem value=\"equipment\">Matériel/Équipement</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          )}\n\n          <div className=\"space-y-3\">\n            <FormLabel>Options fiscal et calendrier</FormLabel>\n            <div className=\"space-y-2\">\n              <FormField\n                control={form.control}\n                name=\"excludeWeekends\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center space-x-2 space-y-0\">\n                    <FormControl>\n                      <Checkbox \n                        checked={!!field.value}\n                        onCheckedChange={(checked) => field.onChange(checked ? 1 : 0)}\n                        data-testid=\"checkbox-exclude-weekends\"\n                      />\n                    </FormControl>\n                    <FormLabel className=\"text-sm font-normal\">\n                      Exclure les week-ends\n                    </FormLabel>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"excludeHolidays\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center space-x-2 space-y-0\">\n                    <FormControl>\n                      <Checkbox \n                        checked={!!field.value}\n                        onCheckedChange={(checked) => field.onChange(checked ? 1 : 0)}\n                        data-testid=\"checkbox-exclude-holidays\"\n                      />\n                    </FormControl>\n                    <FormLabel className=\"text-sm font-normal\">\n                      Exclure les jours fériés français\n                    </FormLabel>\n                  </FormItem>\n                )}\n              />\n\n              {patternType === 'expense' && (\n                <FormField\n                  control={form.control}\n                  name=\"vatDeductible\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center space-x-2 space-y-0\">\n                      <FormControl>\n                        <Checkbox \n                          checked={!!field.value}\n                          onCheckedChange={(checked) => field.onChange(checked ? 1 : 0)}\n                          data-testid=\"checkbox-vat-deductible\"\n                        />\n                      </FormControl>\n                      <FormLabel className=\"text-sm font-normal\">\n                        TVA déductible\n                      </FormLabel>\n                    </FormItem>\n                  )}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex gap-2 pt-4\">\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            onClick={() => {\n              setIsCreateDialogOpen(false);\n              setIsEditDialogOpen(false);\n            }}\n            data-testid=\"button-cancel\"\n          >\n            Annuler\n          </Button>\n          <Button \n            type=\"submit\" \n            disabled={isSubmitting}\n            data-testid=\"button-submit-pattern\"\n          >\n            {isSubmitting ? (editingPattern ? \"Modification...\" : \"Création...\") : (editingPattern ? \"Modifier\" : \"Créer\")}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n\n  if (companiesLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-lg font-medium mb-2\">Chargement...</div>\n          <div className=\"text-muted-foreground\">Initialisation de l'application</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!companies || companies.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"text-center py-8\">\n            <h3 className=\"text-lg font-medium mb-2\">Aucune entreprise</h3>\n            <p className=\"text-muted-foreground\">\n              Vous devez d'abord créer une entreprise pour gérer vos schémas financiers.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container max-w-6xl mx-auto py-8 px-4\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Schémas Financiers</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Définissez vos recettes et dépenses récurrentes avec le calendrier français\n            </p>\n            {companies && companies.length > 0 && (\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Entreprise: {companies.find(c => c.id === activeCompanyId)?.name}\n              </p>\n            )}\n          </div>\n          \n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-pattern\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Nouveau schéma\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[500px]\">\n              <DialogHeader>\n                <DialogTitle>Créer un schéma financier</DialogTitle>\n              </DialogHeader>\n              <PatternForm \n                form={createForm} \n                onSubmit={handleCreate}\n                isSubmitting={createPatternMutation.isPending}\n              />\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n            <DialogContent className=\"sm:max-w-[500px]\">\n              <DialogHeader>\n                <DialogTitle>Modifier le schéma financier</DialogTitle>\n              </DialogHeader>\n              <PatternForm \n                form={editForm} \n                onSubmit={handleUpdate}\n                isSubmitting={updatePatternMutation.isPending}\n              />\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <Tabs defaultValue=\"revenue\" className=\"w-full\">\n          <TabsList>\n            <TabsTrigger value=\"revenue\" data-testid=\"tab-revenue-list\">\n              Recettes ({revenuePatterns ? revenuePatterns.length : 0})\n            </TabsTrigger>\n            <TabsTrigger value=\"expense\" data-testid=\"tab-expense-list\">\n              Dépenses ({expensePatterns ? expensePatterns.length : 0})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"revenue\" className=\"mt-6\">\n            {revenueLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Chargement des schémas de recettes...\n              </div>\n            ) : revenuePatterns && revenuePatterns.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {revenuePatterns.map((pattern: RevenuePattern) => (\n                  <PatternCard key={pattern.id} pattern={pattern} type=\"revenue\" />\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <TrendingUp className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">Aucun schéma de recette</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Commencez par définir vos sources de revenus récurrentes\n                  </p>\n                  <Button onClick={() => {\n                    setPatternType('revenue');\n                    setIsCreateDialogOpen(true);\n                  }} data-testid=\"button-create-revenue\">\n                    Créer un schéma de recette\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"expense\" className=\"mt-6\">\n            {expenseLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Chargement des schémas de dépenses...\n              </div>\n            ) : expensePatterns && expensePatterns.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {expensePatterns.map((pattern: ExpensePattern) => (\n                  <PatternCard key={pattern.id} pattern={pattern} type=\"expense\" />\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <TrendingDown className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">Aucun schéma de dépense</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Définissez vos charges et frais récurrents\n                  </p>\n                  <Button onClick={() => {\n                    setPatternType('expense');\n                    setIsCreateDialogOpen(true);\n                  }} data-testid=\"button-create-expense\">\n                    Créer un schéma de dépense\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":38757},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/CompanySetup.tsx":{"content":"import CompanySetup from '../CompanySetup';\n\nexport default function CompanySetupExample() {\n  return <CompanySetup />;\n}","size_bytes":121},"client/src/components/examples/Dashboard.tsx":{"content":"import Dashboard from '../Dashboard';\n\nexport default function DashboardExample() {\n  return <Dashboard />;\n}","size_bytes":109},"client/src/components/examples/GraphVisualization.tsx":{"content":"import GraphVisualization from '../GraphVisualization';\n\nexport default function GraphVisualizationExample() {\n  const mockAccounts = [\n    { name: \"Compte Courant\", balance: 125400, type: 'asset' as const },\n    { name: \"Chiffre d'Affaires\", balance: 240000, type: 'revenue' as const },\n    { name: \"Charges Sociales\", balance: -45600, type: 'tax' as const },\n    { name: \"TVA à Payer\", balance: -12800, type: 'tax' as const },\n    { name: \"Frais Généraux\", balance: -28400, type: 'expense' as const },\n  ];\n\n  return <GraphVisualization accounts={mockAccounts} />;\n}","size_bytes":571},"client/src/components/examples/Landing.tsx":{"content":"import Landing from '../Landing';\n\nexport default function LandingExample() {\n  return <Landing />;\n}","size_bytes":101},"client/src/components/examples/MobileNavigation.tsx":{"content":"import MobileNavigation from '../MobileNavigation';\n\nexport default function MobileNavigationExample() {\n  return (\n    <div className=\"h-screen bg-background\">\n      <div className=\"p-4\">\n        <h2 className=\"text-2xl font-bold mb-4\">Content Area</h2>\n        <p className=\"text-muted-foreground\">\n          This demonstrates the mobile navigation component with floating action button.\n        </p>\n      </div>\n      <MobileNavigation />\n    </div>\n  );\n}","size_bytes":460},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center gap-4\">\n        <span>Theme Toggle:</span>\n        <ThemeToggle />\n      </div>\n      <p className=\"text-muted-foreground\">Click the button to toggle between light and dark modes.</p>\n    </div>\n  );\n}","size_bytes":378},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/engine.ts":{"content":"/**\n * Core Simulation Engine\n * \n * Aggregates occurrences into monthly buckets per account with proper VAT accounting.\n * Implements the main financial simulation logic for French business accounting.\n */\n\nimport { \n  type Company,\n  type SimulationInputs,\n  type Account \n} from '@shared/schema';\nimport { \n  type Occurrence, \n  type AccountPosting,\n  expandAllPatterns \n} from './occurrences';\n\n/**\n * Monthly account balance with detailed transaction records\n */\nexport interface MonthlyAccountBalance {\n  account: Account;\n  month: number; // 1-12\n  openingBalance: number;\n  transactions: TransactionRecord[];\n  closingBalance: number;\n  summary: {\n    totalDebits: number;\n    totalCredits: number;\n    netChange: number;\n  };\n}\n\n/**\n * Individual transaction record within a month\n */\nexport interface TransactionRecord {\n  id: string;\n  date: string; // ISO date string\n  description: string;\n  amount: number; // Positive for debits, negative for credits\n  sourceOccurrenceId: string;\n  patternName: string;\n  type: 'revenue' | 'expense';\n  category?: string;\n}\n\n/**\n * Simulation results structure\n */\nexport interface SimulationResults {\n  year: number;\n  fiscalStartMonth: number;\n  monthlyBalances: MonthlyAccountBalance[];\n  monthlyTotals: MonthlySummary[];\n  overallTotals: OverallSummary;\n  metadata: {\n    totalOccurrences: number;\n    processingTimeMs: number;\n    engineVersion: string;\n  };\n}\n\n/**\n * Monthly financial summary\n */\nexport interface MonthlySummary {\n  month: number;\n  monthName: string;\n  revenue: {\n    gross: number;\n    net: number;\n    vat: number;\n  };\n  expenses: {\n    gross: number;\n    net: number;\n    vat: number;\n    deductibleVat: number;\n  };\n  netProfit: number;\n  netVatPosition: number; // Positive = owe VAT, negative = VAT refund\n  accountBalances: {\n    [K in Account]: number;\n  };\n}\n\n/**\n * Overall simulation summary\n */\nexport interface OverallSummary {\n  totalRevenue: {\n    gross: number;\n    net: number;\n    vat: number;\n  };\n  totalExpenses: {\n    gross: number;\n    net: number;\n    vat: number;\n    deductibleVat: number;\n  };\n  netProfit: number;\n  totalVatCollected: number;\n  totalVatDeductible: number;\n  netVatOwed: number;\n  finalAccountBalances: {\n    [K in Account]: number;\n  };\n}\n\n/**\n * Engine configuration\n */\nexport interface EngineConfig {\n  version: string;\n  performanceTarget: number; // ms\n  maxPatterns: number;\n}\n\nconst DEFAULT_ENGINE_CONFIG: EngineConfig = {\n  version: 'v1',\n  performanceTarget: 200,\n  maxPatterns: 100,\n};\n\n/**\n * Get month name from number\n */\nfunction getMonthName(month: number): string {\n  const names = [\n    '', 'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n  return names[month] || `Month ${month}`;\n}\n\n/**\n * Get fiscal month name for display (e.g., \"April (Month 1)\" for April-March fiscal year)\n */\nfunction getFiscalMonthName(calendarMonth: number, fiscalStartMonth: number): string {\n  const monthName = getMonthName(calendarMonth);\n  if (fiscalStartMonth === 1) {\n    // Calendar year - just return the month name\n    return monthName;\n  }\n  \n  // Calculate fiscal month number (1-12)\n  const fiscalMonth = ((calendarMonth - fiscalStartMonth + 12) % 12) + 1;\n  return `${monthName} (FY Month ${fiscalMonth})`;\n}\n\n/**\n * Convert calendar month to fiscal month number\n */\nfunction calendarToFiscalMonth(calendarMonth: number, fiscalStartMonth: number): number {\n  return ((calendarMonth - fiscalStartMonth + 12) % 12) + 1;\n}\n\n/**\n * Convert fiscal month to calendar month\n */\nfunction fiscalToCalendarMonth(fiscalMonth: number, fiscalStartMonth: number): number {\n  return ((fiscalMonth - 1 + fiscalStartMonth - 1) % 12) + 1;\n}\n\n/**\n * Get months in fiscal order for processing\n */\nfunction getFiscalMonthOrder(fiscalStartMonth: number): number[] {\n  const months: number[] = [];\n  for (let i = 0; i < 12; i++) {\n    months.push(((fiscalStartMonth + i - 1) % 12) + 1);\n  }\n  return months;\n}\n\n/**\n * Create initial account balances from starting balances\n * FIXED: Initialize opening balances at the fiscal start month, not just January\n */\nfunction createInitialBalances(\n  startingBalances: SimulationInputs['startingBalances'],\n  fiscalStartMonth: number\n): Map<Account, MonthlyAccountBalance[]> {\n  const accounts: Account[] = ['operating', 'savings', 'personal', 'vat'];\n  const balanceMap = new Map<Account, MonthlyAccountBalance[]>();\n  \n  accounts.forEach(account => {\n    const monthlyBalances: MonthlyAccountBalance[] = [];\n    \n    for (let month = 1; month <= 12; month++) {\n      if (month === fiscalStartMonth) {\n        // Fiscal start month: Start with the initial balance\n        monthlyBalances.push({\n          account,\n          month,\n          openingBalance: startingBalances[account],\n          transactions: [],\n          closingBalance: startingBalances[account], // Will be updated as transactions are added\n          summary: {\n            totalDebits: 0,\n            totalCredits: 0,\n            netChange: 0,\n          },\n        });\n      } else {\n        // Other months: Opening balance will be set by roll-forward\n        monthlyBalances.push({\n          account,\n          month,\n          openingBalance: 0, // Will be set by finalizeBalances() roll-forward\n          transactions: [],\n          closingBalance: 0, // Will be calculated from opening balance + transactions\n          summary: {\n            totalDebits: 0,\n            totalCredits: 0,\n            netChange: 0,\n          },\n        });\n      }\n    }\n    \n    balanceMap.set(account, monthlyBalances);\n  });\n  \n  return balanceMap;\n}\n\n/**\n * Apply an occurrence's account postings to the monthly balances\n * FIXED: Only update the specific month, roll-forward will be handled by finalizeBalances()\n */\nfunction applyOccurrenceToBalances(\n  occurrence: Occurrence,\n  balanceMap: Map<Account, MonthlyAccountBalance[]>\n): void {\n  const month = parseInt(occurrence.date.substring(5, 7)); // Extract month from YYYY-MM-DD\n  \n  occurrence.accountPostings.forEach(posting => {\n    const accountBalances = balanceMap.get(posting.account);\n    if (!accountBalances) return;\n    \n    const monthlyBalance = accountBalances[month - 1]; // 0-indexed\n    \n    // Create transaction record\n    const transaction: TransactionRecord = {\n      id: `${occurrence.id}-${posting.account}`,\n      date: occurrence.date,\n      description: posting.description,\n      amount: posting.amount,\n      sourceOccurrenceId: occurrence.id,\n      patternName: occurrence.patternName,\n      type: occurrence.type,\n      category: occurrence.category,\n    };\n    \n    monthlyBalance.transactions.push(transaction);\n    \n    // Update balance and summary for this month only\n    if (posting.amount > 0) {\n      monthlyBalance.summary.totalDebits += posting.amount;\n    } else {\n      monthlyBalance.summary.totalCredits += Math.abs(posting.amount);\n    }\n    \n    monthlyBalance.summary.netChange += posting.amount;\n    \n    // Note: We don't update closingBalance here or subsequent months\n    // This will be handled by finalizeBalances() which properly rolls forward balances\n  });\n}\n\n/**\n * Calculate monthly summaries from account balances\n * FIXED: Return summaries in fiscal year order with proper fiscal month names\n */\nfunction calculateMonthlySummaries(\n  balanceMap: Map<Account, MonthlyAccountBalance[]>,\n  occurrences: Occurrence[],\n  fiscalStartMonth: number\n): MonthlySummary[] {\n  const monthlySummaries: MonthlySummary[] = [];\n  \n  // Group occurrences by month\n  const occurrencesByMonth = new Map<number, Occurrence[]>();\n  occurrences.forEach(occ => {\n    const month = parseInt(occ.date.substring(5, 7));\n    if (!occurrencesByMonth.has(month)) {\n      occurrencesByMonth.set(month, []);\n    }\n    occurrencesByMonth.get(month)!.push(occ);\n  });\n  \n  // Get months in fiscal order\n  const fiscalMonthOrder = getFiscalMonthOrder(fiscalStartMonth);\n  \n  fiscalMonthOrder.forEach(month => {\n    const monthOccurrences = occurrencesByMonth.get(month) || [];\n    \n    // Calculate revenue totals for the month\n    const revenueOccurrences = monthOccurrences.filter(occ => occ.type === 'revenue');\n    const revenue = {\n      gross: revenueOccurrences.reduce((sum, occ) => sum + occ.grossAmount, 0),\n      net: revenueOccurrences.reduce((sum, occ) => sum + occ.netAmount, 0),\n      vat: revenueOccurrences.reduce((sum, occ) => sum + occ.vatAmount, 0),\n    };\n    \n    // Calculate expense totals for the month\n    const expenseOccurrences = monthOccurrences.filter(occ => occ.type === 'expense');\n    const expenses = {\n      gross: expenseOccurrences.reduce((sum, occ) => sum + occ.grossAmount, 0),\n      net: expenseOccurrences.reduce((sum, occ) => sum + occ.netAmount, 0),\n      vat: expenseOccurrences.reduce((sum, occ) => sum + occ.vatAmount, 0),\n      deductibleVat: expenseOccurrences.reduce((sum, occ) => \n        sum + (occ.vatDeductible ? occ.vatAmount : 0), 0),\n    };\n    \n    // Get account balances for the month\n    const accountBalances: { [K in Account]: number } = {\n      operating: balanceMap.get('operating')![month - 1].closingBalance,\n      savings: balanceMap.get('savings')![month - 1].closingBalance,\n      personal: balanceMap.get('personal')![month - 1].closingBalance,\n      vat: balanceMap.get('vat')![month - 1].closingBalance,\n    };\n    \n    monthlySummaries.push({\n      month,\n      monthName: getFiscalMonthName(month, fiscalStartMonth),\n      revenue,\n      expenses,\n      netProfit: revenue.net - expenses.net,\n      netVatPosition: revenue.vat - expenses.deductibleVat,\n      accountBalances,\n    });\n  });\n  \n  return monthlySummaries;\n}\n\n/**\n * Finalize balances by implementing proper month-to-month roll-forward\n * FIXED: Process months in fiscal year order for proper roll-forward\n */\nfunction finalizeBalances(\n  balanceMap: Map<Account, MonthlyAccountBalance[]>,\n  fiscalStartMonth: number\n): void {\n  const accounts: Account[] = ['operating', 'savings', 'personal', 'vat'];\n  const fiscalMonthOrder = getFiscalMonthOrder(fiscalStartMonth);\n  \n  accounts.forEach(account => {\n    const accountBalances = balanceMap.get(account);\n    if (!accountBalances) return;\n    \n    // Process each month in fiscal sequence to ensure proper roll-forward\n    fiscalMonthOrder.forEach((month, fiscalIndex) => {\n      const monthlyBalance = accountBalances[month - 1]; // 0-indexed by calendar month\n      \n      if (fiscalIndex === 0) {\n        // First fiscal month: closing balance = opening balance + net change\n        monthlyBalance.closingBalance = monthlyBalance.openingBalance + monthlyBalance.summary.netChange;\n      } else {\n        // Subsequent fiscal months: opening balance = previous fiscal month's closing balance\n        const previousFiscalMonth = fiscalMonthOrder[fiscalIndex - 1];\n        const previousMonthBalance = accountBalances[previousFiscalMonth - 1]; // 0-indexed\n        monthlyBalance.openingBalance = previousMonthBalance.closingBalance;\n        monthlyBalance.closingBalance = monthlyBalance.openingBalance + monthlyBalance.summary.netChange;\n      }\n    });\n  });\n}\n\n/**\n * Calculate overall summary from monthly summaries\n * FIXED: Get final balances from the last fiscal month, not December\n */\nfunction calculateOverallSummary(monthlySummaries: MonthlySummary[]): OverallSummary {\n  const totals = monthlySummaries.reduce(\n    (acc, monthly) => ({\n      revenue: {\n        gross: acc.revenue.gross + monthly.revenue.gross,\n        net: acc.revenue.net + monthly.revenue.net,\n        vat: acc.revenue.vat + monthly.revenue.vat,\n      },\n      expenses: {\n        gross: acc.expenses.gross + monthly.expenses.gross,\n        net: acc.expenses.net + monthly.expenses.net,\n        vat: acc.expenses.vat + monthly.expenses.vat,\n        deductibleVat: acc.expenses.deductibleVat + monthly.expenses.deductibleVat,\n      },\n    }),\n    {\n      revenue: { gross: 0, net: 0, vat: 0 },\n      expenses: { gross: 0, net: 0, vat: 0, deductibleVat: 0 },\n    }\n  );\n  \n  // Get final account balances from the last fiscal month (which is the last in the array since we ordered by fiscal year)\n  const finalMonth = monthlySummaries[monthlySummaries.length - 1];\n  \n  return {\n    totalRevenue: totals.revenue,\n    totalExpenses: totals.expenses,\n    netProfit: totals.revenue.net - totals.expenses.net,\n    totalVatCollected: totals.revenue.vat,\n    totalVatDeductible: totals.expenses.deductibleVat,\n    netVatOwed: totals.revenue.vat - totals.expenses.deductibleVat,\n    finalAccountBalances: finalMonth ? finalMonth.accountBalances : {\n      operating: 0,\n      savings: 0,\n      personal: 0,\n      vat: 0,\n    },\n  };\n}\n\n/**\n * Validate simulation inputs\n */\nfunction validateSimulationInputs(\n  inputs: SimulationInputs,\n  revenuePatterns: any[],\n  expensePatterns: any[]\n): string[] {\n  const errors: string[] = [];\n  \n  if (!inputs.year || inputs.year < 2020 || inputs.year > 2030) {\n    errors.push('Year must be between 2020 and 2030');\n  }\n  \n  if (!inputs.fiscalStartMonth || inputs.fiscalStartMonth < 1 || inputs.fiscalStartMonth > 12) {\n    errors.push('Fiscal start month must be between 1 and 12');\n  }\n  \n  if (!inputs.startingBalances) {\n    errors.push('Starting balances are required');\n  }\n  \n  const totalPatterns = revenuePatterns.length + expensePatterns.length;\n  if (totalPatterns > DEFAULT_ENGINE_CONFIG.maxPatterns) {\n    errors.push(`Too many patterns (${totalPatterns}). Maximum allowed: ${DEFAULT_ENGINE_CONFIG.maxPatterns}`);\n  }\n  \n  return errors;\n}\n\n/**\n * IMPROVEMENT 2: Validate company data for simulation processing\n */\nfunction validateCompanyForSimulation(company: Company): string[] {\n  const errors: string[] = [];\n  \n  if (!company) {\n    errors.push('Company data is required');\n    return errors; // Early return if company is null/undefined\n  }\n  \n  if (!company.id) {\n    errors.push('Company ID is required');\n  }\n  \n  if (!company.userId) {\n    errors.push('Company must be associated with a user');\n  }\n  \n  if (!company.name || company.name.trim().length === 0) {\n    errors.push('Company name is required');\n  }\n  \n  if (!company.legalForm) {\n    errors.push('Company legal form is required');\n  }\n  \n  if (!company.activitySector) {\n    errors.push('Company activity sector is required');\n  }\n  \n  if (company.capital === null || company.capital === undefined) {\n    errors.push('Company capital is required');\n  }\n  \n  if (!company.bankPartner) {\n    errors.push('Company bank partner is required');\n  }\n  \n  // Validate fiscal year configuration\n  if (company.fiscalYear && !['calendar', 'fiscal'].includes(company.fiscalYear)) {\n    errors.push('Company fiscal year must be either \"calendar\" or \"fiscal\"');\n  }\n  \n  return errors;\n}\n\n/**\n * IMPROVEMENT 3: Invariant validation functions for production robustness\n */\ninterface InvariantValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\n/**\n * Validate that end-of-year final balances equal initial + net postings per account\n */\nfunction validateBalanceInvariants(\n  balanceMap: Map<Account, MonthlyAccountBalance[]>,\n  inputs: SimulationInputs,\n  fiscalStartMonth: number\n): InvariantValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  \n  const accounts: Account[] = ['operating', 'savings', 'personal', 'vat'];\n  const fiscalMonthOrder = getFiscalMonthOrder(fiscalStartMonth);\n  \n  accounts.forEach(account => {\n    const accountBalances = balanceMap.get(account);\n    if (!accountBalances) {\n      errors.push(`Missing balance data for account: ${account}`);\n      return;\n    }\n    \n    // Get initial balance (at fiscal start month)\n    const fiscalStartMonthIndex = fiscalStartMonth - 1; // 0-indexed\n    const initialBalance = inputs.startingBalances[account];\n    const fiscalStartBalance = accountBalances[fiscalStartMonthIndex];\n    \n    if (Math.abs(fiscalStartBalance.openingBalance - initialBalance) > 0.01) {\n      errors.push(`Account ${account}: Fiscal start opening balance (${fiscalStartBalance.openingBalance}) does not match initial balance (${initialBalance})`);\n    }\n    \n    // Calculate total net postings across all months\n    const totalNetPostings = accountBalances.reduce((sum, monthly) => sum + monthly.summary.netChange, 0);\n    \n    // Get final balance (last fiscal month)\n    const lastFiscalMonth = fiscalMonthOrder[11]; // Last month in fiscal year\n    const finalBalance = accountBalances[lastFiscalMonth - 1].closingBalance;\n    \n    // Invariant: Final balance = Initial balance + Total net postings\n    const expectedFinalBalance = initialBalance + totalNetPostings;\n    const balanceDifference = Math.abs(finalBalance - expectedFinalBalance);\n    \n    if (balanceDifference > 0.01) {\n      errors.push(`Account ${account}: Final balance invariant failed. Expected: ${expectedFinalBalance}, Actual: ${finalBalance}, Difference: ${balanceDifference}`);\n    }\n  });\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  };\n}\n\n/**\n * Validate monthly roll-forward: opening equals prior month closing\n */\nfunction validateRollForwardInvariants(\n  balanceMap: Map<Account, MonthlyAccountBalance[]>,\n  fiscalStartMonth: number\n): InvariantValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  \n  const accounts: Account[] = ['operating', 'savings', 'personal', 'vat'];\n  const fiscalMonthOrder = getFiscalMonthOrder(fiscalStartMonth);\n  \n  accounts.forEach(account => {\n    const accountBalances = balanceMap.get(account);\n    if (!accountBalances) {\n      errors.push(`Missing balance data for account: ${account}`);\n      return;\n    }\n    \n    // Check roll-forward for each month after the first fiscal month\n    for (let fiscalIndex = 1; fiscalIndex < 12; fiscalIndex++) {\n      const currentMonth = fiscalMonthOrder[fiscalIndex];\n      const previousMonth = fiscalMonthOrder[fiscalIndex - 1];\n      \n      const currentMonthBalance = accountBalances[currentMonth - 1]; // 0-indexed\n      const previousMonthBalance = accountBalances[previousMonth - 1]; // 0-indexed\n      \n      const rollForwardDifference = Math.abs(\n        currentMonthBalance.openingBalance - previousMonthBalance.closingBalance\n      );\n      \n      if (rollForwardDifference > 0.01) {\n        errors.push(\n          `Account ${account}: Roll-forward invariant failed between ${getMonthName(previousMonth)} and ${getMonthName(currentMonth)}. ` +\n          `Previous closing: ${previousMonthBalance.closingBalance}, Current opening: ${currentMonthBalance.openingBalance}, ` +\n          `Difference: ${rollForwardDifference}`\n        );\n      }\n      \n      // Validate that closing balance = opening balance + net change\n      const expectedClosingBalance = currentMonthBalance.openingBalance + currentMonthBalance.summary.netChange;\n      const closingBalanceDifference = Math.abs(currentMonthBalance.closingBalance - expectedClosingBalance);\n      \n      if (closingBalanceDifference > 0.01) {\n        errors.push(\n          `Account ${account}: Closing balance calculation error in ${getMonthName(currentMonth)}. ` +\n          `Expected: ${expectedClosingBalance}, Actual: ${currentMonthBalance.closingBalance}, ` +\n          `Difference: ${closingBalanceDifference}`\n        );\n      }\n    }\n  });\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  };\n}\n\n/**\n * Validate VAT calculations and totals\n */\nfunction validateVATInvariants(\n  monthlyTotals: MonthlySummary[],\n  overallTotals: OverallSummary\n): InvariantValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  \n  // Sum up monthly VAT amounts\n  const totalMonthlyVATCollected = monthlyTotals.reduce((sum, month) => sum + month.revenue.vat, 0);\n  const totalMonthlyVATDeductible = monthlyTotals.reduce((sum, month) => sum + month.expenses.deductibleVat, 0);\n  \n  // Compare with overall totals\n  const vatCollectedDifference = Math.abs(totalMonthlyVATCollected - overallTotals.totalVatCollected);\n  const vatDeductibleDifference = Math.abs(totalMonthlyVATDeductible - overallTotals.totalVatDeductible);\n  \n  if (vatCollectedDifference > 0.01) {\n    errors.push(\n      `VAT collected total mismatch: Monthly sum (${totalMonthlyVATCollected}) vs Overall (${overallTotals.totalVatCollected}), ` +\n      `Difference: ${vatCollectedDifference}`\n    );\n  }\n  \n  if (vatDeductibleDifference > 0.01) {\n    errors.push(\n      `VAT deductible total mismatch: Monthly sum (${totalMonthlyVATDeductible}) vs Overall (${overallTotals.totalVatDeductible}), ` +\n      `Difference: ${vatDeductibleDifference}`\n    );\n  }\n  \n  // Validate net VAT calculation\n  const expectedNetVAT = overallTotals.totalVatCollected - overallTotals.totalVatDeductible;\n  const netVATDifference = Math.abs(expectedNetVAT - overallTotals.netVatOwed);\n  \n  if (netVATDifference > 0.01) {\n    errors.push(\n      `Net VAT calculation error: Expected (${expectedNetVAT}) vs Actual (${overallTotals.netVatOwed}), ` +\n      `Difference: ${netVATDifference}`\n    );\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  };\n}\n\n/**\n * Main simulation engine function\n * \n * Processes patterns and generates comprehensive financial simulation results\n * with real-time progress updates\n */\nexport async function runSimulation(\n  inputs: SimulationInputs,\n  revenuePatterns: any[],\n  expensePatterns: any[],\n  company: Company,\n  config: Partial<EngineConfig> = {},\n  simulationId?: string,\n  progressCallback?: (progress: any) => Promise<void>\n): Promise<SimulationResults> {\n  const startTime = Date.now();\n  const engineConfig = { ...DEFAULT_ENGINE_CONFIG, ...config };\n  \n  // IMPROVEMENT 2: Validate inputs and company\n  const inputValidationErrors = validateSimulationInputs(inputs, revenuePatterns, expensePatterns);\n  const companyValidationErrors = validateCompanyForSimulation(company);\n  const allValidationErrors = [...inputValidationErrors, ...companyValidationErrors];\n  \n  if (allValidationErrors.length > 0) {\n    throw new Error(`Simulation validation failed: ${allValidationErrors.join(', ')}`);\n  }\n  \n  // Additional runtime verification that company is properly scoped\n  if (!company.id || typeof company.id !== 'string') {\n    throw new Error('Company validation failed: Invalid company ID format');\n  }\n  \n  if (!company.userId || typeof company.userId !== 'string') {\n    throw new Error('Company validation failed: Invalid user ID format');\n  }\n  \n  // Helper function to emit progress updates\n  const emitProgress = async (month: number, progress: number, partialBalances?: any, taxes?: any) => {\n    if (progressCallback && simulationId) {\n      try {\n        await progressCallback({\n          simulationId,\n          currentMonth: month,\n          progress,\n          partialBalances,\n          taxes,\n        });\n      } catch (error) {\n        console.warn(`Progress update failed for simulation ${simulationId}:`, error);\n      }\n    }\n  };\n\n  try {\n    // Step 1: Expand all patterns into occurrences\n    await emitProgress(1, 10); // 10% - Pattern expansion\n    \n    console.log(`📊 Expanding patterns for company ${company.name}:`);\n    console.log(`   Revenue patterns: ${revenuePatterns.length}`);\n    console.log(`   Expense patterns: ${expensePatterns.length}`);\n    revenuePatterns.forEach(p => console.log(`   - Revenue: ${p.name} €${p.amount} ${p.frequency}`));\n    expensePatterns.forEach(p => console.log(`   - Expense: ${p.name} €${p.amount} ${p.frequency}`));\n    \n    const occurrences = expandAllPatterns(\n      revenuePatterns,\n      expensePatterns,\n      company,\n      inputs.year\n    );\n    \n    console.log(`📈 Generated ${occurrences.length} occurrences for year ${inputs.year}`);\n    \n    // Step 2: Initialize account balances with starting balances\n    await emitProgress(1, 20); // 20% - Account initialization\n    \n    const balanceMap = createInitialBalances(inputs.startingBalances, inputs.fiscalStartMonth);\n    \n    // Step 3: Apply occurrences month by month with progress updates\n    const processingFiscalOrder = getFiscalMonthOrder(inputs.fiscalStartMonth);\n    const monthlyOccurrences = new Map<number, typeof occurrences>();\n    \n    // Group occurrences by month\n    occurrences.forEach(occurrence => {\n      const month = new Date(occurrence.date).getMonth() + 1;\n      if (!monthlyOccurrences.has(month)) {\n        monthlyOccurrences.set(month, []);\n      }\n      monthlyOccurrences.get(month)!.push(occurrence);\n    });\n    \n    // Process each month in fiscal order with progress updates\n    for (let i = 0; i < processingFiscalOrder.length; i++) {\n      const month = processingFiscalOrder[i];\n      const monthOccurrences = monthlyOccurrences.get(month) || [];\n      \n      // Apply occurrences for this month\n      monthOccurrences.forEach(occurrence => {\n        applyOccurrenceToBalances(occurrence, balanceMap);\n      });\n      \n      // Calculate progress (20% base + 60% processing across 12 months)\n      const monthProgress = 20 + ((i + 1) / 12) * 60;\n      \n      // Get current account balances for this month\n      const currentBalances: any = {};\n      balanceMap.forEach((accountBalances, account) => {\n        const monthBalance = accountBalances.find(b => b.month === month);\n        if (monthBalance) {\n          currentBalances[account] = monthBalance.closingBalance;\n        }\n      });\n      \n      // Calculate taxes for this month (basic calculation for progress)\n      const monthRevenue = monthOccurrences\n        .filter(o => o.type === 'revenue')\n        .reduce((sum, o) => sum + o.accountPostings.reduce((s, p) => s + p.amount, 0), 0);\n      const monthExpenses = monthOccurrences\n        .filter(o => o.type === 'expense')\n        .reduce((sum, o) => sum + o.accountPostings.reduce((s, p) => s + p.amount, 0), 0);\n      \n      const taxes = {\n        tva: Math.abs(currentBalances.vat || 0),\n        urssaf: monthRevenue * 0.45, // Approximate URSSAF calculation\n        netCashFlow: monthRevenue + monthExpenses, // Expenses are negative\n      };\n      \n      // Emit progress update for this month\n      await emitProgress(month, monthProgress, currentBalances, taxes);\n      \n      // Small delay to make progress visible (remove in production for speed)\n      if (progressCallback) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n    };\n    \n    // Step 4: ADDED - Finalize balances with proper roll-forward calculation\n    await emitProgress(12, 85); // 85% - Finalizing balances\n    finalizeBalances(balanceMap, inputs.fiscalStartMonth);\n    \n    // Step 5: Calculate monthly summaries\n    await emitProgress(12, 90); // 90% - Calculating summaries\n    const monthlyTotals = calculateMonthlySummaries(balanceMap, occurrences, inputs.fiscalStartMonth);\n    \n    // Step 6: Calculate overall summary\n    await emitProgress(12, 95); // 95% - Final calculations\n    const overallTotals = calculateOverallSummary(monthlyTotals);\n    \n    // IMPROVEMENT 3: Validate invariants for production robustness\n    const balanceInvariantResult = validateBalanceInvariants(balanceMap, inputs, inputs.fiscalStartMonth);\n    const rollForwardInvariantResult = validateRollForwardInvariants(balanceMap, inputs.fiscalStartMonth);\n    const vatInvariantResult = validateVATInvariants(monthlyTotals, overallTotals);\n    \n    // Collect all invariant validation errors\n    const invariantErrors = [\n      ...balanceInvariantResult.errors,\n      ...rollForwardInvariantResult.errors,\n      ...vatInvariantResult.errors\n    ];\n    \n    // Collect all warnings\n    const invariantWarnings = [\n      ...balanceInvariantResult.warnings,\n      ...rollForwardInvariantResult.warnings,\n      ...vatInvariantResult.warnings\n    ];\n    \n    // Log warnings\n    if (invariantWarnings.length > 0) {\n      console.warn('Simulation invariant warnings:', invariantWarnings);\n    }\n    \n    // Fail if any critical invariants are violated\n    if (invariantErrors.length > 0) {\n      const errorMessage = `Simulation invariant validation failed:\\n${invariantErrors.join('\\n')}`;\n      console.error(errorMessage);\n      throw new Error(`Critical simulation invariants violated: ${invariantErrors.join('; ')}`);\n    }\n    \n    console.log('✅ All simulation invariants validated successfully');\n    \n    // Step 7: Flatten monthly balances for storage\n    const monthlyBalances: MonthlyAccountBalance[] = [];\n    balanceMap.forEach(accountBalances => {\n      monthlyBalances.push(...accountBalances);\n    });\n    \n    const processingTime = Date.now() - startTime;\n    \n    // Performance check\n    if (processingTime > engineConfig.performanceTarget) {\n      console.warn(`Simulation took ${processingTime}ms, exceeding target of ${engineConfig.performanceTarget}ms`);\n    }\n    \n    // Sort monthly balances in fiscal year order\n    const sortingFiscalOrder = getFiscalMonthOrder(inputs.fiscalStartMonth);\n    const sortedMonthlyBalances = monthlyBalances.sort((a, b) => {\n      const aFiscalIndex = sortingFiscalOrder.indexOf(a.month);\n      const bFiscalIndex = sortingFiscalOrder.indexOf(b.month);\n      if (aFiscalIndex !== bFiscalIndex) {\n        return aFiscalIndex - bFiscalIndex;\n      }\n      return a.account.localeCompare(b.account);\n    });\n    \n    // Final progress update - simulation completed\n    await emitProgress(12, 100); // 100% - Simulation completed\n    \n    return {\n      year: inputs.year,\n      fiscalStartMonth: inputs.fiscalStartMonth,\n      monthlyBalances: sortedMonthlyBalances,\n      monthlyTotals,\n      overallTotals,\n      metadata: {\n        totalOccurrences: occurrences.length,\n        processingTimeMs: processingTime,\n        engineVersion: engineConfig.version,\n      },\n    };\n    \n  } catch (error) {\n    console.error('Simulation engine error:', error);\n    throw new Error(`Simulation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n/**\n * Utility function to format simulation results for API response\n */\nexport function formatSimulationResults(results: SimulationResults): any {\n  return {\n    year: results.year,\n    fiscalStartMonth: results.fiscalStartMonth,\n    summary: {\n      totalRevenue: results.overallTotals.totalRevenue.net,\n      totalExpenses: results.overallTotals.totalExpenses.net,\n      netProfit: results.overallTotals.netProfit,\n      totalVatOwed: results.overallTotals.netVatOwed,\n    },\n    monthlyData: results.monthlyTotals.map(month => ({\n      month: month.month,\n      monthName: month.monthName,\n      revenue: month.revenue.net,\n      expenses: month.expenses.net,\n      netProfit: month.netProfit,\n      vatPosition: month.netVatPosition,\n      balances: month.accountBalances,\n    })),\n    accountBalances: results.monthlyBalances.reduce((acc, balance) => {\n      const key = `${balance.account}_${balance.month}`;\n      acc[key] = {\n        account: balance.account,\n        month: balance.month,\n        openingBalance: balance.openingBalance,\n        closingBalance: balance.closingBalance,\n        transactions: balance.transactions.length,\n        netChange: balance.summary.netChange,\n      };\n      return acc;\n    }, {} as any),\n    metadata: results.metadata,\n  };\n}\n\n/**\n * Export engine configuration for external access\n */\nexport { DEFAULT_ENGINE_CONFIG, type EngineConfig };","size_bytes":31280},"server/holidays.ts":{"content":"/**\n * French Holiday System\n * \n * Calculates French national holidays and regional variations for a given year.\n * Used by the simulation engine to handle excludeHolidays functionality.\n */\n\n/**\n * Calculate Easter Sunday for a given year using the Anonymous Gregorian algorithm\n * @param year - The year to calculate Easter for\n * @returns Date object for Easter Sunday\n */\nfunction getEasterSunday(year: number): Date {\n  const a = year % 19;\n  const b = Math.floor(year / 100);\n  const c = year % 100;\n  const d = Math.floor(b / 4);\n  const e = b % 4;\n  const f = Math.floor((b + 8) / 25);\n  const g = Math.floor((b - f + 1) / 3);\n  const h = (19 * a + b - d - g + 15) % 30;\n  const i = Math.floor(c / 4);\n  const k = c % 4;\n  const l = (32 + 2 * e + 2 * i - h - k) % 7;\n  const m = Math.floor((a + 11 * h + 22 * l) / 451);\n  const n = Math.floor((h + l - 7 * m + 114) / 31);\n  const p = (h + l - 7 * m + 114) % 31;\n  \n  return new Date(year, n - 1, p + 1);\n}\n\n/**\n * Add days to a date\n * @param date - The base date\n * @param days - Number of days to add (can be negative)\n * @returns New Date object\n */\nfunction addDays(date: Date, days: number): Date {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n/**\n * Format date as ISO string (YYYY-MM-DD)\n * @param date - The date to format\n * @returns ISO date string\n */\nfunction formatDateISO(date: Date): string {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\n/**\n * French National Holidays Interface\n */\nexport interface FrenchHoliday {\n  name: string;\n  date: string; // ISO date string (YYYY-MM-DD)\n  type: 'fixed' | 'easter-based' | 'regional';\n  region?: string; // For regional holidays\n}\n\n/**\n * Get all French holidays for a given year and region\n * \n * @param year - The year to calculate holidays for\n * @param region - French region code ('FR' for national, 'FR-67' for Alsace, 'FR-68' for Haut-Rhin, etc.)\n * @returns Set of holiday date strings in ISO format (YYYY-MM-DD)\n */\nexport function getFrenchHolidays(year: number, region: string = 'FR'): Set<string> {\n  const holidays = new Set<string>();\n  \n  // Calculate Easter Sunday for the year\n  const easter = getEasterSunday(year);\n  \n  // Fixed National Holidays\n  const fixedHolidays = [\n    { name: 'Jour de l\\'An', date: `${year}-01-01` },\n    { name: 'Fête du Travail', date: `${year}-05-01` },\n    { name: 'Victoire 1945', date: `${year}-05-08` },\n    { name: 'Fête Nationale', date: `${year}-07-14` },\n    { name: 'Assomption', date: `${year}-08-15` },\n    { name: 'Toussaint', date: `${year}-11-01` },\n    { name: 'Armistice', date: `${year}-11-11` },\n    { name: 'Noël', date: `${year}-12-25` },\n  ];\n  \n  fixedHolidays.forEach(holiday => holidays.add(holiday.date));\n  \n  // Easter-based holidays\n  const easterBasedHolidays = [\n    { name: 'Lundi de Pâques', offset: 1 }, // Easter Monday\n    { name: 'Ascension', offset: 39 }, // 39 days after Easter\n    { name: 'Lundi de Pentecôte', offset: 50 }, // 50 days after Easter (Whit Monday)\n  ];\n  \n  easterBasedHolidays.forEach(holiday => {\n    const holidayDate = addDays(easter, holiday.offset);\n    holidays.add(formatDateISO(holidayDate));\n  });\n  \n  // Regional holidays (Alsace-Moselle specific holidays for FR-67, FR-68, FR-57)\n  if (region === 'FR-67' || region === 'FR-68' || region === 'FR-57') {\n    // Good Friday (Vendredi Saint) - 2 days before Easter\n    const goodFriday = addDays(easter, -2);\n    holidays.add(formatDateISO(goodFriday));\n    \n    // St. Stephen's Day (Saint-Étienne) - December 26\n    holidays.add(`${year}-12-26`);\n  }\n  \n  // Additional regional holidays can be added here as needed\n  // For now, we support basic national holidays plus Alsace-Moselle\n  \n  return holidays;\n}\n\n/**\n * Get detailed holiday information for a given year and region\n * \n * @param year - The year to calculate holidays for\n * @param region - French region code\n * @returns Array of FrenchHoliday objects with details\n */\nexport function getFrenchHolidaysDetailed(year: number, region: string = 'FR'): FrenchHoliday[] {\n  const holidays: FrenchHoliday[] = [];\n  \n  // Calculate Easter Sunday for the year\n  const easter = getEasterSunday(year);\n  \n  // Fixed National Holidays\n  const fixedHolidays = [\n    { name: 'Jour de l\\'An', date: `${year}-01-01`, type: 'fixed' as const },\n    { name: 'Fête du Travail', date: `${year}-05-01`, type: 'fixed' as const },\n    { name: 'Victoire 1945', date: `${year}-05-08`, type: 'fixed' as const },\n    { name: 'Fête Nationale', date: `${year}-07-14`, type: 'fixed' as const },\n    { name: 'Assomption', date: `${year}-08-15`, type: 'fixed' as const },\n    { name: 'Toussaint', date: `${year}-11-01`, type: 'fixed' as const },\n    { name: 'Armistice', date: `${year}-11-11`, type: 'fixed' as const },\n    { name: 'Noël', date: `${year}-12-25`, type: 'fixed' as const },\n  ];\n  \n  holidays.push(...fixedHolidays);\n  \n  // Easter-based holidays\n  const easterBasedHolidays = [\n    { name: 'Lundi de Pâques', offset: 1 },\n    { name: 'Ascension', offset: 39 },\n    { name: 'Lundi de Pentecôte', offset: 50 },\n  ];\n  \n  easterBasedHolidays.forEach(holiday => {\n    const holidayDate = addDays(easter, holiday.offset);\n    holidays.push({\n      name: holiday.name,\n      date: formatDateISO(holidayDate),\n      type: 'easter-based',\n    });\n  });\n  \n  // Regional holidays\n  if (region === 'FR-67' || region === 'FR-68' || region === 'FR-57') {\n    const goodFriday = addDays(easter, -2);\n    holidays.push({\n      name: 'Vendredi Saint',\n      date: formatDateISO(goodFriday),\n      type: 'regional',\n      region: region,\n    });\n    \n    holidays.push({\n      name: 'Saint-Étienne',\n      date: `${year}-12-26`,\n      type: 'regional',\n      region: region,\n    });\n  }\n  \n  return holidays.sort((a, b) => a.date.localeCompare(b.date));\n}\n\n/**\n * Check if a specific date is a French holiday\n * \n * @param dateStr - Date string in ISO format (YYYY-MM-DD)\n * @param year - The year of the date\n * @param region - French region code\n * @returns true if the date is a holiday\n */\nexport function isFrenchHoliday(dateStr: string, year: number, region: string = 'FR'): boolean {\n  const holidays = getFrenchHolidays(year, region);\n  return holidays.has(dateStr);\n}\n\n/**\n * Get the next working day after a given date, skipping weekends and holidays\n * \n * @param date - The starting date\n * @param region - French region code for holiday calculation\n * @returns Next working day as Date object\n */\nexport function getNextWorkingDay(date: Date, region: string = 'FR'): Date {\n  let nextDay = addDays(date, 1);\n  const year = nextDay.getFullYear();\n  const holidays = getFrenchHolidays(year, region);\n  \n  while (true) {\n    const dayOfWeek = nextDay.getDay(); // 0 = Sunday, 6 = Saturday\n    const dateStr = formatDateISO(nextDay);\n    \n    // Skip weekends (Saturday = 6, Sunday = 0) and holidays\n    if (dayOfWeek !== 0 && dayOfWeek !== 6 && !holidays.has(dateStr)) {\n      break;\n    }\n    \n    nextDay = addDays(nextDay, 1);\n    \n    // Handle year boundary\n    if (nextDay.getFullYear() !== year) {\n      const newHolidays = getFrenchHolidays(nextDay.getFullYear(), region);\n      // Merge holidays for the new year\n      newHolidays.forEach(holiday => holidays.add(holiday));\n    }\n  }\n  \n  return nextDay;\n}\n\n/**\n * Count working days between two dates, excluding weekends and holidays\n * \n * @param startDate - Start date (inclusive)\n * @param endDate - End date (inclusive)\n * @param region - French region code for holiday calculation\n * @returns Number of working days\n */\nexport function countWorkingDays(startDate: Date, endDate: Date, region: string = 'FR'): number {\n  if (startDate > endDate) return 0;\n  \n  let count = 0;\n  const current = new Date(startDate);\n  const holidays = new Set<string>();\n  \n  // Pre-calculate holidays for all years in the range\n  for (let year = startDate.getFullYear(); year <= endDate.getFullYear(); year++) {\n    const yearHolidays = getFrenchHolidays(year, region);\n    yearHolidays.forEach(holiday => holidays.add(holiday));\n  }\n  \n  while (current <= endDate) {\n    const dayOfWeek = current.getDay();\n    const dateStr = formatDateISO(current);\n    \n    // Count if it's not a weekend and not a holiday\n    if (dayOfWeek !== 0 && dayOfWeek !== 6 && !holidays.has(dateStr)) {\n      count++;\n    }\n    \n    current.setDate(current.getDate() + 1);\n  }\n  \n  return count;\n}","size_bytes":8554},"server/occurrences.ts":{"content":"/**\n * Pattern Expansion Engine\n * \n * Expands revenue and expense patterns into individual occurrences based on:\n * - Frequency (daily, monthly, quarterly, yearly)\n * - Daily schema precedence rules\n * - French business calendar integration\n * - VAT calculations and account postings\n */\n\nimport { \n  type RevenuePattern, \n  type ExpensePattern, \n  type Company,\n  type DayOffOverride,\n  DailyPatternUtils \n} from '@shared/schema';\nimport { getFrenchHolidays } from './holidays';\n\n/**\n * Occurrence represents a single financial transaction generated from a pattern\n */\nexport interface Occurrence {\n  id: string;\n  patternId: string;\n  patternName: string;\n  date: string; // ISO date string (YYYY-MM-DD)\n  type: 'revenue' | 'expense';\n  category?: string; // For expenses\n  \n  // Financial amounts\n  grossAmount: number; // Original pattern amount\n  vatRate: number; // VAT rate as decimal (e.g., 0.20 for 20%)\n  vatAmount: number; // Calculated VAT amount\n  netAmount: number; // Amount without VAT\n  vatDeductible?: boolean; // For expenses only\n  \n  // Account postings\n  accountPostings: AccountPosting[];\n  \n  // Metadata\n  frequency: string;\n  generatedBy: 'pattern-expansion';\n  isRecurring: boolean;\n}\n\n/**\n * Account posting for double-entry bookkeeping\n */\nexport interface AccountPosting {\n  account: 'operating' | 'savings' | 'personal' | 'vat';\n  amount: number; // Positive for debits, negative for credits\n  description: string;\n}\n\n/**\n * Utility function to generate unique occurrence ID\n */\nfunction generateOccurrenceId(patternId: string, date: string, suffix?: string): string {\n  const base = `${patternId}-${date}`;\n  return suffix ? `${base}-${suffix}` : base;\n}\n\n/**\n * Calculate VAT amounts for a given gross amount and rate\n */\nfunction calculateVAT(grossAmount: number, vatRate: number): { vatAmount: number; netAmount: number } {\n  const vatAmount = grossAmount * vatRate / (1 + vatRate);\n  const netAmount = grossAmount - vatAmount;\n  return { vatAmount, netAmount };\n}\n\n/**\n * Generate account postings for a revenue occurrence\n */\nfunction generateRevenuePostings(occurrence: Occurrence): AccountPosting[] {\n  return [\n    {\n      account: 'operating',\n      amount: occurrence.netAmount,\n      description: `Revenue: ${occurrence.patternName}`,\n    },\n    {\n      account: 'vat',\n      amount: occurrence.vatAmount,\n      description: `VAT on revenue: ${occurrence.patternName}`,\n    },\n  ];\n}\n\n/**\n * Generate account postings for an expense occurrence\n */\nfunction generateExpensePostings(occurrence: Occurrence): AccountPosting[] {\n  const postings: AccountPosting[] = [\n    {\n      account: 'operating',\n      amount: -occurrence.netAmount, // Negative for expense\n      description: `Expense: ${occurrence.patternName}`,\n    },\n  ];\n  \n  // Only add VAT deduction if VAT is deductible\n  if (occurrence.vatDeductible && occurrence.vatAmount > 0) {\n    postings.push({\n      account: 'vat',\n      amount: -occurrence.vatAmount, // Negative for VAT recovery\n      description: `Deductible VAT: ${occurrence.patternName}`,\n    });\n  }\n  \n  return postings;\n}\n\n/**\n * Check if a date should be active based on daily pattern rules\n * \n * Precedence order:\n * 1. daysMask - base working days\n * 2. excludeWeekends - removes weekends from daysMask\n * 3. excludeHolidays - removes holidays from result\n * 4. dayOffOverrides - final per-date overrides\n */\nfunction isDateActive(\n  date: Date,\n  pattern: RevenuePattern | ExpensePattern,\n  holidays: Set<string>\n): boolean {\n  const dateStr = formatDateISO(date);\n  const dayOfWeek = date.getDay(); // 0=Sunday, 6=Saturday\n  \n  // Step 4: Check dayOffOverrides first (highest precedence)\n  if (pattern.dayOffOverrides) {\n    const overrides = pattern.dayOffOverrides as DayOffOverride[];\n    const override = overrides.find(o => o.date === dateStr);\n    if (override) {\n      return override.active; // Override takes absolute precedence\n    }\n  }\n  \n  // Step 1: Check daysMask (base working days)\n  let isActive = false;\n  if (pattern.daysMask !== null && pattern.daysMask !== undefined) {\n    const dayBit = 1 << dayOfWeek;\n    isActive = (pattern.daysMask & dayBit) !== 0;\n  } else {\n    // If no daysMask, assume all days are active by default\n    isActive = true;\n  }\n  \n  // Step 2: Apply excludeWeekends\n  if (isActive && pattern.excludeWeekends) {\n    // Remove Saturday (6) and Sunday (0)\n    if (dayOfWeek === 0 || dayOfWeek === 6) {\n      isActive = false;\n    }\n  }\n  \n  // Step 3: Apply excludeHolidays\n  if (isActive && pattern.excludeHolidays) {\n    if (holidays.has(dateStr)) {\n      isActive = false;\n    }\n  }\n  \n  return isActive;\n}\n\n/**\n * Format date as ISO string (YYYY-MM-DD)\n */\nfunction formatDateISO(date: Date): string {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\n/**\n * Add months to a date\n */\nfunction addMonths(date: Date, months: number): Date {\n  const result = new Date(date);\n  result.setMonth(result.getMonth() + months);\n  return result;\n}\n\n/**\n * Get the first day of a month\n */\nfunction getFirstDayOfMonth(year: number, month: number): Date {\n  return new Date(year, month - 1, 1); // month is 0-indexed\n}\n\n/**\n * Get the last day of a month  \n */\nfunction getLastDayOfMonth(year: number, month: number): Date {\n  return new Date(year, month, 0); // Day 0 of next month = last day of current month\n}\n\n/**\n * Expand a daily pattern into occurrences\n */\nfunction expandDailyPattern(\n  pattern: RevenuePattern | ExpensePattern,\n  company: Company,\n  year: number,\n  holidays: Set<string>\n): Occurrence[] {\n  const occurrences: Occurrence[] = [];\n  \n  // Determine the date range for expansion\n  let startDate: Date;\n  if (pattern.startDate) {\n    startDate = new Date(pattern.startDate);\n  } else {\n    // Default to start of the specified start month\n    startDate = getFirstDayOfMonth(year, pattern.startMonth);\n  }\n  \n  const endDate = new Date(year, 11, 31); // End of year\n  \n  // Ensure we don't start before the target year\n  if (startDate.getFullYear() < year) {\n    startDate = new Date(year, 0, 1);\n  }\n  \n  // Ensure we don't go beyond the target year\n  if (startDate.getFullYear() > year) {\n    return []; // No occurrences for this year\n  }\n  \n  // Generate daily occurrences\n  const currentDate = new Date(startDate);\n  while (currentDate <= endDate) {\n    if (isDateActive(currentDate, pattern, holidays)) {\n      const occurrence = createOccurrence(pattern, company, new Date(currentDate));\n      occurrences.push(occurrence);\n    }\n    \n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n  \n  return occurrences;\n}\n\n/**\n * Expand a monthly pattern into occurrences\n */\nfunction expandMonthlyPattern(\n  pattern: RevenuePattern | ExpensePattern,\n  company: Company,\n  year: number\n): Occurrence[] {\n  const occurrences: Occurrence[] = [];\n  \n  // Generate monthly occurrences starting from startMonth\n  for (let month = pattern.startMonth; month <= 12; month++) {\n    const date = getFirstDayOfMonth(year, month);\n    const occurrence = createOccurrence(pattern, company, date);\n    occurrences.push(occurrence);\n  }\n  \n  return occurrences;\n}\n\n/**\n * Expand a quarterly pattern into occurrences\n */\nfunction expandQuarterlyPattern(\n  pattern: RevenuePattern | ExpensePattern,\n  company: Company,\n  year: number\n): Occurrence[] {\n  const occurrences: Occurrence[] = [];\n  \n  // Determine which quarter the startMonth falls into\n  const startQuarter = Math.ceil(pattern.startMonth / 3);\n  \n  // Generate quarterly occurrences\n  for (let quarter = startQuarter; quarter <= 4; quarter++) {\n    const quarterStartMonth = (quarter - 1) * 3 + 1; // Q1=1, Q2=4, Q3=7, Q4=10\n    const date = getFirstDayOfMonth(year, quarterStartMonth);\n    const occurrence = createOccurrence(pattern, company, date);\n    occurrences.push(occurrence);\n  }\n  \n  return occurrences;\n}\n\n/**\n * Expand a yearly pattern into occurrences\n */\nfunction expandYearlyPattern(\n  pattern: RevenuePattern | ExpensePattern,\n  company: Company,\n  year: number\n): Occurrence[] {\n  const occurrences: Occurrence[] = [];\n  \n  // Generate single yearly occurrence at startMonth\n  const date = getFirstDayOfMonth(year, pattern.startMonth);\n  const occurrence = createOccurrence(pattern, company, date);\n  occurrences.push(occurrence);\n  \n  return occurrences;\n}\n\n/**\n * Create a single occurrence from a pattern\n */\nfunction createOccurrence(\n  pattern: RevenuePattern | ExpensePattern,\n  company: Company,\n  date: Date\n): Occurrence {\n  const grossAmount = parseFloat(String(pattern.amount));\n  const vatRate = 'vatRate' in pattern && pattern.vatRate\n    ? parseFloat(String(pattern.vatRate)) / 100 // Convert percentage to decimal\n    : 0.20; // Default to 20% VAT\n  \n  const { vatAmount, netAmount } = calculateVAT(grossAmount, vatRate);\n  \n  const occurrence: Occurrence = {\n    id: generateOccurrenceId(pattern.id, formatDateISO(date)),\n    patternId: pattern.id,\n    patternName: pattern.name,\n    date: formatDateISO(date),\n    type: 'vatRate' in pattern ? 'revenue' : 'expense',\n    category: 'category' in pattern ? pattern.category : undefined,\n    grossAmount,\n    vatRate,\n    vatAmount,\n    netAmount,\n    vatDeductible: 'vatDeductible' in pattern ? Boolean(pattern.vatDeductible) : undefined,\n    accountPostings: [], // Will be filled below\n    frequency: pattern.frequency,\n    generatedBy: 'pattern-expansion',\n    isRecurring: Boolean(pattern.isRecurring),\n  };\n  \n  // Generate account postings based on type\n  if (occurrence.type === 'revenue') {\n    occurrence.accountPostings = generateRevenuePostings(occurrence);\n  } else {\n    occurrence.accountPostings = generateExpensePostings(occurrence);\n  }\n  \n  return occurrence;\n}\n\n/**\n * Main function to expand a pattern into occurrences\n * \n * @param pattern - The revenue or expense pattern to expand\n * @param company - Company information for context\n * @param year - The year to generate occurrences for\n * @returns Array of occurrences generated from the pattern\n */\nexport function expandPattern(\n  pattern: RevenuePattern | ExpensePattern,\n  company: Company,\n  year: number\n): Occurrence[] {\n  // Pre-calculate holidays for the year using company's holiday region\n  const holidayRegion = company.holidayRegion || 'FR';\n  const holidays = getFrenchHolidays(year, holidayRegion);\n  \n  // Expand based on frequency\n  switch (pattern.frequency) {\n    case 'daily':\n      return expandDailyPattern(pattern, company, year, holidays);\n      \n    case 'monthly':\n      return expandMonthlyPattern(pattern, company, year);\n      \n    case 'quarterly':\n      return expandQuarterlyPattern(pattern, company, year);\n      \n    case 'yearly':\n      return expandYearlyPattern(pattern, company, year);\n      \n    default:\n      console.warn(`Unknown frequency: ${pattern.frequency}`);\n      return [];\n  }\n}\n\n/**\n * Expand multiple patterns into a combined list of occurrences\n * \n * @param revenuePatterns - Array of revenue patterns\n * @param expensePatterns - Array of expense patterns  \n * @param company - Company information\n * @param year - Target year\n * @returns Combined array of all occurrences sorted by date\n */\nexport function expandAllPatterns(\n  revenuePatterns: RevenuePattern[],\n  expensePatterns: ExpensePattern[],\n  company: Company,\n  year: number\n): Occurrence[] {\n  const allOccurrences: Occurrence[] = [];\n  \n  // Expand revenue patterns\n  revenuePatterns.forEach(pattern => {\n    const occurrences = expandPattern(pattern, company, year);\n    allOccurrences.push(...occurrences);\n  });\n  \n  // Expand expense patterns\n  expensePatterns.forEach(pattern => {\n    const occurrences = expandPattern(pattern, company, year);\n    allOccurrences.push(...occurrences);\n  });\n  \n  // Sort by date\n  return allOccurrences.sort((a, b) => a.date.localeCompare(b.date));\n}\n\n/**\n * Filter occurrences by date range\n */\nexport function filterOccurrencesByDateRange(\n  occurrences: Occurrence[],\n  startDate: string,\n  endDate: string\n): Occurrence[] {\n  return occurrences.filter(occ => \n    occ.date >= startDate && occ.date <= endDate\n  );\n}\n\n/**\n * Group occurrences by month\n */\nexport function groupOccurrencesByMonth(occurrences: Occurrence[]): Map<string, Occurrence[]> {\n  const grouped = new Map<string, Occurrence[]>();\n  \n  occurrences.forEach(occ => {\n    const monthKey = occ.date.substring(0, 7); // YYYY-MM\n    if (!grouped.has(monthKey)) {\n      grouped.set(monthKey, []);\n    }\n    grouped.get(monthKey)!.push(occ);\n  });\n  \n  return grouped;\n}\n\n/**\n * Calculate totals from occurrences\n */\nexport interface OccurrenceTotals {\n  totalRevenue: number;\n  totalExpenses: number;\n  netProfit: number;\n  totalVAT: number;\n  deductibleVAT: number;\n  netVAT: number; // VAT owed (collected - deductible)\n}\n\nexport function calculateOccurrenceTotals(occurrences: Occurrence[]): OccurrenceTotals {\n  let totalRevenue = 0;\n  let totalExpenses = 0;\n  let collectedVAT = 0;\n  let deductibleVAT = 0;\n  \n  occurrences.forEach(occ => {\n    if (occ.type === 'revenue') {\n      totalRevenue += occ.netAmount;\n      collectedVAT += occ.vatAmount;\n    } else {\n      totalExpenses += occ.netAmount;\n      if (occ.vatDeductible) {\n        deductibleVAT += occ.vatAmount;\n      }\n    }\n  });\n  \n  return {\n    totalRevenue,\n    totalExpenses,\n    netProfit: totalRevenue - totalExpenses,\n    totalVAT: collectedVAT,\n    deductibleVAT,\n    netVAT: collectedVAT - deductibleVAT,\n  };\n}","size_bytes":13493},"server/summarizer.ts":{"content":"/**\n * Results Summarizer\n * \n * Computes monthly and overall totals, VAT summaries, and generates \n * comprehensive financial reports for display and analysis.\n */\n\nimport {\n  type SimulationResults,\n  type MonthlySummary,\n  type OverallSummary,\n  type MonthlyAccountBalance,\n} from './engine';\nimport { type Account } from '@shared/schema';\n\n/**\n * Enhanced financial report structure\n */\nexport interface FinancialReport {\n  period: {\n    year: number;\n    fiscalStartMonth: number;\n    reportType: 'annual' | 'quarterly' | 'monthly';\n  };\n  overview: ReportOverview;\n  profitAndLoss: ProfitAndLossStatement;\n  vatSummary: VATSummary;\n  cashFlow: CashFlowStatement;\n  accountSummary: AccountSummary;\n  trends: TrendAnalysis;\n  kpis: KeyPerformanceIndicators;\n}\n\n/**\n * Report overview section\n */\nexport interface ReportOverview {\n  totalRevenue: number;\n  totalExpenses: number;\n  netProfit: number;\n  profitMargin: number; // As percentage\n  vatPosition: number; // Positive = owe VAT, negative = VAT refund\n  cashPosition: number; // Total liquid assets\n  reportGeneratedAt: string;\n}\n\n/**\n * Profit and Loss statement\n */\nexport interface ProfitAndLossStatement {\n  revenue: {\n    gross: number;\n    vat: number;\n    net: number;\n    byMonth: MonthlyValue[];\n  };\n  expenses: {\n    gross: number;\n    vat: number;\n    deductibleVat: number;\n    net: number;\n    byMonth: MonthlyValue[];\n    byCategory: CategoryBreakdown[];\n  };\n  grossProfit: number;\n  netProfit: number;\n  monthlyNetProfit: MonthlyValue[];\n}\n\n/**\n * VAT summary and calculations\n */\nexport interface VATSummary {\n  collected: {\n    total: number;\n    byMonth: MonthlyValue[];\n  };\n  deductible: {\n    total: number;\n    byMonth: MonthlyValue[];\n  };\n  netPosition: {\n    total: number;\n    byMonth: MonthlyValue[];\n  };\n  quarterlyPositions: QuarterlyVAT[];\n  annualReturn: {\n    totalCollected: number;\n    totalDeductible: number;\n    netOwed: number;\n    estimatedPayments: number;\n  };\n}\n\n/**\n * Cash flow statement\n */\nexport interface CashFlowStatement {\n  openingBalance: number;\n  operatingCashFlow: {\n    revenue: number;\n    expenses: number;\n    net: number;\n  };\n  vatCashFlow: {\n    collected: number;\n    paid: number; // VAT refunds received\n    net: number;\n  };\n  closingBalance: number;\n  monthlyFlow: MonthlyValue[];\n}\n\n/**\n * Account summary\n */\nexport interface AccountSummary {\n  accounts: {\n    [K in Account]: AccountDetail;\n  };\n  totalAssets: number;\n  liquidityRatio: number;\n}\n\nexport interface AccountDetail {\n  account: Account;\n  openingBalance: number;\n  closingBalance: number;\n  totalTransactions: number;\n  netChange: number;\n  monthlyBalances: MonthlyValue[];\n}\n\n/**\n * Trend analysis\n */\nexport interface TrendAnalysis {\n  revenueGrowth: {\n    monthOverMonth: number[]; // Percentage growth\n    quarterOverQuarter: number[];\n    trend: 'increasing' | 'decreasing' | 'stable';\n  };\n  expenseGrowth: {\n    monthOverMonth: number[];\n    quarterOverQuarter: number[];\n    trend: 'increasing' | 'decreasing' | 'stable';\n  };\n  profitTrend: {\n    monthOverMonth: number[];\n    quarterOverQuarter: number[];\n    trend: 'improving' | 'declining' | 'stable';\n  };\n  seasonality: {\n    peakMonths: number[];\n    lowMonths: number[];\n    volatility: number; // Standard deviation as percentage\n  };\n}\n\n/**\n * Key Performance Indicators\n */\nexport interface KeyPerformanceIndicators {\n  profitMargin: number;\n  grossMargin: number;\n  averageMonthlyRevenue: number;\n  averageMonthlyExpenses: number;\n  revenueVolatility: number;\n  expenseRatio: number; // Expenses as % of revenue\n  vatEfficiency: number; // Deductible VAT as % of collected VAT\n  cashBurnRate: number; // Monthly cash consumption\n  breakEvenPoint: number; // Monthly revenue needed to break even\n}\n\n/**\n * Monthly value with metadata\n */\nexport interface MonthlyValue {\n  month: number;\n  monthName: string;\n  value: number;\n  change?: number; // Change from previous month\n  changePercentage?: number;\n}\n\n/**\n * Category breakdown for expenses\n */\nexport interface CategoryBreakdown {\n  category: string;\n  amount: number;\n  percentage: number; // Of total expenses\n  count: number; // Number of transactions\n}\n\n/**\n * Quarterly VAT summary\n */\nexport interface QuarterlyVAT {\n  quarter: number;\n  months: number[];\n  collected: number;\n  deductible: number;\n  netPosition: number;\n  dueDate: string; // When VAT is typically due\n}\n\n/**\n * Chart data for visualization\n */\nexport interface ChartData {\n  monthlyRevenue: ChartSeries;\n  monthlyExpenses: ChartSeries;\n  monthlyProfit: ChartSeries;\n  accountBalances: ChartSeries[];\n  vatPosition: ChartSeries;\n  cashFlow: ChartSeries;\n}\n\nexport interface ChartSeries {\n  name: string;\n  data: Array<{ x: string; y: number }>;\n  color?: string;\n  type?: 'line' | 'bar' | 'area';\n}\n\n/**\n * Get month name from number\n */\nfunction getMonthName(month: number): string {\n  const names = [\n    '', 'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n  return names[month] || `Month ${month}`;\n}\n\n/**\n * Calculate percentage change\n */\nfunction calculateChange(current: number, previous: number): { change: number; changePercentage: number } {\n  const change = current - previous;\n  const changePercentage = previous !== 0 ? (change / previous) * 100 : 0;\n  return { change, changePercentage };\n}\n\n/**\n * Calculate trend direction\n */\nfunction calculateTrend(values: number[]): 'increasing' | 'decreasing' | 'stable' {\n  if (values.length < 2) return 'stable';\n  \n  const increases = values.slice(1).reduce((count, val, i) => \n    count + (val > values[i] ? 1 : 0), 0);\n  const total = values.length - 1;\n  \n  if (increases / total > 0.6) return 'increasing';\n  if (increases / total < 0.4) return 'decreasing';\n  return 'stable';\n}\n\n/**\n * Calculate standard deviation\n */\nfunction calculateStandardDeviation(values: number[]): number {\n  const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n  const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n  const avgSquaredDiff = squaredDiffs.reduce((sum, val) => sum + val, 0) / values.length;\n  return Math.sqrt(avgSquaredDiff);\n}\n\n/**\n * Create monthly values with change calculations\n */\nfunction createMonthlyValues(monthlyTotals: MonthlySummary[], getValue: (m: MonthlySummary) => number): MonthlyValue[] {\n  return monthlyTotals.map((month, index) => {\n    const value = getValue(month);\n    const previousValue = index > 0 ? getValue(monthlyTotals[index - 1]) : value;\n    const { change, changePercentage } = calculateChange(value, previousValue);\n    \n    return {\n      month: month.month,\n      monthName: month.monthName,\n      value,\n      change: index > 0 ? change : undefined,\n      changePercentage: index > 0 ? changePercentage : undefined,\n    };\n  });\n}\n\n/**\n * Generate expense category breakdown\n */\nfunction generateCategoryBreakdown(results: SimulationResults): CategoryBreakdown[] {\n  const categories = new Map<string, { amount: number; count: number }>();\n  \n  // Aggregate by category from monthly balances\n  results.monthlyBalances\n    .filter(balance => balance.account === 'operating')\n    .forEach(balance => {\n      balance.transactions\n        .filter(tx => tx.type === 'expense' && tx.category)\n        .forEach(tx => {\n          const category = tx.category!;\n          const existing = categories.get(category) || { amount: 0, count: 0 };\n          categories.set(category, {\n            amount: existing.amount + Math.abs(tx.amount),\n            count: existing.count + 1,\n          });\n        });\n    });\n  \n  const totalAmount = Array.from(categories.values()).reduce((sum, cat) => sum + cat.amount, 0);\n  \n  return Array.from(categories.entries()).map(([category, data]) => ({\n    category,\n    amount: data.amount,\n    percentage: totalAmount > 0 ? (data.amount / totalAmount) * 100 : 0,\n    count: data.count,\n  })).sort((a, b) => b.amount - a.amount);\n}\n\n/**\n * Generate quarterly VAT summaries\n */\nfunction generateQuarterlyVAT(monthlyTotals: MonthlySummary[]): QuarterlyVAT[] {\n  const quarters: QuarterlyVAT[] = [];\n  \n  for (let q = 1; q <= 4; q++) {\n    const quarterMonths = [q * 3 - 2, q * 3 - 1, q * 3];\n    const quarterData = monthlyTotals.filter(m => quarterMonths.includes(m.month));\n    \n    const collected = quarterData.reduce((sum, m) => sum + m.revenue.vat, 0);\n    const deductible = quarterData.reduce((sum, m) => sum + m.expenses.deductibleVat, 0);\n    \n    // French VAT typically due by the 19th of the month following the quarter\n    const dueMonth = q * 3 + 1;\n    const dueDateMonth = dueMonth > 12 ? (dueMonth - 12) : dueMonth;\n    const dueYear = dueMonth > 12 ? monthlyTotals[0].month + 1 : monthlyTotals[0].month; // Approximate\n    \n    quarters.push({\n      quarter: q,\n      months: quarterMonths,\n      collected,\n      deductible,\n      netPosition: collected - deductible,\n      dueDate: `${dueYear}-${String(dueDateMonth).padStart(2, '0')}-19`,\n    });\n  }\n  \n  return quarters;\n}\n\n/**\n * Generate account summaries\n */\nfunction generateAccountSummary(results: SimulationResults): AccountSummary {\n  const accounts: { [K in Account]: AccountDetail } = {} as any;\n  const accountTypes: Account[] = ['operating', 'savings', 'personal', 'vat'];\n  \n  accountTypes.forEach(accountType => {\n    const accountBalances = results.monthlyBalances.filter(b => b.account === accountType);\n    const totalTransactions = accountBalances.reduce((sum, b) => sum + b.transactions.length, 0);\n    \n    const monthlyBalances = accountBalances.map(balance => ({\n      month: balance.month,\n      monthName: getMonthName(balance.month),\n      value: balance.closingBalance,\n    }));\n    \n    accounts[accountType] = {\n      account: accountType,\n      openingBalance: accountBalances[0]?.openingBalance || 0,\n      closingBalance: accountBalances[accountBalances.length - 1]?.closingBalance || 0,\n      totalTransactions,\n      netChange: accountBalances.reduce((sum, b) => sum + b.summary.netChange, 0),\n      monthlyBalances,\n    };\n  });\n  \n  const totalAssets = accounts.operating.closingBalance + accounts.savings.closingBalance;\n  const liquidityRatio = totalAssets / Math.max(Math.abs(accounts.vat.closingBalance), 1);\n  \n  return {\n    accounts,\n    totalAssets,\n    liquidityRatio,\n  };\n}\n\n/**\n * Generate trend analysis\n */\nfunction generateTrendAnalysis(monthlyTotals: MonthlySummary[]): TrendAnalysis {\n  const revenueValues = monthlyTotals.map(m => m.revenue.net);\n  const expenseValues = monthlyTotals.map(m => m.expenses.net);\n  const profitValues = monthlyTotals.map(m => m.netProfit);\n  \n  // Calculate month-over-month changes\n  const revenueChanges = revenueValues.slice(1).map((val, i) => \n    revenueValues[i] !== 0 ? ((val - revenueValues[i]) / revenueValues[i]) * 100 : 0\n  );\n  \n  const expenseChanges = expenseValues.slice(1).map((val, i) => \n    expenseValues[i] !== 0 ? ((val - expenseValues[i]) / expenseValues[i]) * 100 : 0\n  );\n  \n  const profitChanges = profitValues.slice(1).map((val, i) => \n    profitValues[i] !== 0 ? ((val - profitValues[i]) / profitValues[i]) * 100 : 0\n  );\n  \n  // Calculate quarterly changes\n  const quarterlyRevenue = [];\n  const quarterlyExpenses = [];\n  const quarterlyProfit = [];\n  \n  for (let q = 0; q < 4; q++) {\n    const startIdx = q * 3;\n    const quarterRevenue = revenueValues.slice(startIdx, startIdx + 3).reduce((sum, val) => sum + val, 0);\n    const quarterExpenses = expenseValues.slice(startIdx, startIdx + 3).reduce((sum, val) => sum + val, 0);\n    quarterlyRevenue.push(quarterRevenue);\n    quarterlyExpenses.push(quarterExpenses);\n    quarterlyProfit.push(quarterRevenue - quarterExpenses);\n  }\n  \n  const revenueQoQ = quarterlyRevenue.slice(1).map((val, i) => \n    quarterlyRevenue[i] !== 0 ? ((val - quarterlyRevenue[i]) / quarterlyRevenue[i]) * 100 : 0\n  );\n  \n  const expenseQoQ = quarterlyExpenses.slice(1).map((val, i) => \n    quarterlyExpenses[i] !== 0 ? ((val - quarterlyExpenses[i]) / quarterlyExpenses[i]) * 100 : 0\n  );\n  \n  const profitQoQ = quarterlyProfit.slice(1).map((val, i) => \n    quarterlyProfit[i] !== 0 ? ((val - quarterlyProfit[i]) / quarterlyProfit[i]) * 100 : 0\n  );\n  \n  // Identify seasonal patterns\n  const revenueStdDev = calculateStandardDeviation(revenueValues);\n  const revenueMean = revenueValues.reduce((sum, val) => sum + val, 0) / revenueValues.length;\n  const volatility = revenueMean > 0 ? (revenueStdDev / revenueMean) * 100 : 0;\n  \n  // Find peak and low months\n  const maxRevenue = Math.max(...revenueValues);\n  const minRevenue = Math.min(...revenueValues);\n  const peakMonths = revenueValues\n    .map((val, idx) => ({ val, month: idx + 1 }))\n    .filter(({ val }) => val > revenueMean + revenueStdDev)\n    .map(({ month }) => month);\n  const lowMonths = revenueValues\n    .map((val, idx) => ({ val, month: idx + 1 }))\n    .filter(({ val }) => val < revenueMean - revenueStdDev)\n    .map(({ month }) => month);\n  \n  return {\n    revenueGrowth: {\n      monthOverMonth: revenueChanges,\n      quarterOverQuarter: revenueQoQ,\n      trend: calculateTrend(revenueValues),\n    },\n    expenseGrowth: {\n      monthOverMonth: expenseChanges,\n      quarterOverQuarter: expenseQoQ,\n      trend: calculateTrend(expenseValues),\n    },\n    profitTrend: {\n      monthOverMonth: profitChanges,\n      quarterOverQuarter: profitQoQ,\n      trend: calculateTrend(profitValues),\n    },\n    seasonality: {\n      peakMonths,\n      lowMonths,\n      volatility,\n    },\n  };\n}\n\n/**\n * Calculate Key Performance Indicators\n */\nfunction calculateKPIs(results: SimulationResults): KeyPerformanceIndicators {\n  const { overallTotals, monthlyTotals } = results;\n  \n  const profitMargin = overallTotals.totalRevenue.net > 0 \n    ? (overallTotals.netProfit / overallTotals.totalRevenue.net) * 100 \n    : 0;\n  \n  const grossMargin = overallTotals.totalRevenue.gross > 0\n    ? ((overallTotals.totalRevenue.gross - overallTotals.totalExpenses.gross) / overallTotals.totalRevenue.gross) * 100\n    : 0;\n  \n  const activeMonths = monthlyTotals.filter(m => m.revenue.net > 0 || m.expenses.net > 0).length;\n  const avgMonthlyRevenue = activeMonths > 0 ? overallTotals.totalRevenue.net / activeMonths : 0;\n  const avgMonthlyExpenses = activeMonths > 0 ? overallTotals.totalExpenses.net / activeMonths : 0;\n  \n  const revenueValues = monthlyTotals.map(m => m.revenue.net);\n  const revenueVolatility = avgMonthlyRevenue > 0 \n    ? (calculateStandardDeviation(revenueValues) / avgMonthlyRevenue) * 100 \n    : 0;\n  \n  const expenseRatio = overallTotals.totalRevenue.net > 0\n    ? (overallTotals.totalExpenses.net / overallTotals.totalRevenue.net) * 100\n    : 0;\n  \n  const vatEfficiency = overallTotals.totalVatCollected > 0\n    ? (overallTotals.totalVatDeductible / overallTotals.totalVatCollected) * 100\n    : 0;\n  \n  // Calculate cash burn rate (negative cash flow months)\n  const cashFlowValues = monthlyTotals.map(m => m.netProfit);\n  const negativeCashFlows = cashFlowValues.filter(cf => cf < 0);\n  const cashBurnRate = negativeCashFlows.length > 0\n    ? Math.abs(negativeCashFlows.reduce((sum, cf) => sum + cf, 0)) / negativeCashFlows.length\n    : 0;\n  \n  const breakEvenPoint = avgMonthlyExpenses;\n  \n  return {\n    profitMargin,\n    grossMargin,\n    averageMonthlyRevenue: avgMonthlyRevenue,\n    averageMonthlyExpenses: avgMonthlyExpenses,\n    revenueVolatility,\n    expenseRatio,\n    vatEfficiency,\n    cashBurnRate,\n    breakEvenPoint,\n  };\n}\n\n/**\n * Generate comprehensive financial report\n */\nexport function generateFinancialReport(results: SimulationResults): FinancialReport {\n  const { overallTotals, monthlyTotals } = results;\n  \n  // Generate all report sections\n  const categoryBreakdown = generateCategoryBreakdown(results);\n  const quarterlyVAT = generateQuarterlyVAT(monthlyTotals);\n  const accountSummary = generateAccountSummary(results);\n  const trendAnalysis = generateTrendAnalysis(monthlyTotals);\n  const kpis = calculateKPIs(results);\n  \n  // Create monthly value arrays\n  const revenueByMonth = createMonthlyValues(monthlyTotals, m => m.revenue.net);\n  const expensesByMonth = createMonthlyValues(monthlyTotals, m => m.expenses.net);\n  const profitByMonth = createMonthlyValues(monthlyTotals, m => m.netProfit);\n  const vatByMonth = createMonthlyValues(monthlyTotals, m => m.netVatPosition);\n  \n  return {\n    period: {\n      year: results.year,\n      fiscalStartMonth: results.fiscalStartMonth,\n      reportType: 'annual',\n    },\n    overview: {\n      totalRevenue: overallTotals.totalRevenue.net,\n      totalExpenses: overallTotals.totalExpenses.net,\n      netProfit: overallTotals.netProfit,\n      profitMargin: kpis.profitMargin,\n      vatPosition: overallTotals.netVatOwed,\n      cashPosition: accountSummary.totalAssets,\n      reportGeneratedAt: new Date().toISOString(),\n    },\n    profitAndLoss: {\n      revenue: {\n        gross: overallTotals.totalRevenue.gross,\n        vat: overallTotals.totalRevenue.vat,\n        net: overallTotals.totalRevenue.net,\n        byMonth: revenueByMonth,\n      },\n      expenses: {\n        gross: overallTotals.totalExpenses.gross,\n        vat: overallTotals.totalExpenses.vat,\n        deductibleVat: overallTotals.totalExpenses.deductibleVat,\n        net: overallTotals.totalExpenses.net,\n        byMonth: expensesByMonth,\n        byCategory: categoryBreakdown,\n      },\n      grossProfit: overallTotals.totalRevenue.gross - overallTotals.totalExpenses.gross,\n      netProfit: overallTotals.netProfit,\n      monthlyNetProfit: profitByMonth,\n    },\n    vatSummary: {\n      collected: {\n        total: overallTotals.totalVatCollected,\n        byMonth: createMonthlyValues(monthlyTotals, m => m.revenue.vat),\n      },\n      deductible: {\n        total: overallTotals.totalVatDeductible,\n        byMonth: createMonthlyValues(monthlyTotals, m => m.expenses.deductibleVat),\n      },\n      netPosition: {\n        total: overallTotals.netVatOwed,\n        byMonth: vatByMonth,\n      },\n      quarterlyPositions: quarterlyVAT,\n      annualReturn: {\n        totalCollected: overallTotals.totalVatCollected,\n        totalDeductible: overallTotals.totalVatDeductible,\n        netOwed: overallTotals.netVatOwed,\n        estimatedPayments: Math.max(overallTotals.netVatOwed, 0),\n      },\n    },\n    cashFlow: {\n      openingBalance: accountSummary.accounts.operating.openingBalance + accountSummary.accounts.savings.openingBalance,\n      operatingCashFlow: {\n        revenue: overallTotals.totalRevenue.net,\n        expenses: -overallTotals.totalExpenses.net,\n        net: overallTotals.netProfit,\n      },\n      vatCashFlow: {\n        collected: overallTotals.totalVatCollected,\n        paid: Math.min(overallTotals.netVatOwed, 0), // VAT refunds are negative\n        net: -overallTotals.netVatOwed, // Cash impact is opposite of VAT owed\n      },\n      closingBalance: accountSummary.accounts.operating.closingBalance + accountSummary.accounts.savings.closingBalance,\n      monthlyFlow: createMonthlyValues(monthlyTotals, m => \n        (m.accountBalances.operating || 0) + (m.accountBalances.savings || 0)\n      ),\n    },\n    accountSummary,\n    trends: trendAnalysis,\n    kpis,\n  };\n}\n\n/**\n * Generate chart data for visualization\n */\nexport function generateChartData(results: SimulationResults): ChartData {\n  const { monthlyTotals } = results;\n  \n  return {\n    monthlyRevenue: {\n      name: 'Monthly Revenue',\n      data: monthlyTotals.map(m => ({ x: m.monthName, y: m.revenue.net })),\n      color: '#10B981',\n      type: 'bar',\n    },\n    monthlyExpenses: {\n      name: 'Monthly Expenses',\n      data: monthlyTotals.map(m => ({ x: m.monthName, y: m.expenses.net })),\n      color: '#EF4444',\n      type: 'bar',\n    },\n    monthlyProfit: {\n      name: 'Monthly Profit',\n      data: monthlyTotals.map(m => ({ x: m.monthName, y: m.netProfit })),\n      color: '#3B82F6',\n      type: 'line',\n    },\n    accountBalances: [\n      {\n        name: 'Operating Account',\n        data: monthlyTotals.map(m => ({ x: m.monthName, y: m.accountBalances.operating })),\n        color: '#8B5CF6',\n        type: 'line',\n      },\n      {\n        name: 'Savings Account', \n        data: monthlyTotals.map(m => ({ x: m.monthName, y: m.accountBalances.savings })),\n        color: '#F59E0B',\n        type: 'line',\n      },\n    ],\n    vatPosition: {\n      name: 'VAT Position',\n      data: monthlyTotals.map(m => ({ x: m.monthName, y: m.netVatPosition })),\n      color: '#EC4899',\n      type: 'area',\n    },\n    cashFlow: {\n      name: 'Cash Flow',\n      data: monthlyTotals.map(m => ({ \n        x: m.monthName, \n        y: (m.accountBalances.operating || 0) + (m.accountBalances.savings || 0)\n      })),\n      color: '#06B6D4',\n      type: 'area',\n    },\n  };\n}\n\n/**\n * Export report to various formats\n */\nexport interface ExportOptions {\n  format: 'json' | 'csv' | 'pdf';\n  sections?: string[]; // Which report sections to include\n  includeChartData?: boolean;\n}\n\nexport function exportReport(report: FinancialReport, options: ExportOptions = { format: 'json' }): string | Buffer {\n  switch (options.format) {\n    case 'json':\n      return JSON.stringify(report, null, 2);\n    \n    case 'csv':\n      return exportToCSV(report);\n    \n    case 'pdf':\n      throw new Error('PDF export not implemented yet');\n    \n    default:\n      throw new Error(`Unsupported export format: ${options.format}`);\n  }\n}\n\n/**\n * Convert report to CSV format\n */\nfunction exportToCSV(report: FinancialReport): string {\n  const lines: string[] = [];\n  \n  // Header\n  lines.push('Financial Report CSV Export');\n  lines.push(`Year: ${report.period.year}`);\n  lines.push(`Generated: ${report.overview.reportGeneratedAt}`);\n  lines.push('');\n  \n  // Monthly P&L\n  lines.push('Month,Revenue,Expenses,Net Profit,VAT Position');\n  report.profitAndLoss.monthlyNetProfit.forEach((month, i) => {\n    const revenue = report.profitAndLoss.revenue.byMonth[i]?.value || 0;\n    const expenses = report.profitAndLoss.expenses.byMonth[i]?.value || 0;\n    const vatPosition = report.vatSummary.netPosition.byMonth[i]?.value || 0;\n    lines.push(`${month.monthName},${revenue},${expenses},${month.value},${vatPosition}`);\n  });\n  \n  return lines.join('\\n');\n}\n\n/**\n * Validate simulation results for reporting\n */\nexport function validateResults(results: SimulationResults): string[] {\n  const errors: string[] = [];\n  \n  if (!results.year || results.year < 2020 || results.year > 2030) {\n    errors.push('Invalid simulation year');\n  }\n  \n  if (!results.monthlyTotals || results.monthlyTotals.length !== 12) {\n    errors.push('Missing or incomplete monthly totals');\n  }\n  \n  if (!results.overallTotals) {\n    errors.push('Missing overall totals');\n  }\n  \n  // Check for data consistency\n  const calculatedTotal = results.monthlyTotals?.reduce((sum, month) => sum + month.netProfit, 0) || 0;\n  const reportedTotal = results.overallTotals?.netProfit || 0;\n  \n  if (Math.abs(calculatedTotal - reportedTotal) > 0.01) {\n    errors.push('Inconsistent profit totals between monthly and overall summaries');\n  }\n  \n  return errors;\n}\n\nexport {\n  type FinancialReport,\n  type ReportOverview,\n  type ProfitAndLossStatement,\n  type VATSummary,\n  type ChartData,\n};","size_bytes":23147},"server/integration-tests.ts":{"content":"/**\n * IMPROVEMENT 3: Integration Tests & Test Scenarios\n * \n * Comprehensive test scenarios to validate simulation engine robustness:\n * - Pure revenue pattern test\n * - Pure expense pattern test  \n * - Mixed VAT with deductible and non-deductible expenses\n * - Roll-forward invariants and balance validation\n */\n\nimport { runSimulation } from './engine';\nimport type { SimulationInputs, Company, RevenuePattern, ExpensePattern } from '@shared/schema';\n\n/**\n * Test utility to create a mock company\n */\nfunction createTestCompany(fiscalStartMonth: number = 1): Company {\n  return {\n    id: 'test-company-001',\n    userId: 'test-user-001',\n    name: 'Test Company SAS',\n    legalForm: 'sas',\n    activitySector: 'technology',\n    capital: 10000,\n    bankPartner: 'Test Bank',\n    siretNumber: '12345678901234',\n    vatNumber: 'FR12345678901',\n    fiscalYear: fiscalStartMonth === 1 ? 'calendar' : 'fiscal',\n    businessType: 'traditional',\n    holidayRegion: 'FR',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  };\n}\n\n/**\n * Test Scenario 1: Pure Revenue Pattern Test\n * Tests revenue-only simulation with VAT calculations\n */\nexport async function testPureRevenuePattern(): Promise<boolean> {\n  console.log('🧪 Running Test Scenario 1: Pure Revenue Pattern');\n  \n  try {\n    const company = createTestCompany(1); // Calendar year\n    \n    const inputs: SimulationInputs = {\n      year: 2024,\n      fiscalStartMonth: 1,\n      startingBalances: {\n        operating: 1000,\n        savings: 5000,\n        personal: 0,\n        vat: 0,\n      },\n      businessType: 'traditional',\n      holidayRegion: 'FR',\n    };\n    \n    const revenuePatterns: Partial<RevenuePattern>[] = [\n      {\n        id: 'rev-001',\n        companyId: company.id,\n        name: 'Monthly Service Revenue',\n        amount: '12000.00', // €12,000 gross with 20% VAT\n        frequency: 'monthly',\n        startMonth: 1,\n        vatRate: '20.00',\n        isRecurring: 1,\n        excludeWeekends: 0,\n        excludeHolidays: 0,\n      },\n      {\n        id: 'rev-002',\n        companyId: company.id,\n        name: 'Quarterly Consulting Revenue',\n        amount: '15000.00', // €15,000 gross with 20% VAT\n        frequency: 'quarterly',\n        startMonth: 3,\n        vatRate: '20.00',\n        isRecurring: 1,\n        excludeWeekends: 0,\n        excludeHolidays: 0,\n      },\n    ];\n    \n    const expensePatterns: Partial<ExpensePattern>[] = []; // No expenses for pure revenue test\n    \n    const results = await runSimulation(\n      inputs,\n      revenuePatterns as RevenuePattern[],\n      expensePatterns as ExpensePattern[],\n      company\n    );\n    \n    // Validate results\n    const expectedMonthlyRevenue = 10000; // €12,000 / 1.20 (excluding VAT)\n    const expectedQuarterlyRevenue = 12500; // €15,000 / 1.20 (excluding VAT)\n    const expectedAnnualRevenue = (expectedMonthlyRevenue * 12) + (expectedQuarterlyRevenue * 4);\n    \n    if (Math.abs(results.overallTotals.totalRevenue.net - expectedAnnualRevenue) > 1) {\n      throw new Error(`Revenue calculation mismatch: expected ~${expectedAnnualRevenue}, got ${results.overallTotals.totalRevenue.net}`);\n    }\n    \n    // Validate that final operating balance includes all revenue\n    const finalOperatingBalance = results.overallTotals.finalAccountBalances.operating;\n    const expectedFinalBalance = inputs.startingBalances.operating + expectedAnnualRevenue;\n    \n    if (Math.abs(finalOperatingBalance - expectedFinalBalance) > 1) {\n      throw new Error(`Final balance mismatch: expected ~${expectedFinalBalance}, got ${finalOperatingBalance}`);\n    }\n    \n    // Validate VAT accumulation\n    if (results.overallTotals.totalVatCollected <= 0) {\n      throw new Error('VAT should be collected for revenue transactions');\n    }\n    \n    console.log('✅ Pure Revenue Pattern Test: PASSED');\n    return true;\n    \n  } catch (error) {\n    console.error('❌ Pure Revenue Pattern Test: FAILED', error);\n    return false;\n  }\n}\n\n/**\n * Test Scenario 2: Pure Expense Pattern Test\n * Tests expense-only simulation with VAT deductions\n */\nexport async function testPureExpensePattern(): Promise<boolean> {\n  console.log('🧪 Running Test Scenario 2: Pure Expense Pattern');\n  \n  try {\n    const company = createTestCompany(1); // Calendar year\n    \n    const inputs: SimulationInputs = {\n      year: 2024,\n      fiscalStartMonth: 1,\n      startingBalances: {\n        operating: 50000, // Start with enough to cover expenses\n        savings: 5000,\n        personal: 0,\n        vat: 0,\n      },\n      businessType: 'traditional',\n      holidayRegion: 'FR',\n    };\n    \n    const revenuePatterns: Partial<RevenuePattern>[] = []; // No revenue for pure expense test\n    \n    const expensePatterns: Partial<ExpensePattern>[] = [\n      {\n        id: 'exp-001',\n        companyId: company.id,\n        name: 'Office Rent',\n        amount: '2400.00', // €2,400 gross with 20% VAT (deductible)\n        category: 'rent',\n        frequency: 'monthly',\n        startMonth: 1,\n        vatDeductible: 1,\n        isRecurring: 1,\n        excludeWeekends: 0,\n        excludeHolidays: 0,\n      },\n      {\n        id: 'exp-002',\n        companyId: company.id,\n        name: 'Software Subscriptions',\n        amount: '600.00', // €600 gross with 20% VAT (deductible)\n        category: 'subscription',\n        frequency: 'monthly',\n        startMonth: 1,\n        vatDeductible: 1,\n        isRecurring: 1,\n        excludeWeekends: 0,\n        excludeHolidays: 0,\n      },\n      {\n        id: 'exp-003',\n        companyId: company.id,\n        name: 'Business Insurance',\n        amount: '1200.00', // €1,200 gross (no VAT)\n        category: 'insurance',\n        frequency: 'quarterly',\n        startMonth: 1,\n        vatDeductible: 0,\n        isRecurring: 1,\n        excludeWeekends: 0,\n        excludeHolidays: 0,\n      },\n    ];\n    \n    const results = await runSimulation(\n      inputs,\n      revenuePatterns as RevenuePattern[],\n      expensePatterns as ExpensePattern[],\n      company\n    );\n    \n    // Calculate expected expenses\n    const monthlyRentNet = 2000; // €2,400 / 1.20\n    const monthlySubscriptionNet = 500; // €600 / 1.20\n    const quarterlyInsuranceNet = 1200; // No VAT\n    \n    const expectedAnnualExpenses = (monthlyRentNet * 12) + (monthlySubscriptionNet * 12) + (quarterlyInsuranceNet * 4);\n    \n    if (Math.abs(results.overallTotals.totalExpenses.net - expectedAnnualExpenses) > 1) {\n      throw new Error(`Expense calculation mismatch: expected ~${expectedAnnualExpenses}, got ${results.overallTotals.totalExpenses.net}`);\n    }\n    \n    // Validate negative profit (expenses only)\n    if (results.overallTotals.netProfit >= 0) {\n      throw new Error('Net profit should be negative for expense-only simulation');\n    }\n    \n    // Validate VAT deductible amounts\n    if (results.overallTotals.totalVatDeductible <= 0) {\n      throw new Error('VAT deductible amount should be positive for deductible expenses');\n    }\n    \n    console.log('✅ Pure Expense Pattern Test: PASSED');\n    return true;\n    \n  } catch (error) {\n    console.error('❌ Pure Expense Pattern Test: FAILED', error);\n    return false;\n  }\n}\n\n/**\n * Test Scenario 3: Mixed VAT with Deductible and Non-Deductible Expenses\n * Tests complex VAT scenarios with different deductibility rules\n */\nexport async function testMixedVATPattern(): Promise<boolean> {\n  console.log('🧪 Running Test Scenario 3: Mixed VAT Pattern');\n  \n  try {\n    const company = createTestCompany(4); // April fiscal year start\n    \n    const inputs: SimulationInputs = {\n      year: 2024,\n      fiscalStartMonth: 4, // April start fiscal year\n      startingBalances: {\n        operating: 20000,\n        savings: 10000,\n        personal: 0,\n        vat: 0,\n      },\n      businessType: 'traditional',\n      holidayRegion: 'FR',\n    };\n    \n    const revenuePatterns: Partial<RevenuePattern>[] = [\n      {\n        id: 'rev-001',\n        companyId: company.id,\n        name: 'Consulting Revenue',\n        amount: '6000.00', // €6,000 gross with 20% VAT\n        frequency: 'monthly',\n        startMonth: 4, // Starts in April (fiscal start)\n        vatRate: '20.00',\n        isRecurring: 1,\n        excludeWeekends: 0,\n        excludeHolidays: 0,\n      },\n    ];\n    \n    const expensePatterns: Partial<ExpensePattern>[] = [\n      {\n        id: 'exp-001',\n        companyId: company.id,\n        name: 'Office Equipment',\n        amount: '1200.00', // €1,200 gross with 20% VAT (deductible)\n        category: 'equipment',\n        frequency: 'monthly',\n        startMonth: 4,\n        vatDeductible: 1, // VAT deductible\n        isRecurring: 1,\n        excludeWeekends: 0,\n        excludeHolidays: 0,\n      },\n      {\n        id: 'exp-002',\n        companyId: company.id,\n        name: 'Business Meals',\n        amount: '600.00', // €600 gross with 10% VAT (non-deductible for meals)\n        category: 'general',\n        frequency: 'monthly',\n        startMonth: 4,\n        vatDeductible: 0, // VAT NOT deductible\n        isRecurring: 1,\n        excludeWeekends: 0,\n        excludeHolidays: 0,\n      },\n      {\n        id: 'exp-003',\n        companyId: company.id,\n        name: 'Professional Insurance',\n        amount: '800.00', // €800 gross (no VAT - insurance exempt)\n        category: 'insurance',\n        frequency: 'quarterly',\n        startMonth: 4,\n        vatDeductible: 0, // No VAT on insurance\n        isRecurring: 1,\n        excludeWeekends: 0,\n        excludeHolidays: 0,\n      },\n    ];\n    \n    const results = await runSimulation(\n      inputs,\n      revenuePatterns as RevenuePattern[],\n      expensePatterns as ExpensePattern[],\n      company\n    );\n    \n    // Validate fiscal year ordering (should start with April)\n    if (results.monthlyTotals[0].month !== 4) {\n      throw new Error(`Fiscal year should start with April (month 4), but started with month ${results.monthlyTotals[0].month}`);\n    }\n    \n    // Validate fiscal year month naming\n    if (!results.monthlyTotals[0].monthName.includes('(FY Month 1)')) {\n      throw new Error(`April should be labeled as fiscal month 1: ${results.monthlyTotals[0].monthName}`);\n    }\n    \n    // Calculate expected values\n    const monthlyRevenueNet = 5000; // €6,000 / 1.20\n    const monthlyEquipmentNet = 1000; // €1,200 / 1.20\n    const monthlyMealsGross = 600; // Full amount (VAT not deductible)\n    const quarterlyInsuranceGross = 800; // No VAT\n    \n    const expectedAnnualRevenue = monthlyRevenueNet * 12;\n    const expectedAnnualExpenses = (monthlyEquipmentNet * 12) + (monthlyMealsGross * 12) + (quarterlyInsuranceGross * 4);\n    \n    // Validate revenue and expense totals\n    if (Math.abs(results.overallTotals.totalRevenue.net - expectedAnnualRevenue) > 1) {\n      throw new Error(`Revenue mismatch: expected ${expectedAnnualRevenue}, got ${results.overallTotals.totalRevenue.net}`);\n    }\n    \n    if (Math.abs(results.overallTotals.totalExpenses.net - expectedAnnualExpenses) > 1) {\n      throw new Error(`Expense mismatch: expected ${expectedAnnualExpenses}, got ${results.overallTotals.totalExpenses.net}`);\n    }\n    \n    // Validate VAT calculations\n    const expectedVATCollected = monthlyRevenueNet * 0.25 * 12; // 20% VAT on revenue\n    const expectedVATDeductible = monthlyEquipmentNet * 0.25 * 12; // Only equipment VAT is deductible\n    \n    if (Math.abs(results.overallTotals.totalVatCollected - expectedVATCollected) > 1) {\n      throw new Error(`VAT collected mismatch: expected ~${expectedVATCollected}, got ${results.overallTotals.totalVatCollected}`);\n    }\n    \n    if (Math.abs(results.overallTotals.totalVatDeductible - expectedVATDeductible) > 1) {\n      throw new Error(`VAT deductible mismatch: expected ~${expectedVATDeductible}, got ${results.overallTotals.totalVatDeductible}`);\n    }\n    \n    // Validate net VAT position\n    const expectedNetVAT = expectedVATCollected - expectedVATDeductible;\n    if (Math.abs(results.overallTotals.netVatOwed - expectedNetVAT) > 1) {\n      throw new Error(`Net VAT mismatch: expected ~${expectedNetVAT}, got ${results.overallTotals.netVatOwed}`);\n    }\n    \n    console.log('✅ Mixed VAT Pattern Test: PASSED');\n    return true;\n    \n  } catch (error) {\n    console.error('❌ Mixed VAT Pattern Test: FAILED', error);\n    return false;\n  }\n}\n\n/**\n * Test Scenario 4: Roll-Forward and Invariant Validation\n * Tests balance roll-forward between months and validates all invariants\n */\nexport async function testRollForwardInvariants(): Promise<boolean> {\n  console.log('🧪 Running Test Scenario 4: Roll-Forward and Invariant Validation');\n  \n  try {\n    const company = createTestCompany(7); // July fiscal year start (French businesses often use July)\n    \n    const inputs: SimulationInputs = {\n      year: 2024,\n      fiscalStartMonth: 7, // July start fiscal year\n      startingBalances: {\n        operating: 15000,\n        savings: 25000,\n        personal: 5000,\n        vat: -2000, // Negative VAT balance (owed to government)\n      },\n      businessType: 'traditional',\n      holidayRegion: 'FR',\n    };\n    \n    const revenuePatterns: Partial<RevenuePattern>[] = [\n      {\n        id: 'rev-001',\n        companyId: company.id,\n        name: 'Irregular Revenue',\n        amount: '3600.00',\n        frequency: 'monthly',\n        startMonth: 7,\n        vatRate: '20.00',\n        isRecurring: 1,\n        excludeWeekends: 0,\n        excludeHolidays: 0,\n      },\n    ];\n    \n    const expensePatterns: Partial<ExpensePattern>[] = [\n      {\n        id: 'exp-001',\n        companyId: company.id,\n        name: 'Variable Costs',\n        amount: '1800.00',\n        category: 'general',\n        frequency: 'monthly',\n        startMonth: 7,\n        vatDeductible: 1,\n        isRecurring: 1,\n        excludeWeekends: 0,\n        excludeHolidays: 0,\n      },\n    ];\n    \n    const results = await runSimulation(\n      inputs,\n      revenuePatterns as RevenuePattern[],\n      expensePatterns as ExpensePattern[],\n      company\n    );\n    \n    // The engine should automatically validate all invariants and throw if they fail\n    // If we reach this point, invariants are valid\n    \n    // Additional validation of fiscal year ordering\n    if (results.monthlyTotals[0].month !== 7) {\n      throw new Error(`Fiscal year should start with July (month 7), but started with month ${results.monthlyTotals[0].month}`);\n    }\n    \n    if (results.monthlyTotals[11].month !== 6) {\n      throw new Error(`Fiscal year should end with June (month 6), but ended with month ${results.monthlyTotals[11].month}`);\n    }\n    \n    // Validate that final balances reflect the full year of operations\n    const initialTotal = Object.values(inputs.startingBalances).reduce((sum, val) => sum + val, 0);\n    const finalTotal = Object.values(results.overallTotals.finalAccountBalances).reduce((sum, val) => sum + val, 0);\n    const netOperationalChange = results.overallTotals.netProfit;\n    \n    // Final total should equal initial total plus net profit (approximately)\n    const expectedFinalTotal = initialTotal + netOperationalChange;\n    if (Math.abs(finalTotal - expectedFinalTotal) > 5) { // Allow small rounding differences\n      throw new Error(`Total balance conservation failed: initial ${initialTotal} + profit ${netOperationalChange} ≠ final ${finalTotal}`);\n    }\n    \n    console.log('✅ Roll-Forward and Invariant Validation Test: PASSED');\n    return true;\n    \n  } catch (error) {\n    console.error('❌ Roll-Forward and Invariant Validation Test: FAILED', error);\n    return false;\n  }\n}\n\n/**\n * Run all integration test scenarios\n */\nexport async function runAllIntegrationTests(): Promise<boolean> {\n  console.log('🚀 Starting Comprehensive Integration Test Suite');\n  console.log('=' .repeat(60));\n  \n  const testResults = await Promise.all([\n    testPureRevenuePattern(),\n    testPureExpensePattern(),\n    testMixedVATPattern(),\n    testRollForwardInvariants(),\n  ]);\n  \n  const passedTests = testResults.filter(result => result === true).length;\n  const totalTests = testResults.length;\n  \n  console.log('=' .repeat(60));\n  console.log(`📊 Integration Test Results: ${passedTests}/${totalTests} tests passed`);\n  \n  if (passedTests === totalTests) {\n    console.log('🎉 ALL INTEGRATION TESTS PASSED - Simulation engine is production ready!');\n    return true;\n  } else {\n    console.log('⚠️  Some integration tests failed - Please review the failures above');\n    return false;\n  }\n}","size_bytes":16438}},"version":1}